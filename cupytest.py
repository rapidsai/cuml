import cupy as cp
from scipy.sparse import csr_matrix as scipy_csr_matrix
from cupyx.scipy.sparse import csr_matrix
from cupyx.scipy.sparse.linalg import eigsh as cupy_eigsh
from scipy.sparse.linalg import eigsh as scipy_eigsh
import numpy as np

np.set_printoptions(linewidth=np.inf, threshold=np.inf)


X = [[ 2.0000000,  1.0000000,  0.0000000,  0.0000000, 14.0000000, 11.0000000,  0.0000000,  2.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  1.0000000,  0.0000000,  0.0000000,  2.0000000,  1.0000000,  0.0000000,  1.0000000, 26.0000000, 24.0000000,  7.0000000,  8.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  1.0000000,  1.0000000,  1.0000000,  0.0000000],
 [ 1.0000000,  0.0000000,  0.0000000,  0.0000000, 11.0000000,  0.0000000,  1.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  1.0000000,  0.0000000,  1.0000000,  0.0000000,  1.0000000,  0.0000000, 11.0000000,  0.0000000,  1.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  1.0000000,  0.0000000,  0.0000000,  0.0000000],
 [ 0.0000000,  0.0000000,  0.0000000,  0.0000000,  4.0000000,  4.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  2.0000000,  3.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000],
 [ 0.0000000,  0.0000000,  0.0000000,  0.0000000,  6.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000],
 [14.0000000, 11.0000000,  4.0000000,  6.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  1.0000000,  1.0000000,  0.0000000,  1.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000, 68.0000000, 61.0000000, 30.0000000, 24.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  4.0000000,  5.0000000,  5.0000000,  3.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000],
 [11.0000000,  0.0000000,  4.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  1.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000, 22.0000000,  0.0000000, 20.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  1.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000],
 [ 0.0000000,  1.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  1.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  4.0000000,  6.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  1.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000],
 [ 2.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  1.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000],
 [ 0.0000000,  0.0000000,  0.0000000,  0.0000000,  1.0000000,  0.0000000,  1.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000],
 [ 0.0000000,  0.0000000,  0.0000000,  0.0000000,  1.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000],
 [ 0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  1.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000],
 [ 0.0000000,  0.0000000,  0.0000000,  0.0000000,  1.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000],
 [ 0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000],
 [ 1.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000],
 [ 0.0000000,  1.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000],
 [ 0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000],
 [ 2.0000000,  1.0000000,  0.0000000,  0.0000000, 68.0000000, 22.0000000,  4.0000000,  1.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000],
 [ 1.0000000,  0.0000000,  0.0000000,  0.0000000, 61.0000000,  0.0000000,  6.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000],
 [ 0.0000000,  1.0000000,  0.0000000,  0.0000000, 30.0000000, 20.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000],
 [ 1.0000000,  0.0000000,  0.0000000,  0.0000000, 24.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000],
 [26.0000000, 11.0000000,  2.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000],
 [24.0000000,  0.0000000,  3.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000],
 [ 7.0000000,  1.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000],
 [ 8.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000],
 [ 0.0000000,  0.0000000,  0.0000000,  0.0000000,  4.0000000,  1.0000000,  1.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000],
 [ 0.0000000,  0.0000000,  0.0000000,  0.0000000,  5.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000],
 [ 0.0000000,  0.0000000,  0.0000000,  0.0000000,  5.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000],
 [ 0.0000000,  0.0000000,  0.0000000,  0.0000000,  3.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000],
 [ 1.0000000,  1.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000],
 [ 1.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000],
 [ 1.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000],
 [ 0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000,  0.0000000]]


X = cp.asarray(X, dtype=cp.float32)
print(cp.all(X.T == X)) # check symmetric
X = csr_matrix(X)
X_cpu = scipy_csr_matrix(cp.asnumpy(X.toarray()))
print(X.shape, X.nnz)

rng = cp.random.default_rng(42)
v0 = rng.random((X.shape[0])).astype(cp.float32)
eigenvalues_cupy, eigenvectors_cupy = cupy_eigsh(X, k=2, which="SA", maxiter=10000, tol=1e-9, v0=v0, ncv=10)

print(eigenvalues_cupy)

eigenvalues_scipy, eigenvectors_scipy = scipy_eigsh(X_cpu, k=2, which="SA", maxiter=10000, tol=1e-9, v0=cp.asnumpy(v0))

print(eigenvalues_scipy)


# np.set_printoptions(linewidth=np.inf, precision=7, suppress=True, threshold=np.inf, floatmode='fixed')

# from pylibraft.random import rmat

# # def symmetric_normalize(csr):
# #     # Compute the degree matrix (sum of each row)
# #     degrees = csr.sum(axis=1).ravel()
    
# #     # Handle zero degrees by setting them to 1 to avoid division by zero
# #     degrees[degrees == 0] = 1
    
# #     # Compute the inverse square root of the degree matrix
# #     degrees_inv_sqrt = 1.0 / cp.sqrt(degrees)
    
# #     # Construct the inverse square root degree matrix
# #     degree_matrix_inv_sqrt = cp.sparse.diags(degrees_inv_sqrt)
    
# #     # Perform symmetric normalization
# #     normalized_csr = degree_matrix_inv_sqrt @ csr @ degree_matrix_inv_sqrt
# #     return normalized_csr

# def cupy_to_scipy(cupy_csr):
#     # Extract data, indices, and indptr from the cupy CSR matrix
#     data = cp.asnumpy(cupy_csr.data)
#     indices = cp.asnumpy(cupy_csr.indices)
#     indptr = cp.asnumpy(cupy_csr.indptr)
    
#     # Create a scipy CSR matrix using the extracted data
#     scipy_csr = scipy_csr_matrix((data, indices, indptr), shape=(num_nodes, num_nodes), dtype=np.float32)
    
#     return scipy_csr

# r_scale = 12
# c_scale = 12
# sparsity = 0.4
# n_edges = int(sparsity * (2**r_scale * 2**c_scale))
# print(n_edges)

# theta_len = max(r_scale, c_scale) * 4

# seed = 1234
# cp.random.seed(seed)

# out = cp.empty((n_edges, 2), dtype=cp.int32)
# theta = cp.random.random_sample(theta_len, dtype=cp.float32)

# rmat(out, theta, r_scale, c_scale, seed=seed, handle=None)

# src_nodes = out[:, 0]
# dst_nodes = out[:, 1]
# data = cp.ones(src_nodes.shape[0])

# # Compute the number of nodes
# num_nodes = 2 ** max(r_scale, c_scale)

# adj_matrix_csr = csr_matrix((data, (src_nodes, dst_nodes)), shape=(num_nodes, num_nodes), dtype=cp.float32)

# n_samples = num_nodes
# n_components = 200

# X = adj_matrix_csr
# X = X + X.T

# # X = symmetric_normalize(X)

# X_cpu = cupy_to_scipy(X)

# rng = cp.random.default_rng(42)
# v0_dev = rng.random((n_samples)).astype(cp.float32)
# v0 = cp.asnumpy(v0_dev)

# eigenvalues_cupy, eigenvectors_cupy = cupy_eigsh(X, k=n_components, which="SA", maxiter=10000, tol=0, v0=v0_dev)
# print(eigenvalues_cupy)

# eigenvalues_scipy, eigenvectors_scipy = scipy_eigsh(X_cpu, k=n_components, which="SA", maxiter=10000, tol=0)

# print(eigenvalues_scipy)


