# Dependency list for https://github.com/rapidsai/dependency-file-generator
files:
  all:
    output: conda
    matrix:
      cuda: ["11.8", "12.2"]
      arch: [x86_64]
    includes:
      - common_build
      - cuda
      - cuda_version
      - docs
      - py_build
      - py_run
      - py_version
      - test_python
  cpp_all:
    output: conda
    matrix:
      cuda: ["11.8", "12.2"]
      arch: [x86_64]
    includes:
      - common_build
      - cuda
      - cuda_version
  checks:
    output: none
    includes:
      - checks
      - py_version
  clang_tidy:
    output: conda
    matrix:
      cuda: ["11.8"]
      arch: [x86_64]
    includes:
      - clang_tidy
      - common_build
      - cuda
      - cuda_version
  docs:
    output: none
    includes:
      - cuda_version
      - docs
      - py_version
  test_cpp:
    output: none
    includes:
      - cuda_version
      - test_libcuml
      - test_cpp
  test_python:
    output: none
    includes:
      - cuda_version
      - py_version
      - test_cuml
      - test_python
  test_notebooks:
    output: none
    includes:
      - cuda_version
      - py_run
      - py_version
      - test_cuml
      - test_notebooks
  py_build:
    output: pyproject
    extras:
      table: build-system
    includes:
      - common_build
      - py_build
  py_run:
    output: pyproject
    extras:
      table: project
    includes:
      - py_run
  py_test:
    output: pyproject
    extras:
      table: project.optional-dependencies
      key: test
    includes:
      - test_python
channels:
  - rapidsai
  - rapidsai-nightly
  - dask/label/dev
  - conda-forge
  - nvidia
dependencies:
  checks:
    common:
      - output_types: [conda, requirements]
        packages:
          - pre-commit
  clang_tidy:
    common:
      - output_types: [conda, requirements]
        packages:
          # clang 15 required by libcudacxx.
          - clang==15.0.7
          - clang-tools==15.0.7
          - ninja
          - tomli
  common_build:
    common:
      - output_types: [conda, requirements, pyproject]
        packages:
          - &cmake_ver cmake>=3.26.4
          - ninja
      - output_types: conda
        packages:
          - c-compiler
          - cxx-compiler
          - gmock>=1.13.0
          - gtest>=1.13.0
          - libcumlprims==24.6.*
          - libraft==24.6.*
          - libraft-headers==24.6.*
          - librmm==24.6.*
    specific:
      - output_types: conda
        matrices:
          - matrix:
              arch: x86_64
            packages:
              - gcc_linux-64=11.*
              - sysroot_linux-64==2.17
          - matrix:
              arch: aarch64
            packages:
              - gcc_linux-aarch64=11.*
              - sysroot_linux-aarch64==2.17
      - output_types: conda
        matrices:
          - matrix:
              arch: x86_64
              cuda: "11.8"
            packages:
              - nvcc_linux-64=11.8
          - matrix:
              arch: aarch64
              cuda: "11.8"
            packages:
              - nvcc_linux-aarch64=11.8
          - matrix:
              cuda: "12.*"
            packages:
              - cuda-nvcc
  py_build:
    common:
      - output_types: [conda, requirements, pyproject]
        packages:
          - cython>=3.0.0
          - &treelite treelite==4.1.2
      - output_types: conda
        packages:
          - &pylibraft_conda pylibraft==24.6.*
          - &rmm_conda rmm==24.6.*
          - scikit-build-core>=0.7.0
      - output_types: requirements
        packages:
          # pip recognizes the index as a global option for the requirements.txt file
          # This index is needed for cudf and rmm.
          - --extra-index-url=https://pypi.nvidia.com
          - --extra-index-url=https://pypi.anaconda.org/rapidsai-wheels-nightly/simple
      - output_types: [pyproject, requirements]
        packages:
          - scikit-build-core[pyproject]>=0.7.0
    specific:
      - output_types: [conda, requirements, pyproject]
        matrices:
          - matrix:
              cuda: "12.*"
            packages:
              - cuda-python>=12.0,<13.0a0
          - matrix: # All CUDA 11 versions
            packages:
              - cuda-python>=11.7.1,<12.0a0
      - output_types: [requirements, pyproject]
        matrices:
          - matrix: {cuda: "12.*"}
            packages:
              - pylibraft-cu12==24.6.*
              - rmm-cu12==24.6.*
          - matrix: {cuda: "11.*"}
            packages:
              - &pylibraft_cu11 pylibraft-cu11==24.6.*
              - &rmm_cu11 rmm-cu11==24.6.*
          - {matrix: null, packages: [*pylibraft_conda, *rmm_conda] }

  py_run:
    common:
      - output_types: [conda, requirements, pyproject]
        packages:
          - dask-cuda==24.6.*
          - joblib>=0.11
          - numba>=0.57
            # TODO: Is scipy really a hard dependency, or should
            # we make it optional (i.e. an extra for pip
            # installation/run_constrained for conda)?
          - scipy>=1.8.0
          - rapids-dask-dependency==24.6.*
          - *treelite
      - output_types: conda
        packages:
          - &cudf_conda cudf==24.6.*
          - &cupy_conda cupy>=12.0.0
          - &dask_cudf_conda dask-cudf==24.6.*
          - &raft_dask_conda raft-dask==24.6.*
      - output_types: requirements
        packages:
          # pip recognizes the index as a global option for the requirements.txt file
          # This index is needed for cudf and rmm.
          - --extra-index-url=https://pypi.nvidia.com
          - --extra-index-url=https://pypi.anaconda.org/rapidsai-wheels-nightly/simple
    specific:
      - output_types: [requirements, pyproject]
        matrices:
          - matrix: {cuda: "12.*"}
            packages:
              - cudf-cu12==24.6.*
              - cupy-cuda12x>=12.0.0
              - dask-cudf-cu12==24.6.*
              - pylibraft-cu12==24.6.*
              - raft-dask-cu12==24.6.*
              - rmm-cu12==24.6.*
          - matrix: {cuda: "11.*"}
            packages: &py_run_packages_cu11
              - cudf-cu11==24.6.*
              - &cupy_pyproject_cu11 cupy-cuda11x>=12.0.0
              - dask-cudf-cu11==24.6.*
              - *pylibraft_cu11
              - raft-dask-cu11==24.6.*
              - *rmm_cu11
          - matrix: null
            packages:
              - *cudf_conda
              - *cupy_pyproject_cu11
              - *dask_cudf_conda
              - *pylibraft_conda
              - *raft_dask_conda
              - *rmm_conda
  cuda_version:
    specific:
      - output_types: conda
        matrices:
          - matrix:
              cuda: "11.2"
            packages:
              - cuda-version=11.2
          - matrix:
              cuda: "11.4"
            packages:
              - cuda-version=11.4
          - matrix:
              cuda: "11.5"
            packages:
              - cuda-version=11.5
          - matrix:
              cuda: "11.8"
            packages:
              - cuda-version=11.8
          - matrix:
              cuda: "12.0"
            packages:
              - cuda-version=12.0
          - matrix:
              cuda: "12.2"
            packages:
              - cuda-version=12.2
  cuda:
    specific:
      - output_types: conda
        matrices:
          - matrix:
              cuda: "12.*"
            packages:
              - cuda-cudart-dev
              - cuda-profiler-api
              - libcublas-dev
              - libcufft-dev
              - libcurand-dev
              - libcusolver-dev
              - libcusparse-dev
          - matrix:
              cuda: "11.8"
            packages:
              - cudatoolkit
              - libcublas-dev=11.11.3.6
              - libcublas=11.11.3.6
              - libcufft-dev=10.9.0.58
              - libcufft=10.9.0.58
              - libcurand-dev=10.3.0.86
              - libcurand=10.3.0.86
              - libcusolver-dev=11.4.1.48
              - libcusolver=11.4.1.48
              - libcusparse-dev=11.7.5.86
              - libcusparse=11.7.5.86
          - matrix:
              cuda: "11.5"
            packages:
              - cudatoolkit
              - libcublas-dev>=11.7.3.1,<=11.7.4.6
              - libcublas>=11.7.3.1,<=11.7.4.6
              - libcufft-dev>=10.6.0.54,<=10.6.0.107
              - libcufft>=10.6.0.54,<=10.6.0.107
              - libcurand-dev>=10.2.6.48,<=10.2.7.107
              - libcurand>=10.2.6.48,<=10.2.7.107
              - libcusolver-dev>=11.2.1.48,<=11.3.2.107
              - libcusolver>=11.2.1.48,<=11.3.2.107
              - libcusparse-dev>=11.7.0.31,<=11.7.0.107
              - libcusparse>=11.7.0.31,<=11.7.0.107
          - matrix:
              cuda: "11.4"
            packages:
              - cudatoolkit
              - &libcublas_dev114 libcublas-dev>=11.5.2.43,<=11.6.5.2
              - &libcublas114 libcublas>=11.5.2.43,<=11.6.5.2
              - &libcufft_dev114 libcufft-dev>=10.5.0.43,<=10.5.2.100
              - &libcufft114 libcufft>=10.5.0.43,<=10.5.2.100
              - &libcurand_dev114 libcurand-dev>=10.2.5.43,<=10.2.5.120
              - &libcurand114 libcurand>=10.2.5.43,<=10.2.5.120
              - &libcusolver_dev114 libcusolver-dev>=11.2.0.43,<=11.2.0.120
              - &libcusolver114 libcusolver>=11.2.0.43,<=11.2.0.120
              - &libcusparse_dev114 libcusparse-dev>=11.6.0.43,<=11.6.0.120
              - &libcusparse114 libcusparse>=11.6.0.43,<=11.6.0.120
          - matrix:
              cuda: "11.2"
            packages:
              - cudatoolkit
              # The NVIDIA channel doesn't publish pkgs older than 11.4 for these libs,
              # so 11.2 uses 11.4 packages (the oldest available).
              - *libcublas_dev114
              - *libcublas114
              - *libcufft_dev114
              - *libcufft114
              - *libcurand_dev114
              - *libcurand114
              - *libcusolver_dev114
              - *libcusolver114
              - *libcusparse_dev114
              - *libcusparse114
  docs:
    common:
      - output_types: [conda, requirements]
        packages:
          - graphviz
          - ipython
          - ipykernel
          - nbsphinx
          - numpydoc
          # https://github.com/pydata/pydata-sphinx-theme/issues/1539
          - pydata-sphinx-theme!=0.14.2
          - recommonmark
          - &scikit_learn scikit-learn==1.2
          - sphinx<6
          - sphinx-copybutton
          - sphinx-markdown-tables
      - output_types: conda
        packages:
          - doxygen=1.9.1
  py_version:
    specific:
      - output_types: conda
        matrices:
          - matrix:
              py: "3.9"
            packages:
              - python=3.9
          - matrix:
              py: "3.10"
            packages:
              - python=3.10
          - matrix:
              py: "3.11"
            packages:
              - python=3.11
          - matrix:
            packages:
              - python>=3.9,<3.12
  test_libcuml:
    common:
      - output_types: conda
        packages:
          - libcuml==24.6.*
          - libcuml-tests==24.6.*
  test_cuml:
    common:
      - output_types: conda
        packages:
          - libcuml==24.6.*
          - cuml==24.6.*
  test_cpp:
    common:
      - output_types: conda
        packages:
          - *cmake_ver
  test_python:
    common:
      - output_types: [conda, requirements, pyproject]
        packages:
          - dask-ml
          - hypothesis>=6.0,<7
          - nltk
          - numpydoc
          - pytest==7.*
          - pytest-benchmark
          - pytest-cases
          - pytest-cov
          - pytest-xdist
          - seaborn
          - *scikit_learn
          - statsmodels
          - umap-learn==0.5.3
          - pynndescent==0.5.8
      - output_types: conda
        packages:
          - pip
          - pip:
              - dask-glm==0.3.0
          # TODO: remove pin once a release that includes fixes for the error
          # is released: https://github.com/rapidsai/cuml/issues/5514
          - hdbscan<=0.8.30
      - output_types: pyproject
        packages:
          - dask-glm==0.3.0
            # TODO: Can we stop pulling from the master branch now that there was a release in October?
          - hdbscan @ git+https://github.com/scikit-learn-contrib/hdbscan.git@master
  test_notebooks:
    common:
      - output_types: [conda, requirements]
        packages:
          - dask-ml==2023.3.24
          - jupyter
          - matplotlib
          - numpy
          - pandas
          - *scikit_learn
          - seaborn
