#
# Copyright (c) 2024-2025, NVIDIA CORPORATION.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
from functools import partial

import pytest
from sklearn.utils import estimator_checks

from cuml.cluster import DBSCAN, HDBSCAN, AgglomerativeClustering, KMeans
from cuml.decomposition import PCA, IncrementalPCA, TruncatedSVD
from cuml.ensemble import RandomForestClassifier, RandomForestRegressor
from cuml.kernel_ridge import KernelRidge
from cuml.linear_model import (
    ElasticNet,
    Lasso,
    LinearRegression,
    LogisticRegression,
    Ridge,
)
from cuml.manifold import TSNE, UMAP
from cuml.naive_bayes import (
    BernoulliNB,
    CategoricalNB,
    ComplementNB,
    GaussianNB,
    MultinomialNB,
)
from cuml.neighbors import (
    KernelDensity,
    KNeighborsClassifier,
    KNeighborsRegressor,
    NearestNeighbors,
)
from cuml.random_projection import (
    GaussianRandomProjection,
    SparseRandomProjection,
)
from cuml.svm import SVC, SVR, LinearSVC, LinearSVR

# Skip these tests as parameterize_with_checks has a different signature in
# older versions of scikit-learn.
pytest.importorskip("sklearn", minversion="1.7")


PER_ESTIMATOR_XFAIL_CHECKS = {
    KMeans: {
        "check_estimator_tags_renamed": "No support for modern tags infrastructure",
        "check_no_attributes_set_in_init": "KMeans sets attributes during init",
        "check_dont_overwrite_parameters": "KMeans overwrites parameters during fit",
        "check_estimators_unfitted": "KMeans does not raise NotFittedError before fit",
        "check_do_not_raise_errors_in_init_or_set_params": "KMeans raises errors in init or set_params",
        "check_n_features_in_after_fitting": "KMeans does not check n_features_in consistency",
        "check_sample_weights_not_an_array": "KMeans does not handle non-array sample weights",
        "check_sample_weights_list": "KMeans does not handle list sample weights",
        "check_sample_weights_shape": "KMeans does not validate sample weights shape",
        "check_sample_weight_equivalence_on_dense_data": "KMeans sample weight equivalence not implemented",
        "check_complex_data": "KMeans does not handle complex data",
        "check_dtype_object": "KMeans does not handle object dtype",
        "check_estimators_nan_inf": "KMeans does not check for NaN and inf",
        "check_estimator_sparse_tag": "KMeans does not support sparse data",
        "check_estimator_sparse_array": "KMeans does not handle sparse arrays gracefully",
        "check_estimator_sparse_matrix": "KMeans does not handle sparse matrices gracefully",
        "check_transformer_data_not_an_array": "KMeans does not handle non-array data",
        "check_parameters_default_constructible": "KMeans parameters are mutated on init",
        "check_fit_check_is_fitted": "KMeans passes check_is_fitted before being fit",
        "check_fit1d": "KMeans does not raise ValueError for 1D input",
        "check_fit2d_predict1d": "KMeans does not handle 1D prediction input gracefully",
    },
    KernelRidge: {
        "check_estimator_tags_renamed": "No support for modern tags infrastructure",
        "check_no_attributes_set_in_init": "KernelRidge sets attributes during init",
        "check_dont_overwrite_parameters": "KernelRidge overwrites parameters during fit",
        "check_estimators_unfitted": "KernelRidge does not raise NotFittedError before fit",
        "check_do_not_raise_errors_in_init_or_set_params": "KernelRidge raises errors in init or set_params",
        "check_n_features_in_after_fitting": "KernelRidge does not check n_features_in consistency",
        "check_estimators_dtypes": "KernelRidge does not handle dtypes properly",
        "check_sample_weights_pandas_series": "KernelRidge does not handle pandas Series sample weights",
        "check_sample_weights_not_an_array": "KernelRidge does not handle non-array sample weights",
        "check_complex_data": "KernelRidge does not handle complex data",
        "check_dtype_object": "KernelRidge does not handle object dtype",
        "check_estimators_empty_data_messages": "KernelRidge does not handle empty data",
        "check_estimators_nan_inf": "KernelRidge does not check for NaN and inf",
        "check_estimator_sparse_tag": "KernelRidge does not support sparse data",
        "check_estimator_sparse_array": "KernelRidge does not handle sparse arrays gracefully",
        "check_estimator_sparse_matrix": "KernelRidge does not handle sparse matrices gracefully",
        "check_regressors_train": "KernelRidge does not handle list inputs",
        "check_regressors_train(readonly_memmap=True)": "KernelRidge does not handle readonly memmap",
        "check_regressors_train(readonly_memmap=True,X_dtype=float32)": "KernelRidge does not handle readonly memmap with float32",
        "check_regressor_data_not_an_array": "KernelRidge does not handle non-array data",
        "check_supervised_y_2d": "KernelRidge does not handle 2D y",
        "check_supervised_y_no_nan": "KernelRidge does not check for NaN in y",
        "check_parameters_default_constructible": "KernelRidge parameters are mutated on init",
        "check_fit1d": "KernelRidge does not raise ValueError for 1D input",
        "check_fit2d_predict1d": "KernelRidge does not handle 1D prediction input gracefully",
        "check_requires_y_none": "KernelRidge does not handle y=None",
    },
    LogisticRegression: {
        "check_estimator_tags_renamed": "No support for modern tags infrastructure",
        "check_no_attributes_set_in_init": "LogisticRegression sets attributes during init",
        "check_dont_overwrite_parameters": "LogisticRegression overwrites parameters during fit",
        "check_estimators_unfitted": "LogisticRegression does not raise NotFittedError before fit",
        "check_do_not_raise_errors_in_init_or_set_params": "LogisticRegression raises errors in init or set_params",
        "check_n_features_in_after_fitting": "LogisticRegression does not check n_features_in consistency",
        "check_sample_weights_not_an_array": "LogisticRegression does not handle non-array sample weights",
        "check_sample_weights_list": "LogisticRegression does not handle list sample weights",
        "check_sample_weight_equivalence_on_dense_data": "LogisticRegression sample weight equivalence not implemented",
        "check_sample_weight_equivalence_on_sparse_data": "LogisticRegression does not handle sparse data",
        "check_complex_data": "LogisticRegression does not handle complex data",
        "check_dtype_object": "LogisticRegression does not handle object dtype",
        "check_estimators_empty_data_messages": "LogisticRegression does not handle empty data",
        "check_estimators_nan_inf": "LogisticRegression does not check for NaN and inf",
        "check_estimator_sparse_tag": "LogisticRegression does not support sparse data",
        "check_classifier_data_not_an_array": "LogisticRegression does not handle non-array data",
        "check_classifiers_one_label": "LogisticRegression cannot train with one class",
        "check_classifiers_train": "LogisticRegression does not handle list inputs",
        "check_classifiers_train(readonly_memmap=True)": "LogisticRegression does not handle readonly memmap",
        "check_classifiers_train(readonly_memmap=True,X_dtype=float32)": "LogisticRegression does not handle readonly memmap with float32",
        "check_classifiers_regression_target": "LogisticRegression does not handle regression targets",
        "check_supervised_y_no_nan": "LogisticRegression does not check for NaN in y",
        "check_supervised_y_2d": "LogisticRegression does not handle 2D y",
        "check_class_weight_classifiers": "LogisticRegression does not handle class weights properly",
        "check_parameters_default_constructible": "LogisticRegression parameters are mutated on init",
        "check_fit2d_1sample": "LogisticRegression does not handle single sample",
        "check_set_params": "LogisticRegression does not handle set_params properly",
        "check_fit1d": "LogisticRegression does not raise ValueError for 1D input",
        "check_fit2d_predict1d": "LogisticRegression does not handle 1D prediction input gracefully",
        "check_requires_y_none": "LogisticRegression does not handle y=None",
    },
    LinearRegression: {
        "check_estimator_tags_renamed": "No support for modern tags infrastructure",
        "check_no_attributes_set_in_init": "LinearRegression sets attributes during init",
        "check_dont_overwrite_parameters": "LinearRegression overwrites parameters during fit",
        "check_estimators_unfitted": "LinearRegression does not raise NotFittedError before fit",
        "check_do_not_raise_errors_in_init_or_set_params": "LinearRegression raises errors in init or set_params",
        "check_n_features_in_after_fitting": "LinearRegression does not check n_features_in consistency",
        "check_sample_weights_not_an_array": "LinearRegression does not handle non-array sample weights",
        "check_sample_weights_list": "LinearRegression does not handle list sample weights",
        "check_complex_data": "LinearRegression does not handle complex data",
        "check_dtype_object": "LinearRegression does not handle object dtype",
        "check_estimators_empty_data_messages": "LinearRegression does not handle empty data",
        "check_estimators_nan_inf": "LinearRegression does not check for NaN and inf",
        "check_estimator_sparse_tag": "LinearRegression does not support sparse data",
        "check_estimator_sparse_array": "LinearRegression does not handle sparse arrays gracefully",
        "check_estimator_sparse_matrix": "LinearRegression does not handle sparse matrices gracefully",
        "check_regressors_train": "LinearRegression does not handle list inputs",
        "check_regressors_train(readonly_memmap=True)": "LinearRegression does not handle readonly memmap",
        "check_regressors_train(readonly_memmap=True,X_dtype=float32)": "LinearRegression does not handle readonly memmap with float32",
        "check_regressor_data_not_an_array": "LinearRegression does not handle non-array data",
        "check_supervised_y_no_nan": "LinearRegression does not check for NaN in y",
        "check_parameters_default_constructible": "LinearRegression parameters are mutated on init",
        "check_fit2d_1sample": "LinearRegression does not handle single sample",
        "check_fit_check_is_fitted": "LinearRegression passes check_is_fitted before being fit",
        "check_fit1d": "LinearRegression does not raise ValueError for 1D input",
        "check_fit2d_predict1d": "LinearRegression does not handle 1D prediction input gracefully",
        "check_requires_y_none": "LinearRegression does not handle y=None",
    },
    Ridge: {
        "check_estimator_tags_renamed": "No support for modern tags infrastructure",
        "check_no_attributes_set_in_init": "Ridge sets attributes during init",
        "check_dont_overwrite_parameters": "Ridge overwrites parameters during fit",
        "check_estimators_unfitted": "Ridge does not raise NotFittedError before fit",
        "check_do_not_raise_errors_in_init_or_set_params": "Ridge raises errors in init or set_params",
        "check_n_features_in_after_fitting": "Ridge does not check n_features_in consistency",
        "check_sample_weights_not_an_array": "Ridge does not handle non-array sample weights",
        "check_sample_weights_list": "Ridge does not handle list sample weights",
        "check_complex_data": "Ridge does not handle complex data",
        "check_dtype_object": "Ridge does not handle object dtype",
        "check_estimators_empty_data_messages": "Ridge does not handle empty data",
        "check_estimators_nan_inf": "Ridge does not check for NaN and inf",
        "check_estimator_sparse_tag": "Ridge does not support sparse data",
        "check_estimator_sparse_array": "Ridge does not handle sparse arrays gracefully",
        "check_estimator_sparse_matrix": "Ridge does not handle sparse matrices gracefully",
        "check_regressors_train": "Ridge does not handle list inputs",
        "check_regressors_train(readonly_memmap=True)": "Ridge does not handle readonly memmap",
        "check_regressors_train(readonly_memmap=True,X_dtype=float32)": "Ridge does not handle readonly memmap with float32",
        "check_regressor_data_not_an_array": "Ridge does not handle non-array data",
        "check_supervised_y_2d": "Ridge does not handle 2D y",
        "check_supervised_y_no_nan": "Ridge does not check for NaN in y",
        "check_parameters_default_constructible": "Ridge parameters are mutated on init",
        "check_fit2d_1sample": "Ridge does not handle single sample",
        "check_fit_check_is_fitted": "Ridge passes check_is_fitted before being fit",
        "check_fit1d": "Ridge does not raise ValueError for 1D input",
        "check_fit2d_predict1d": "Ridge does not handle 1D prediction input gracefully",
        "check_requires_y_none": "Ridge does not handle y=None",
    },
    RandomForestRegressor: {
        "check_estimator_tags_renamed": "No support for modern tags infrastructure",
        "check_no_attributes_set_in_init": "RandomForestRegressor sets attributes during init",
        "check_estimators_overwrite_params": "RandomForestRegressor overwrites parameters during fit",
        "check_dont_overwrite_parameters": "RandomForestRegressor overwrites parameters during fit",
        "check_estimators_unfitted": "RandomForestRegressor does not raise NotFittedError before fit",
        "check_do_not_raise_errors_in_init_or_set_params": "RandomForestRegressor raises errors in init or set_params",
        "check_n_features_in_after_fitting": "RandomForestRegressor does not check n_features_in consistency",
        "check_complex_data": "RandomForestRegressor does not handle complex data",
        "check_dtype_object": "RandomForestRegressor does not handle object dtype",
        "check_estimators_empty_data_messages": "RandomForestRegressor does not handle empty data",
        "check_estimators_nan_inf": "RandomForestRegressor does not check for NaN and inf",
        "check_estimator_sparse_tag": "RandomForestRegressor does not support sparse data",
        "check_estimator_sparse_array": "RandomForestRegressor does not handle sparse arrays gracefully",
        "check_estimator_sparse_matrix": "RandomForestRegressor does not handle sparse matrices gracefully",
        "check_regressors_train": "RandomForestRegressor does not handle list inputs",
        "check_regressors_train(readonly_memmap=True)": "RandomForestRegressor does not handle readonly memmap",
        "check_regressors_train(readonly_memmap=True,X_dtype=float32)": "RandomForestRegressor does not handle readonly memmap with float32",
        "check_regressor_data_not_an_array": "RandomForestRegressor does not handle non-array data",
        "check_supervised_y_2d": "RandomForestRegressor does not handle 2D y",
        "check_supervised_y_no_nan": "RandomForestRegressor does not check for NaN in y",
        "check_parameters_default_constructible": "RandomForestRegressor parameters are mutated on init",
        "check_dict_unchanged": "RandomForestRegressor modifies input dictionaries",
        "check_fit1d": "RandomForestRegressor does not raise ValueError for 1D input",
        "check_fit2d_predict1d": "RandomForestRegressor does not handle 1D prediction input gracefully",
        "check_requires_y_none": "RandomForestRegressor does not handle y=None",
    },
    KNeighborsClassifier: {
        "check_estimator_tags_renamed": "No support for modern tags infrastructure",
        "check_no_attributes_set_in_init": "KNeighborsClassifier sets attributes during init",
        "check_dont_overwrite_parameters": "KNeighborsClassifier overwrites parameters during fit",
        "check_estimators_unfitted": "KNeighborsClassifier does not raise NotFittedError before fit",
        "check_do_not_raise_errors_in_init_or_set_params": "KNeighborsClassifier raises errors in init or set_params",
        "check_n_features_in_after_fitting": "KNeighborsClassifier does not check n_features_in consistency",
        "check_complex_data": "KNeighborsClassifier does not handle complex data",
        "check_dtype_object": "KNeighborsClassifier does not handle object dtype",
        "check_estimators_empty_data_messages": "KNeighborsClassifier does not handle empty data",
        "check_estimators_nan_inf": "KNeighborsClassifier does not check for NaN and inf",
        "check_estimator_sparse_tag": "KNeighborsClassifier does not support sparse data",
        "check_classifier_data_not_an_array": "KNeighborsClassifier does not handle non-array data",
        "check_classifiers_classes": "KNeighborsClassifier does not handle string data properly",
        "check_classifiers_train": "KNeighborsClassifier does not validate input data properly",
        "check_classifiers_regression_target": "KNeighborsClassifier does not handle regression targets",
        "check_supervised_y_no_nan": "KNeighborsClassifier does not check for NaN in y",
        "check_supervised_y_2d": "KNeighborsClassifier does not handle 2D y",
        "check_parameters_default_constructible": "KNeighborsClassifier parameters are mutated on init",
        "check_fit_check_is_fitted": "KNeighborsClassifier passes check_is_fitted before being fit",
        "check_fit2d_predict1d": "KNeighborsClassifier does not handle 1D prediction input gracefully",
        "check_requires_y_none": "KNeighborsClassifier does not handle y=None",
    },
    RandomForestClassifier: {
        "check_estimator_tags_renamed": "No support for modern tags infrastructure",
        "check_no_attributes_set_in_init": "RandomForestClassifier sets attributes during init",
        "check_estimators_overwrite_params": "RandomForestClassifier overwrites parameters during fit",
        "check_dont_overwrite_parameters": "RandomForestClassifier overwrites parameters during fit",
        "check_estimators_unfitted": "RandomForestClassifier does not raise NotFittedError before fit",
        "check_do_not_raise_errors_in_init_or_set_params": "RandomForestClassifier raises errors in init or set_params",
        "check_n_features_in_after_fitting": "RandomForestClassifier does not check n_features_in consistency",
        "check_complex_data": "RandomForestClassifier does not handle complex data",
        "check_dtype_object": "RandomForestClassifier does not handle object dtype",
        "check_estimators_empty_data_messages": "RandomForestClassifier does not handle empty data",
        "check_estimators_nan_inf": "RandomForestClassifier does not check for NaN and inf",
        "check_estimator_sparse_tag": "RandomForestClassifier does not support sparse data",
        "check_estimator_sparse_array": "RandomForestClassifier does not handle sparse arrays gracefully",
        "check_estimator_sparse_matrix": "RandomForestClassifier does not handle sparse matrices gracefully",
        "check_classifier_data_not_an_array": "RandomForestClassifier does not handle non-array data",
        "check_classifiers_classes": "RandomForestClassifier does not handle string data properly",
        "check_classifiers_train": "RandomForestClassifier does not handle list inputs",
        "check_classifiers_train(readonly_memmap=True)": "RandomForestClassifier does not handle readonly memmap",
        "check_classifiers_train(readonly_memmap=True,X_dtype=float32)": "RandomForestClassifier does not handle readonly memmap with float32",
        "check_supervised_y_no_nan": "RandomForestClassifier does not check for NaN in y",
        "check_supervised_y_2d": "RandomForestClassifier does not handle 2D y",
        "check_parameters_default_constructible": "RandomForestClassifier parameters are mutated on init",
        "check_dict_unchanged": "RandomForestClassifier modifies input dictionaries",
        "check_fit1d": "RandomForestClassifier does not raise ValueError for 1D input",
        "check_fit2d_predict1d": "RandomForestClassifier does not handle 1D prediction input gracefully",
        "check_requires_y_none": "RandomForestClassifier does not handle y=None",
    },
    KNeighborsRegressor: {
        "check_estimator_tags_renamed": "No support for modern tags infrastructure",
        "check_no_attributes_set_in_init": "KNeighborsRegressor sets attributes during init",
        "check_dont_overwrite_parameters": "KNeighborsRegressor overwrites parameters during fit",
        "check_estimators_unfitted": "KNeighborsRegressor does not raise NotFittedError before fit",
        "check_do_not_raise_errors_in_init_or_set_params": "KNeighborsRegressor raises errors in init or set_params",
        "check_n_features_in_after_fitting": "KNeighborsRegressor does not check n_features_in consistency",
        "check_complex_data": "KNeighborsRegressor does not handle complex data",
        "check_dtype_object": "KNeighborsRegressor does not handle object dtype",
        "check_estimators_empty_data_messages": "KNeighborsRegressor does not handle empty data",
        "check_estimators_nan_inf": "KNeighborsRegressor does not check for NaN and inf",
        "check_estimator_sparse_tag": "KNeighborsRegressor does not support sparse data",
        "check_regressors_train": "KNeighborsRegressor does not handle list inputs",
        "check_regressors_train(readonly_memmap=True)": "KNeighborsRegressor does not handle readonly memmap",
        "check_regressors_train(readonly_memmap=True,X_dtype=float32)": "KNeighborsRegressor does not handle readonly memmap with float32",
        "check_regressor_data_not_an_array": "KNeighborsRegressor does not handle non-array data",
        "check_supervised_y_2d": "KNeighborsRegressor does not handle 2D y",
        "check_supervised_y_no_nan": "KNeighborsRegressor does not check for NaN in y",
        "check_regressors_int": "KNeighborsRegressor does not handle integer targets properly",
        "check_parameters_default_constructible": "KNeighborsRegressor parameters are mutated on init",
        "check_fit_check_is_fitted": "KNeighborsRegressor passes check_is_fitted before being fit",
        "check_fit2d_predict1d": "KNeighborsRegressor does not handle 1D prediction input gracefully",
        "check_requires_y_none": "KNeighborsRegressor does not handle y=None",
    },
    NearestNeighbors: {
        "check_estimator_tags_renamed": "No support for modern tags infrastructure",
        "check_no_attributes_set_in_init": "NearestNeighbors sets attributes during init",
        "check_dont_overwrite_parameters": "NearestNeighbors overwrites parameters during fit",
        "check_do_not_raise_errors_in_init_or_set_params": "NearestNeighbors raises errors in init or set_params",
        "check_complex_data": "NearestNeighbors does not handle complex data",
        "check_dtype_object": "NearestNeighbors does not handle object dtype",
        "check_estimators_empty_data_messages": "NearestNeighbors does not handle empty data",
        "check_estimators_nan_inf": "NearestNeighbors does not check for NaN and inf",
        "check_estimator_sparse_tag": "NearestNeighbors does not support sparse data",
        "check_parameters_default_constructible": "NearestNeighbors parameters are mutated on init",
        "check_fit_check_is_fitted": "NearestNeighbors passes check_is_fitted before being fit",
    },
    LinearSVC: {
        "check_estimator_tags_renamed": "No support for modern tags infrastructure",
        "check_no_attributes_set_in_init": "LinearSVC sets attributes during init",
        "check_dont_overwrite_parameters": "LinearSVC overwrites parameters during fit",
        "check_estimators_unfitted": "LinearSVC does not raise NotFittedError before fit",
        "check_do_not_raise_errors_in_init_or_set_params": "LinearSVC raises errors in init or set_params",
        "check_n_features_in_after_fitting": "LinearSVC does not check n_features_in consistency",
        "check_estimators_dtypes": "LinearSVC does not handle dtypes properly",
        "check_sample_weights_not_an_array": "LinearSVC does not handle non-array sample weights",
        "check_sample_weights_list": "LinearSVC does not handle list sample weights",
        "check_sample_weight_equivalence_on_dense_data": "LinearSVC sample weight equivalence not implemented",
        "check_complex_data": "LinearSVC does not handle complex data",
        "check_dtype_object": "LinearSVC does not handle object dtype",
        "check_estimators_empty_data_messages": "LinearSVC does not handle empty data",
        "check_estimators_nan_inf": "LinearSVC does not check for NaN and inf",
        "check_estimator_sparse_tag": "LinearSVC does not support sparse data",
        "check_estimator_sparse_array": "LinearSVC does not handle sparse arrays gracefully",
        "check_estimator_sparse_matrix": "LinearSVC does not handle sparse matrices gracefully",
        "check_estimators_pickle": "LinearSVC does not support pickling",
        "check_estimators_pickle(readonly_memmap=True)": "LinearSVC does not support pickling with readonly memmap",
        "check_classifier_data_not_an_array": "LinearSVC does not handle non-array data",
        "check_classifiers_one_label": "LinearSVC cannot train with one class",
        "check_classifiers_classes": "LinearSVC does not handle string data properly",
        "check_classifiers_train": "LinearSVC does not handle list inputs",
        "check_classifiers_train(readonly_memmap=True)": "LinearSVC does not handle readonly memmap",
        "check_classifiers_train(readonly_memmap=True,X_dtype=float32)": "LinearSVC does not handle readonly memmap with float32",
        "check_classifiers_regression_target": "LinearSVC does not handle regression targets",
        "check_supervised_y_no_nan": "LinearSVC does not check for NaN in y",
        "check_supervised_y_2d": "LinearSVC does not handle 2D y",
        "check_non_transformer_estimators_n_iter": "LinearSVC does not have n_iter_ attribute",
        "check_decision_proba_consistency": "LinearSVC does not support predict_proba",
        "check_parameters_default_constructible": "LinearSVC parameters are mutated on init",
        "check_methods_sample_order_invariance": "LinearSVC results depend on sample order",
        "check_methods_subset_invariance": "LinearSVC results depend on data subset",
        "check_fit2d_1sample": "LinearSVC does not handle single sample",
        "check_dict_unchanged": "LinearSVC modifies input dictionaries",
        "check_fit_idempotent": "LinearSVC fit is not idempotent",
        "check_fit_check_is_fitted": "LinearSVC passes check_is_fitted before being fit",
        "check_fit1d": "LinearSVC does not raise ValueError for 1D input",
        "check_fit2d_predict1d": "LinearSVC does not handle 1D prediction input gracefully",
        "check_requires_y_none": "LinearSVC does not handle y=None",
    },
    LinearSVR: {
        "check_estimator_tags_renamed": "No support for modern tags infrastructure",
        "check_no_attributes_set_in_init": "LinearSVR sets attributes during init",
        # "check_dont_overwrite_parameters": "LinearSVR overwrites parameters during fit",
        "check_estimators_unfitted": "LinearSVR does not raise NotFittedError before fit",
        "check_do_not_raise_errors_in_init_or_set_params": "LinearSVR raises errors in init or set_params",
        "check_n_features_in_after_fitting": "LinearSVR does not check n_features_in consistency",
        "check_estimators_dtypes": "LinearSVR does not handle dtypes properly",
        "check_sample_weights_not_an_array": "LinearSVR does not handle non-array sample weights",
        "check_sample_weights_list": "LinearSVR does not handle list sample weights",
        "check_sample_weight_equivalence_on_dense_data": "LinearSVR sample weight equivalence not implemented",
        "check_complex_data": "LinearSVR does not handle complex data",
        "check_dtype_object": "LinearSVR does not handle object dtype",
        "check_estimators_empty_data_messages": "LinearSVR does not handle empty data",
        "check_estimators_nan_inf": "LinearSVR does not check for NaN and inf",
        "check_estimator_sparse_tag": "LinearSVR does not support sparse data",
        "check_estimator_sparse_array": "LinearSVR does not handle sparse arrays gracefully",
        "check_estimator_sparse_matrix": "LinearSVR does not handle sparse matrices gracefully",
        "check_estimators_pickle": "LinearSVR does not support pickling",
        "check_estimators_pickle(readonly_memmap=True)": "LinearSVR does not support pickling with readonly memmap",
        "check_regressors_train": "LinearSVR does not handle list inputs",
        "check_regressors_train(readonly_memmap=True)": "LinearSVR does not handle readonly memmap",
        "check_regressors_train(readonly_memmap=True,X_dtype=float32)": "LinearSVR does not handle readonly memmap with float32",
        "check_regressor_data_not_an_array": "LinearSVR does not handle non-array data",
        "check_regressors_no_decision_function": "LinearSVR has decision_function method",
        "check_supervised_y_2d": "LinearSVR does not handle 2D y",
        "check_supervised_y_no_nan": "LinearSVR does not check for NaN in y",
        "check_non_transformer_estimators_n_iter": "LinearSVR does not have n_iter_ attribute",
        "check_parameters_default_constructible": "LinearSVR parameters are mutated on init",
        "check_methods_sample_order_invariance": "LinearSVR results depend on sample order",
        "check_methods_subset_invariance": "LinearSVR results depend on data subset",
        "check_dict_unchanged": "LinearSVR modifies input dictionaries",
        "check_fit_idempotent": "LinearSVR fit is not idempotent",
        "check_fit_check_is_fitted": "LinearSVR passes check_is_fitted before being fit",
        "check_fit1d": "LinearSVR does not raise ValueError for 1D input",
        "check_fit2d_predict1d": "LinearSVR does not handle 1D prediction input gracefully",
        "check_requires_y_none": "LinearSVR does not handle y=None",
    },
    SVC: {
        "check_estimator_tags_renamed": "No support for modern tags infrastructure",
        "check_no_attributes_set_in_init": "SVC sets attributes during init",
        "check_dont_overwrite_parameters": "SVC overwrites parameters during fit",
        "check_estimators_unfitted": "SVC does not raise NotFittedError before fit",
        "check_do_not_raise_errors_in_init_or_set_params": "SVC raises errors in init or set_params",
        "check_n_features_in_after_fitting": "SVC does not check n_features_in consistency",
        "check_estimators_dtypes": "SVC does not handle dtypes properly",
        "check_sample_weights_not_an_array": "SVC does not handle non-array sample weights",
        "check_sample_weight_equivalence_on_dense_data": "SVC sample weight equivalence not implemented",
        "check_sample_weight_equivalence_on_sparse_data": "SVC does not handle sparse data",
        "check_complex_data": "SVC does not handle complex data",
        "check_dtype_object": "SVC does not handle object dtype",
        "check_estimators_empty_data_messages": "SVC does not handle empty data",
        "check_estimators_nan_inf": "SVC does not check for NaN and inf",
        "check_estimator_sparse_tag": "SVC does not support sparse data",
        "check_estimator_sparse_array": "SVC does not handle sparse arrays gracefully",
        "check_estimator_sparse_matrix": "SVC does not handle sparse matrices gracefully",
        "check_estimators_pickle": "SVC does not support pickling",
        "check_estimators_pickle(readonly_memmap=True)": "SVC does not support pickling with readonly memmap",
        "check_classifier_data_not_an_array": "SVC does not handle non-array data",
        "check_classifiers_one_label": "SVC cannot train with one class",
        "check_classifiers_classes": "SVC does not handle string data properly",
        "check_classifiers_train": "SVC does not handle list inputs",
        "check_classifiers_train(readonly_memmap=True)": "SVC does not handle readonly memmap",
        "check_classifiers_train(readonly_memmap=True,X_dtype=float32)": "SVC does not handle readonly memmap with float32",
        "check_supervised_y_no_nan": "SVC does not check for NaN in y",
        "check_class_weight_classifiers": "SVC does not handle class weights properly",
        "check_non_transformer_estimators_n_iter": "SVC does not have n_iter_ attribute",
        "check_decision_proba_consistency": "SVC does not support predict_proba by default",
        "check_parameters_default_constructible": "SVC parameters are mutated on init",
        "check_methods_sample_order_invariance": "SVC results depend on sample order",
        "check_methods_subset_invariance": "SVC results depend on data subset",
        "check_fit2d_1sample": "SVC does not handle single sample",
        "check_dict_unchanged": "SVC modifies input dictionaries",
        "check_fit_idempotent": "SVC fit is not idempotent",
        "check_fit_check_is_fitted": "SVC passes check_is_fitted before being fit",
        "check_fit2d_predict1d": "SVC does not handle 1D prediction input gracefully",
        "check_requires_y_none": "SVC does not handle y=None",
    },
    SVR: {
        "check_estimator_tags_renamed": "No support for modern tags infrastructure",
        "check_no_attributes_set_in_init": "SVR sets attributes during init",
        "check_dont_overwrite_parameters": "SVR overwrites parameters during fit",
        "check_estimators_unfitted": "SVR does not raise NotFittedError before fit",
        "check_do_not_raise_errors_in_init_or_set_params": "SVR raises errors in init or set_params",
        "check_n_features_in_after_fitting": "SVR does not check n_features_in consistency",
        "check_sample_weights_not_an_array": "SVR does not handle non-array sample weights",
        "check_sample_weights_list": "SVR does not handle list sample weights",
        "check_sample_weight_equivalence_on_dense_data": "SVR sample weight equivalence not implemented",
        "check_sample_weight_equivalence_on_sparse_data": "SVR does not handle sparse data",
        "check_complex_data": "SVR does not handle complex data",
        "check_dtype_object": "SVR does not handle object dtype",
        "check_estimators_empty_data_messages": "SVR does not handle empty data",
        "check_estimators_nan_inf": "SVR does not check for NaN and inf",
        "check_estimator_sparse_tag": "SVR does not support sparse data",
        "check_estimator_sparse_array": "SVR does not handle sparse arrays gracefully",
        # "check_estimator_sparse_matrix": "SVR does not handle sparse matrices gracefully",
        "check_regressors_train": "SVR does not handle list inputs",
        "check_regressors_train(readonly_memmap=True)": "SVR does not handle readonly memmap",
        "check_regressors_train(readonly_memmap=True,X_dtype=float32)": "SVR does not handle readonly memmap with float32",
        "check_regressor_data_not_an_array": "SVR does not handle non-array data",
        "check_supervised_y_2d": "SVR does not handle 2D y",
        "check_supervised_y_no_nan": "SVR does not check for NaN in y",
        "check_non_transformer_estimators_n_iter": "SVR does not have n_iter_ attribute",
        "check_parameters_default_constructible": "SVR parameters are mutated on init",
        "check_fit_check_is_fitted": "SVR passes check_is_fitted before being fit",
        "check_fit1d": "SVR does not raise ValueError for 1D input",
        "check_fit2d_predict1d": "SVR does not handle 1D prediction input gracefully",
        "check_requires_y_none": "SVR does not handle y=None",
    },
    PCA: {
        "check_estimator_tags_renamed": "No support for modern tags infrastructure",
        "check_no_attributes_set_in_init": "PCA sets attributes during init",
        "check_dont_overwrite_parameters": "PCA overwrites parameters during fit",
        "check_do_not_raise_errors_in_init_or_set_params": "PCA raises errors in init or set_params",
        "check_n_features_in_after_fitting": "PCA does not check n_features_in consistency",
        "check_complex_data": "PCA does not handle complex data",
        "check_dtype_object": "PCA does not handle object dtype",
        "check_estimators_empty_data_messages": "PCA does not handle empty data",
        "check_estimators_nan_inf": "PCA does not check for NaN and inf",
        "check_transformer_data_not_an_array": "PCA does not handle non-array data",
        "check_parameters_default_constructible": "PCA parameters are mutated on init",
        "check_fit2d_1sample": "PCA does not handle single sample",
        "check_fit2d_1feature": "PCA does not handle single feature",
        "check_fit_check_is_fitted": "PCA passes check_is_fitted before being fit",
        "check_fit1d": "PCA does not raise ValueError for 1D input",
        "check_fit2d_predict1d": "PCA does not handle 1D prediction input gracefully",
    },
    IncrementalPCA: {
        "check_estimator_tags_renamed": "No support for modern tags infrastructure",
        "check_no_attributes_set_in_init": "IncrementalPCA sets attributes during init",
        "check_dont_overwrite_parameters": "IncrementalPCA overwrites parameters during fit",
        "check_do_not_raise_errors_in_init_or_set_params": "IncrementalPCA raises errors in init or set_params",
        "check_n_features_in_after_fitting": "IncrementalPCA does not check n_features_in consistency",
        "check_complex_data": "IncrementalPCA does not handle complex data",
        "check_dtype_object": "IncrementalPCA does not handle object dtype",
        "check_estimators_empty_data_messages": "IncrementalPCA does not handle empty data",
        "check_estimators_nan_inf": "IncrementalPCA does not check for NaN and inf",
        "check_transformer_data_not_an_array": "IncrementalPCA does not handle non-array data",
        "check_parameters_default_constructible": "IncrementalPCA parameters are mutated on init",
        "check_fit_check_is_fitted": "IncrementalPCA passes check_is_fitted before being fit",
        "check_fit2d_predict1d": "IncrementalPCA does not handle 1D prediction input gracefully",
    },
    TruncatedSVD: {
        "check_estimator_tags_renamed": "No support for modern tags infrastructure",
        "check_no_attributes_set_in_init": "TruncatedSVD sets attributes during init",
        "check_dont_overwrite_parameters": "TruncatedSVD overwrites parameters during fit",
        "check_do_not_raise_errors_in_init_or_set_params": "TruncatedSVD raises errors in init or set_params",
        "check_n_features_in_after_fitting": "TruncatedSVD does not check n_features_in consistency",
        "check_complex_data": "TruncatedSVD does not handle complex data",
        "check_dtype_object": "TruncatedSVD does not handle object dtype",
        "check_estimators_empty_data_messages": "TruncatedSVD does not handle empty data",
        "check_estimators_nan_inf": "TruncatedSVD does not check for NaN and inf",
        "check_estimator_sparse_tag": "TruncatedSVD does not support sparse data",
        "check_estimator_sparse_array": "TruncatedSVD does not handle sparse arrays gracefully",
        "check_estimator_sparse_matrix": "TruncatedSVD does not handle sparse matrices gracefully",
        "check_transformer_data_not_an_array": "TruncatedSVD does not handle non-array data",
        "check_parameters_default_constructible": "TruncatedSVD parameters are mutated on init",
        "check_fit2d_1sample": "TruncatedSVD does not handle single sample",
        "check_fit2d_1feature": "TruncatedSVD does not handle single feature",
        "check_fit_check_is_fitted": "TruncatedSVD passes check_is_fitted before being fit",
        "check_fit1d": "TruncatedSVD does not raise ValueError for 1D input",
        "check_fit2d_predict1d": "TruncatedSVD does not handle 1D prediction input gracefully",
    },
    TSNE: {
        "check_estimator_tags_renamed": "No support for modern tags infrastructure",
        "check_no_attributes_set_in_init": "TSNE sets attributes during init",
        "check_estimators_overwrite_params": "TSNE overwrites parameters during fit",
        "check_dont_overwrite_parameters": "TSNE overwrites parameters during fit",
        "check_do_not_raise_errors_in_init_or_set_params": "TSNE raises errors in init or set_params",
        "check_complex_data": "TSNE does not handle complex data",
        "check_dtype_object": "TSNE does not handle object dtype",
        "check_estimators_empty_data_messages": "TSNE does not handle empty data",
        "check_pipeline_consistency": "TSNE results are not deterministic",
        "check_estimators_nan_inf": "TSNE does not check for NaN and inf",
        "check_estimator_sparse_tag": "TSNE does not support sparse data",
        "check_parameters_default_constructible": "TSNE parameters are mutated on init",
        "check_methods_sample_order_invariance": "TSNE results depend on sample order",
        "check_methods_subset_invariance": "TSNE results depend on data subset",
        "check_fit2d_1sample": "TSNE does not handle single sample",
        "check_fit2d_1feature": "TSNE does not handle single feature",
        "check_fit_check_is_fitted": "TSNE passes check_is_fitted before being fit",
        "check_fit2d_predict1d": "TSNE does not handle 1D prediction input gracefully",
    },
    UMAP: {
        "check_estimator_tags_renamed": "No support for modern tags infrastructure",
        "check_no_attributes_set_in_init": "UMAP sets attributes during init",
        "check_estimators_overwrite_params": "UMAP overwrites parameters during fit",
        "check_dont_overwrite_parameters": "UMAP overwrites parameters during fit",
        "check_do_not_raise_errors_in_init_or_set_params": "UMAP raises errors in init or set_params",
        "check_complex_data": "UMAP does not handle complex data",
        "check_dtype_object": "UMAP does not handle object dtype",
        "check_estimator_sparse_tag": "UMAP does not support sparse data",
        "check_transformer_data_not_an_array": "UMAP does not handle non-array data",
        "check_parameters_default_constructible": "UMAP parameters are mutated on init",
        "check_methods_sample_order_invariance": "UMAP results depend on sample order",
        "check_transformer_general": "UMAP does not have consistent fit_transform and transform outputs",
        "check_methods_subset_invariance": "UMAP results depend on data subset",
    },
    Lasso: {
        "check_estimator_tags_renamed": "No support for modern tags infrastructure",
        "check_no_attributes_set_in_init": "Lasso sets attributes during init",
        "check_dont_overwrite_parameters": "Lasso overwrites parameters during fit",
        "check_estimators_unfitted": "Lasso does not raise NotFittedError before fit",
        "check_do_not_raise_errors_in_init_or_set_params": "Lasso raises errors in init or set_params",
        "check_n_features_in_after_fitting": "Lasso does not check n_features_in consistency",
        "check_sample_weights_not_an_array": "Lasso does not handle non-array sample weights",
        "check_sample_weights_list": "Lasso does not handle list sample weights",
        "check_complex_data": "Lasso does not handle complex data",
        "check_dtype_object": "Lasso does not handle object dtype",
        "check_estimators_empty_data_messages": "Lasso does not handle empty data",
        "check_estimators_nan_inf": "Lasso does not check for NaN and inf",
        "check_estimator_sparse_tag": "Lasso does not support sparse data",
        "check_estimator_sparse_array": "Lasso does not handle sparse arrays gracefully",
        "check_estimator_sparse_matrix": "Lasso does not handle sparse matrices gracefully",
        "check_regressors_train": "Lasso does not handle list inputs",
        "check_regressors_train(readonly_memmap=True)": "Lasso does not handle readonly memmap",
        "check_regressors_train(readonly_memmap=True,X_dtype=float32)": "Lasso does not handle readonly memmap with float32",
        "check_regressor_data_not_an_array": "Lasso does not handle non-array data",
        "check_supervised_y_2d": "Lasso does not handle 2D y",
        "check_supervised_y_no_nan": "Lasso does not check for NaN in y",
        "check_non_transformer_estimators_n_iter": "Lasso does not have n_iter_ attribute",
        "check_parameters_default_constructible": "Lasso parameters are mutated on init",
        "check_fit2d_1sample": "Lasso does not handle single sample",
        "check_set_params": "Lasso does not handle set_params properly",
        "check_fit1d": "Lasso does not raise ValueError for 1D input",
        "check_fit2d_predict1d": "Lasso does not handle 1D prediction input gracefully",
        "check_requires_y_none": "Lasso does not handle y=None",
    },
    ElasticNet: {
        "check_estimator_tags_renamed": "No support for modern tags infrastructure",
        "check_no_attributes_set_in_init": "ElasticNet sets attributes during init",
        "check_dont_overwrite_parameters": "ElasticNet overwrites parameters during fit",
        "check_estimators_unfitted": "ElasticNet does not raise NotFittedError before fit",
        "check_do_not_raise_errors_in_init_or_set_params": "ElasticNet raises errors in init or set_params",
        "check_n_features_in_after_fitting": "ElasticNet does not check n_features_in consistency",
        "check_sample_weights_not_an_array": "ElasticNet does not handle non-array sample weights",
        "check_sample_weights_list": "ElasticNet does not handle list sample weights",
        "check_complex_data": "ElasticNet does not handle complex data",
        "check_dtype_object": "ElasticNet does not handle object dtype",
        "check_estimators_empty_data_messages": "ElasticNet does not handle empty data",
        "check_estimators_nan_inf": "ElasticNet does not check for NaN and inf",
        "check_estimator_sparse_tag": "ElasticNet does not support sparse data",
        "check_estimator_sparse_array": "ElasticNet does not handle sparse arrays gracefully",
        "check_estimator_sparse_matrix": "ElasticNet does not handle sparse matrices gracefully",
        "check_regressors_train": "ElasticNet does not handle list inputs",
        "check_regressors_train(readonly_memmap=True)": "ElasticNet does not handle readonly memmap",
        "check_regressors_train(readonly_memmap=True,X_dtype=float32)": "ElasticNet does not handle readonly memmap with float32",
        "check_regressor_data_not_an_array": "ElasticNet does not handle non-array data",
        "check_supervised_y_2d": "ElasticNet does not handle 2D y",
        "check_supervised_y_no_nan": "ElasticNet does not check for NaN in y",
        "check_non_transformer_estimators_n_iter": "ElasticNet does not have n_iter_ attribute",
        "check_parameters_default_constructible": "ElasticNet parameters are mutated on init",
        "check_fit2d_1sample": "ElasticNet does not handle single sample",
        "check_set_params": "ElasticNet does not handle set_params properly",
        "check_fit1d": "ElasticNet does not raise ValueError for 1D input",
        "check_fit2d_predict1d": "ElasticNet does not handle 1D prediction input gracefully",
        "check_requires_y_none": "ElasticNet does not handle y=None",
    },
    KernelDensity: {
        "check_estimator_tags_renamed": "No support for modern tags infrastructure",
        "check_no_attributes_set_in_init": "KernelDensity sets attributes during init",
        "check_do_not_raise_errors_in_init_or_set_params": "KernelDensity raises errors in init or set_params",
        "check_n_features_in_after_fitting": "KernelDensity does not check n_features_in consistency",
        "check_sample_weights_not_an_array": "KernelDensity does not handle non-array sample weights",
        "check_sample_weights_list": "KernelDensity does not handle list sample weights",
        "check_sample_weights_shape": "KernelDensity does not validate sample weights shape",
        "check_sample_weight_equivalence_on_dense_data": "KernelDensity sample weight equivalence not implemented",
        "check_complex_data": "KernelDensity does not handle complex data",
        "check_dtype_object": "KernelDensity does not handle object dtype",
        "check_estimators_empty_data_messages": "KernelDensity does not handle empty data",
        "check_pipeline_consistency": "KernelDensity does not handle pipeline consistency",
        "check_estimators_nan_inf": "KernelDensity does not check for NaN and inf",
        "check_estimator_sparse_tag": "KernelDensity does not support sparse data",
        "check_estimator_sparse_array": "KernelDensity does not handle sparse arrays gracefully",
        "check_estimator_sparse_matrix": "KernelDensity does not handle sparse matrices gracefully",
        "check_parameters_default_constructible": "KernelDensity parameters are mutated on init",
        "check_methods_sample_order_invariance": "KernelDensity results depend on sample order",
        "check_methods_subset_invariance": "KernelDensity results depend on data subset",
        "check_n_features_in": "KernelDensity does not set n_features_in properly",
        "check_fit1d": "KernelDensity does not raise ValueError for 1D input",
    },
    DBSCAN: {
        "check_estimator_tags_renamed": "No support for modern tags infrastructure",
        "check_no_attributes_set_in_init": "DBSCAN sets attributes during init",
        "check_dont_overwrite_parameters": "DBSCAN overwrites parameters during fit",
        "check_do_not_raise_errors_in_init_or_set_params": "DBSCAN raises errors in init or set_params",
        "check_sample_weights_not_an_array": "DBSCAN does not handle non-array sample weights",
        "check_sample_weights_list": "DBSCAN does not handle list sample weights",
        "check_complex_data": "DBSCAN does not handle complex data",
        "check_dtype_object": "DBSCAN does not handle object dtype",
        "check_estimators_empty_data_messages": "DBSCAN does not handle empty data",
        "check_estimators_nan_inf": "DBSCAN does not check for NaN and inf",
        "check_estimator_sparse_tag": "DBSCAN does not support sparse data",
        "check_estimator_sparse_array": "DBSCAN does not handle sparse arrays gracefully",
        "check_estimator_sparse_matrix": "DBSCAN does not handle sparse matrices gracefully",
        "check_parameters_default_constructible": "DBSCAN parameters are mutated on init",
        "check_fit1d": "DBSCAN does not raise ValueError for 1D input",
    },
    HDBSCAN: {
        "check_estimator_tags_renamed": "No support for modern tags infrastructure",
        "check_no_attributes_set_in_init": "HDBSCAN sets attributes during init",
        "check_do_not_raise_errors_in_init_or_set_params": "HDBSCAN raises errors in init or set_params",
        "check_complex_data": "HDBSCAN does not handle complex data",
        "check_dtype_object": "HDBSCAN does not handle object dtype",
        "check_estimators_empty_data_messages": "HDBSCAN does not handle empty data",
        "check_estimators_nan_inf": "HDBSCAN does not check for NaN and inf",
        "check_estimator_sparse_tag": "HDBSCAN does not support sparse data",
        "check_estimator_sparse_array": "HDBSCAN does not handle sparse arrays gracefully",
        "check_estimator_sparse_matrix": "HDBSCAN does not handle sparse matrices gracefully",
        "check_parameters_default_constructible": "HDBSCAN parameters are mutated on init",
        "check_estimators_pickle": "HDBSCAN does not support pickling",
        "check_estimators_pickle(readonly_memmap=True)": "HDBSCAN does not support pickling with readonly memmap",
        "check_f_contiguous_array_estimator": "HDBSCAN does not handle F-contiguous arrays",
        "check_methods_sample_order_invariance": "HDBSCAN results depend on sample order",
        "check_methods_subset_invariance": "HDBSCAN results depend on data subset",
        "check_fit2d_1sample": "HDBSCAN does not handle single sample properly",
        "check_fit2d_1feature": "HDBSCAN does not handle single feature properly",
        "check_dict_unchanged": "HDBSCAN modifies input dictionaries",
        "check_fit_idempotent": "HDBSCAN fit is not idempotent",
        "check_fit_check_is_fitted": "HDBSCAN does not check is_fitted properly",
        "check_n_features_in": "HDBSCAN does not set n_features_in properly",
        "check_fit1d": "HDBSCAN does not raise ValueError for 1D input",
        "check_fit2d_predict1d": "HDBSCAN does not handle 1D prediction input gracefully",
    },
    AgglomerativeClustering: {
        "check_estimator_tags_renamed": "No support for modern tags infrastructure",
        "check_no_attributes_set_in_init": "AgglomerativeClustering sets attributes during init",
        "check_dont_overwrite_parameters": "AgglomerativeClustering overwrites parameters during fit",
        "check_do_not_raise_errors_in_init_or_set_params": "AgglomerativeClustering raises errors in init or set_params",
        "check_complex_data": "AgglomerativeClustering does not handle complex data",
        "check_dtype_object": "AgglomerativeClustering does not handle object dtype",
        "check_estimators_empty_data_messages": "AgglomerativeClustering does not handle empty data",
        "check_estimators_nan_inf": "AgglomerativeClustering does not check for NaN and inf",
        "check_estimator_sparse_tag": "AgglomerativeClustering does not support sparse data",
        "check_estimator_sparse_array": "AgglomerativeClustering does not handle sparse arrays gracefully",
        "check_estimator_sparse_matrix": "AgglomerativeClustering does not handle sparse matrices gracefully",
        "check_parameters_default_constructible": "AgglomerativeClustering parameters are mutated on init",
        "check_fit_check_is_fitted": "AgglomerativeClustering passes check_is_fitted before being fit",
        "check_fit1d": "AgglomerativeClustering does not raise ValueError for 1D input",
    },
    GaussianNB: {
        "check_estimator_tags_renamed": "No support for modern tags infrastructure",
        "check_no_attributes_set_in_init": "GaussianNB sets attributes during init",
        "check_dont_overwrite_parameters": "GaussianNB overwrites parameters during fit",
        "check_estimators_unfitted": "GaussianNB does not raise NotFittedError before fit",
        "check_do_not_raise_errors_in_init_or_set_params": "GaussianNB raises errors in init or set_params",
        "check_n_features_in_after_fitting": "GaussianNB does not check n_features_in consistency",
        "check_estimators_dtypes": "GaussianNB does not handle dtypes properly",
        "check_sample_weights_pandas_series": "GaussianNB does not handle pandas Series sample weights",
        "check_sample_weights_not_an_array": "GaussianNB does not handle non-array sample weights",
        "check_sample_weights_shape": "GaussianNB does not validate sample weights shape",
        "check_sample_weight_equivalence_on_dense_data": "GaussianNB sample weight equivalence not implemented",
        "check_complex_data": "GaussianNB does not handle complex data",
        "check_dtype_object": "GaussianNB does not handle object dtype",
        "check_estimators_empty_data_messages": "GaussianNB does not handle empty data",
        "check_estimators_nan_inf": "GaussianNB does not check for NaN and inf",
        "check_estimator_sparse_tag": "GaussianNB does not support sparse data",
        "check_estimator_sparse_array": "GaussianNB does not handle sparse arrays gracefully",
        "check_classifier_data_not_an_array": "GaussianNB does not handle non-array data",
        "check_classifiers_classes": "GaussianNB does not handle string data properly",
        "check_estimators_partial_fit_n_features": "GaussianNB does not check n_features consistency in partial_fit",
        "check_classifiers_train": "GaussianNB does not handle list inputs",
        "check_classifiers_train(readonly_memmap=True)": "GaussianNB does not handle readonly memmap",
        "check_classifiers_train(readonly_memmap=True,X_dtype=float32)": "GaussianNB does not handle readonly memmap with float32",
        "check_classifiers_regression_target": "GaussianNB does not handle regression targets",
        "check_supervised_y_no_nan": "GaussianNB does not check for NaN in y",
        "check_supervised_y_2d": "GaussianNB does not handle 2D y",
        "check_parameters_default_constructible": "GaussianNB parameters are mutated on init",
        "check_fit_check_is_fitted": "GaussianNB passes check_is_fitted before being fit",
        "check_fit1d": "GaussianNB does not raise ValueError for 1D input",
        "check_fit2d_predict1d": "GaussianNB does not handle 1D prediction input gracefully",
        "check_requires_y_none": "GaussianNB does not handle y=None",
    },
    GaussianRandomProjection: {
        "check_estimator_tags_renamed": "No support for modern tags infrastructure",
        "check_no_attributes_set_in_init": "GaussianRandomProjection sets attributes during init",
        "check_fit_score_takes_y": "GaussianRandomProjection raises ValueError with small datasets",
        "check_estimators_overwrite_params": "GaussianRandomProjection raises ValueError with small datasets",
        "check_estimators_fit_returns_self": "GaussianRandomProjection raises ValueError with small datasets",
        "check_readonly_memmap_input": "GaussianRandomProjection raises ValueError with small datasets",
        "check_do_not_raise_errors_in_init_or_set_params": "GaussianRandomProjection raises ValueError on invalid output_type",
        "check_n_features_in_after_fitting": "GaussianRandomProjection raises ValueError with small datasets",
        "check_positive_only_tag_during_fit": "GaussianRandomProjection raises ValueError with small datasets",
        "check_estimators_dtypes": "GaussianRandomProjection raises ValueError with small datasets",
        "check_complex_data": "GaussianRandomProjection does not handle complex data",
        "check_dtype_object": "GaussianRandomProjection raises ValueError with small datasets",
        "check_estimators_empty_data_messages": "GaussianRandomProjection does not handle empty data",
        "check_pipeline_consistency": "GaussianRandomProjection raises ValueError with small datasets",
        "check_estimators_nan_inf": "GaussianRandomProjection does not check for NaN and inf",
        "check_estimator_sparse_tag": "GaussianRandomProjection does not support sparse data",
        "check_estimator_sparse_array": "GaussianRandomProjection does not handle sparse arrays gracefully",
        "check_estimator_sparse_matrix": "GaussianRandomProjection does not handle sparse matrices gracefully",
        "check_estimators_pickle": "GaussianRandomProjection raises ValueError with small datasets",
        "check_estimators_pickle(readonly_memmap=True)": "GaussianRandomProjection raises ValueError with small datasets",
        "check_f_contiguous_array_estimator": "GaussianRandomProjection raises ValueError with small datasets",
        "check_transformer_data_not_an_array": "GaussianRandomProjection does not handle non-array data",
        "check_transformer_general": "GaussianRandomProjection raises ValueError with small datasets",
        "check_transformer_general(readonly_memmap=True)": "GaussianRandomProjection raises ValueError with small datasets",
        "check_parameters_default_constructible": "GaussianRandomProjection parameters are mutated on init",
        "check_dict_unchanged": "GaussianRandomProjection raises ValueError with small datasets",
        "check_fit_idempotent": "GaussianRandomProjection raises ValueError with small datasets",
        "check_fit_check_is_fitted": "GaussianRandomProjection raises ValueError with small datasets",
        "check_n_features_in": "GaussianRandomProjection raises ValueError with small datasets",
        "check_fit2d_predict1d": "GaussianRandomProjection does not handle 1D prediction input gracefully",
    },
    SparseRandomProjection: {
        "check_estimator_tags_renamed": "No support for modern tags infrastructure",
        "check_no_attributes_set_in_init": "SparseRandomProjection sets attributes during init",
        "check_fit_score_takes_y": "SparseRandomProjection raises ValueError with small datasets",
        "check_estimators_overwrite_params": "SparseRandomProjection raises ValueError with small datasets",
        "check_estimators_fit_returns_self": "SparseRandomProjection raises ValueError with small datasets",
        "check_readonly_memmap_input": "SparseRandomProjection raises ValueError with small datasets",
        "check_do_not_raise_errors_in_init_or_set_params": "SparseRandomProjection raises ValueError on invalid output_type",
        "check_n_features_in_after_fitting": "SparseRandomProjection raises ValueError with small datasets",
        "check_positive_only_tag_during_fit": "SparseRandomProjection raises ValueError with small datasets",
        "check_estimators_dtypes": "SparseRandomProjection raises ValueError with small datasets",
        "check_complex_data": "SparseRandomProjection does not handle complex data",
        "check_dtype_object": "SparseRandomProjection raises ValueError with small datasets",
        "check_estimators_empty_data_messages": "SparseRandomProjection does not handle empty data",
        "check_pipeline_consistency": "SparseRandomProjection raises ValueError with small datasets",
        "check_estimators_nan_inf": "SparseRandomProjection does not check for NaN and inf",
        "check_estimator_sparse_tag": "SparseRandomProjection does not support sparse data",
        "check_estimator_sparse_array": "SparseRandomProjection does not handle sparse arrays gracefully",
        "check_estimator_sparse_matrix": "SparseRandomProjection does not handle sparse matrices gracefully",
        "check_estimators_pickle": "SparseRandomProjection raises ValueError with small datasets",
        "check_estimators_pickle(readonly_memmap=True)": "SparseRandomProjection raises ValueError with small datasets",
        "check_f_contiguous_array_estimator": "SparseRandomProjection raises ValueError with small datasets",
        "check_transformer_data_not_an_array": "SparseRandomProjection does not handle non-array data",
        "check_transformer_general": "SparseRandomProjection raises ValueError with small datasets",
        "check_transformer_general(readonly_memmap=True)": "SparseRandomProjection raises ValueError with small datasets",
        "check_parameters_default_constructible": "SparseRandomProjection parameters are mutated on init",
        "check_dict_unchanged": "SparseRandomProjection raises ValueError with small datasets",
        "check_fit_idempotent": "SparseRandomProjection raises ValueError with small datasets",
        "check_fit_check_is_fitted": "SparseRandomProjection raises ValueError with small datasets",
        "check_n_features_in": "SparseRandomProjection raises ValueError with small datasets",
        "check_fit2d_predict1d": "SparseRandomProjection does not handle 1D prediction input gracefully",
    },
}


def get_xfails(estimator):
    return PER_ESTIMATOR_XFAIL_CHECKS.get(type(estimator), {})


def _check_name(check):
    if hasattr(check, "__wrapped__"):
        return _check_name(check.__wrapped__)
    return (
        check.func.__name__ if isinstance(check, partial) else check.__name__
    )


@estimator_checks.parametrize_with_checks(
    [
        GaussianRandomProjection(),
        SparseRandomProjection(),
        DBSCAN(),
        # AgglomerativeClustering(),
        KernelRidge(),
        GaussianNB(),
        ComplementNB(),
        CategoricalNB(),
        BernoulliNB(),
        MultinomialNB(),
        UMAP(),
        TSNE(),
        TruncatedSVD(),
        IncrementalPCA(),
        PCA(),
        SVR(),
        SVC(),
        LinearSVR(),
        LinearSVC(),
        NearestNeighbors(),
        KNeighborsRegressor(),
        KNeighborsClassifier(),
        KernelDensity(),
        Ridge(),
        ElasticNet(),
        Lasso(),
        LinearRegression(),
        RandomForestClassifier(),
        RandomForestRegressor(),
        KMeans(),
        LogisticRegression(),
    ],
    expected_failed_checks=get_xfails,
)
@pytest.mark.filterwarnings(
    "ignore:ValueError occurred during set_params.*:UserWarning"
)
@pytest.mark.filterwarnings(
    "ignore:TypeError occurred during set_params.*:UserWarning"
)
@pytest.mark.filterwarnings(
    "ignore:perplexity.*should be less than n_samples.*:UserWarning"
)
@pytest.mark.filterwarnings(
    "ignore:Estimator's parameters changed after set_params raised ValueError:UserWarning"
)
@pytest.mark.filterwarnings("ignore:Changing solver to 'svd'.*:UserWarning")
@pytest.mark.filterwarnings("ignore:The number of bins.*:UserWarning")
@pytest.mark.filterwarnings("ignore::pytest.PytestUnraisableExceptionWarning")
def test_sklearn_compatible_estimator(estimator, check):
    # Check that all estimators pass the "common estimator" checks
    # provided by scikit-learn

    # These estimators lead to additional MemoryErrors in the other
    # estimators. As a result they are currently skipped.
    if isinstance(
        estimator,
        (ComplementNB, CategoricalNB, BernoulliNB, MultinomialNB),
    ):
        pytest.skip(
            "Estimator leads to additional MemoryErrors in other estimators (gh-7100)"
        )

    check_name = _check_name(check)

    if check_name == "check_estimators_pickle" and isinstance(
        estimator,
        (AgglomerativeClustering,),
    ):
        pytest.skip(
            "Pickling AgglomerativeClustering leads to additional MemoryErrors in other tests"
        )

    if check_name in ["check_estimators_nan_inf"] and isinstance(
        estimator, UMAP
    ):
        pytest.skip("UMAP does not handle Nans and infinities")

    if check_name == "check_classifiers_regression_target" and isinstance(
        estimator, RandomForestClassifier
    ):
        pytest.skip(
            "Regression targets for RandomForestClassifier crash the test suite"
        )

    check(estimator)
