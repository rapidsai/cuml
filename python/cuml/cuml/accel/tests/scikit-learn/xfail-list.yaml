- reason: Test should fail with cuml.accel
  marker: cuml_accel_bugs
  tests:
  - "sklearn.cross_decomposition.tests.test_pls::test_pls_regression_fit_1d_y"
  - "sklearn.datasets.tests.test_arff_parser::test_pandas_arff_parser_strip_no_quotes[_liac_arff_parser]"
  - "sklearn.decomposition.tests.test_pca::test_infer_dim_by_explained_variance[X0-0.95-2]"
  - "sklearn.decomposition.tests.test_pca::test_infer_dim_by_explained_variance[X1-0.01-1]"
  - "sklearn.decomposition.tests.test_pca::test_infer_dim_by_explained_variance[X2-0.5-2]"
  - "sklearn.decomposition.tests.test_pca::test_n_components_none[data0-arpack-3]"
  - "sklearn.decomposition.tests.test_pca::test_n_components_none[data1-arpack-3]"
  - "sklearn.decomposition.tests.test_pca::test_pca_dtype_preservation[42-arpack]"
  - "sklearn.decomposition.tests.test_pca::test_pca_dtype_preservation[42-auto]"
  - "sklearn.decomposition.tests.test_pca::test_pca_dtype_preservation[42-covariance_eigh]"
  - "sklearn.decomposition.tests.test_pca::test_pca_dtype_preservation[42-full]"
  - "sklearn.decomposition.tests.test_pca::test_pca_dtype_preservation[42-randomized]"
  - "sklearn.decomposition.tests.test_pca::test_pca_n_components_mostly_explained_variance_ratio"
  - "sklearn.decomposition.tests.test_pca::test_pca_score3"
  - "sklearn.decomposition.tests.test_pca::test_pca_solver_equivalence[42-float64-False-True-tall-arpack]"
  - "sklearn.decomposition.tests.test_pca::test_pca_solver_equivalence[42-float64-False-True-tall-covariance_eigh]"
  - "sklearn.decomposition.tests.test_pca::test_pca_solver_equivalence[42-float64-True-True-tall-arpack]"
  - "sklearn.decomposition.tests.test_pca::test_pca_solver_equivalence[42-float64-True-True-tall-covariance_eigh]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-1-arpack-csc_array-1-0.01]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-1-arpack-csc_array-1-0.1]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-1-arpack-csc_array-1-0.3]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-1-arpack-csc_array-10-0.01]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-1-arpack-csc_array-10-0.1]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-1-arpack-csc_array-10-0.3]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-1-arpack-csc_array-2-0.01]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-1-arpack-csc_array-2-0.1]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-1-arpack-csc_array-2-0.3]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-1-arpack-csc_matrix-1-0.01]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-1-arpack-csc_matrix-1-0.1]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-1-arpack-csc_matrix-1-0.3]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-1-arpack-csc_matrix-10-0.01]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-1-arpack-csc_matrix-10-0.1]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-1-arpack-csc_matrix-10-0.3]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-1-arpack-csc_matrix-2-0.01]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-1-arpack-csc_matrix-2-0.1]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-1-arpack-csc_matrix-2-0.3]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-1-arpack-csr_array-1-0.01]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-1-arpack-csr_array-1-0.1]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-1-arpack-csr_array-1-0.3]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-1-arpack-csr_array-10-0.01]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-1-arpack-csr_array-10-0.1]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-1-arpack-csr_array-10-0.3]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-1-arpack-csr_array-2-0.01]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-1-arpack-csr_array-2-0.1]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-1-arpack-csr_array-2-0.3]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-1-arpack-csr_matrix-1-0.01]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-1-arpack-csr_matrix-1-0.1]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-1-arpack-csr_matrix-1-0.3]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-1-arpack-csr_matrix-10-0.01]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-1-arpack-csr_matrix-10-0.1]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-1-arpack-csr_matrix-10-0.3]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-1-arpack-csr_matrix-2-0.01]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-1-arpack-csr_matrix-2-0.1]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-1-arpack-csr_matrix-2-0.3]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-1-covariance_eigh-csc_array-1-0.01]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-1-covariance_eigh-csc_array-1-0.1]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-1-covariance_eigh-csc_array-1-0.3]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-1-covariance_eigh-csc_array-10-0.01]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-1-covariance_eigh-csc_array-10-0.1]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-1-covariance_eigh-csc_array-10-0.3]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-1-covariance_eigh-csc_array-2-0.01]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-1-covariance_eigh-csc_array-2-0.1]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-1-covariance_eigh-csc_array-2-0.3]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-1-covariance_eigh-csc_matrix-1-0.01]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-1-covariance_eigh-csc_matrix-1-0.1]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-1-covariance_eigh-csc_matrix-1-0.3]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-1-covariance_eigh-csc_matrix-10-0.01]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-1-covariance_eigh-csc_matrix-10-0.1]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-1-covariance_eigh-csc_matrix-10-0.3]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-1-covariance_eigh-csc_matrix-2-0.01]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-1-covariance_eigh-csc_matrix-2-0.1]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-1-covariance_eigh-csc_matrix-2-0.3]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-1-covariance_eigh-csr_array-1-0.01]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-1-covariance_eigh-csr_array-1-0.1]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-1-covariance_eigh-csr_array-1-0.3]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-1-covariance_eigh-csr_array-10-0.01]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-1-covariance_eigh-csr_array-10-0.1]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-1-covariance_eigh-csr_array-10-0.3]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-1-covariance_eigh-csr_array-2-0.01]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-1-covariance_eigh-csr_array-2-0.1]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-1-covariance_eigh-csr_array-2-0.3]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-1-covariance_eigh-csr_matrix-1-0.01]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-1-covariance_eigh-csr_matrix-1-0.1]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-1-covariance_eigh-csr_matrix-1-0.3]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-1-covariance_eigh-csr_matrix-10-0.01]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-1-covariance_eigh-csr_matrix-10-0.1]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-1-covariance_eigh-csr_matrix-10-0.3]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-1-covariance_eigh-csr_matrix-2-0.01]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-1-covariance_eigh-csr_matrix-2-0.1]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-1-covariance_eigh-csr_matrix-2-0.3]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-10-arpack-csc_array-1-0.01]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-10-arpack-csc_array-1-0.1]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-10-arpack-csc_array-1-0.3]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-10-arpack-csc_array-10-0.01]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-10-arpack-csc_array-10-0.1]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-10-arpack-csc_array-10-0.3]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-10-arpack-csc_array-2-0.01]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-10-arpack-csc_array-2-0.1]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-10-arpack-csc_array-2-0.3]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-10-arpack-csc_matrix-1-0.01]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-10-arpack-csc_matrix-1-0.1]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-10-arpack-csc_matrix-1-0.3]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-10-arpack-csc_matrix-10-0.01]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-10-arpack-csc_matrix-10-0.1]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-10-arpack-csc_matrix-10-0.3]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-10-arpack-csc_matrix-2-0.01]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-10-arpack-csc_matrix-2-0.1]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-10-arpack-csc_matrix-2-0.3]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-10-arpack-csr_array-1-0.01]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-10-arpack-csr_array-1-0.1]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-10-arpack-csr_array-1-0.3]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-10-arpack-csr_array-10-0.01]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-10-arpack-csr_array-10-0.1]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-10-arpack-csr_array-10-0.3]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-10-arpack-csr_array-2-0.01]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-10-arpack-csr_array-2-0.1]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-10-arpack-csr_array-2-0.3]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-10-arpack-csr_matrix-1-0.01]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-10-arpack-csr_matrix-1-0.1]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-10-arpack-csr_matrix-1-0.3]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-10-arpack-csr_matrix-10-0.01]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-10-arpack-csr_matrix-10-0.1]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-10-arpack-csr_matrix-10-0.3]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-10-arpack-csr_matrix-2-0.01]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-10-arpack-csr_matrix-2-0.1]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-10-arpack-csr_matrix-2-0.3]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-10-covariance_eigh-csc_array-1-0.01]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-10-covariance_eigh-csc_array-1-0.1]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-10-covariance_eigh-csc_array-1-0.3]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-10-covariance_eigh-csc_array-10-0.01]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-10-covariance_eigh-csc_array-10-0.1]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-10-covariance_eigh-csc_array-10-0.3]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-10-covariance_eigh-csc_array-2-0.01]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-10-covariance_eigh-csc_array-2-0.1]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-10-covariance_eigh-csc_array-2-0.3]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-10-covariance_eigh-csc_matrix-1-0.01]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-10-covariance_eigh-csc_matrix-1-0.1]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-10-covariance_eigh-csc_matrix-1-0.3]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-10-covariance_eigh-csc_matrix-10-0.01]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-10-covariance_eigh-csc_matrix-10-0.1]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-10-covariance_eigh-csc_matrix-10-0.3]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-10-covariance_eigh-csc_matrix-2-0.01]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-10-covariance_eigh-csc_matrix-2-0.1]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-10-covariance_eigh-csc_matrix-2-0.3]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-10-covariance_eigh-csr_array-1-0.01]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-10-covariance_eigh-csr_array-1-0.1]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-10-covariance_eigh-csr_array-1-0.3]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-10-covariance_eigh-csr_array-10-0.01]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-10-covariance_eigh-csr_array-10-0.1]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-10-covariance_eigh-csr_array-10-0.3]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-10-covariance_eigh-csr_array-2-0.01]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-10-covariance_eigh-csr_array-2-0.1]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-10-covariance_eigh-csr_array-2-0.3]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-10-covariance_eigh-csr_matrix-1-0.01]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-10-covariance_eigh-csr_matrix-1-0.1]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-10-covariance_eigh-csr_matrix-1-0.3]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-10-covariance_eigh-csr_matrix-10-0.01]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-10-covariance_eigh-csr_matrix-10-0.1]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-10-covariance_eigh-csr_matrix-10-0.3]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-10-covariance_eigh-csr_matrix-2-0.01]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-10-covariance_eigh-csr_matrix-2-0.1]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-10-covariance_eigh-csr_matrix-2-0.3]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-100-arpack-csc_array-1-0.01]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-100-arpack-csc_array-1-0.1]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-100-arpack-csc_array-1-0.3]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-100-arpack-csc_array-10-0.01]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-100-arpack-csc_array-10-0.1]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-100-arpack-csc_array-10-0.3]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-100-arpack-csc_array-2-0.01]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-100-arpack-csc_array-2-0.1]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-100-arpack-csc_array-2-0.3]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-100-arpack-csc_matrix-1-0.01]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-100-arpack-csc_matrix-1-0.1]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-100-arpack-csc_matrix-1-0.3]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-100-arpack-csc_matrix-10-0.01]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-100-arpack-csc_matrix-10-0.1]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-100-arpack-csc_matrix-10-0.3]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-100-arpack-csc_matrix-2-0.01]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-100-arpack-csc_matrix-2-0.1]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-100-arpack-csc_matrix-2-0.3]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-100-arpack-csr_array-1-0.01]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-100-arpack-csr_array-1-0.1]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-100-arpack-csr_array-1-0.3]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-100-arpack-csr_array-10-0.01]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-100-arpack-csr_array-10-0.1]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-100-arpack-csr_array-10-0.3]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-100-arpack-csr_array-2-0.01]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-100-arpack-csr_array-2-0.1]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-100-arpack-csr_array-2-0.3]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-100-arpack-csr_matrix-1-0.01]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-100-arpack-csr_matrix-1-0.1]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-100-arpack-csr_matrix-1-0.3]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-100-arpack-csr_matrix-10-0.01]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-100-arpack-csr_matrix-10-0.1]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-100-arpack-csr_matrix-10-0.3]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-100-arpack-csr_matrix-2-0.01]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-100-arpack-csr_matrix-2-0.1]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-100-arpack-csr_matrix-2-0.3]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-100-covariance_eigh-csc_array-1-0.01]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-100-covariance_eigh-csc_array-1-0.1]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-100-covariance_eigh-csc_array-1-0.3]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-100-covariance_eigh-csc_array-10-0.01]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-100-covariance_eigh-csc_array-10-0.1]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-100-covariance_eigh-csc_array-10-0.3]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-100-covariance_eigh-csc_array-2-0.01]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-100-covariance_eigh-csc_array-2-0.1]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-100-covariance_eigh-csc_array-2-0.3]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-100-covariance_eigh-csc_matrix-1-0.01]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-100-covariance_eigh-csc_matrix-1-0.1]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-100-covariance_eigh-csc_matrix-1-0.3]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-100-covariance_eigh-csc_matrix-10-0.01]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-100-covariance_eigh-csc_matrix-10-0.1]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-100-covariance_eigh-csc_matrix-10-0.3]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-100-covariance_eigh-csc_matrix-2-0.01]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-100-covariance_eigh-csc_matrix-2-0.1]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-100-covariance_eigh-csc_matrix-2-0.3]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-100-covariance_eigh-csr_array-1-0.01]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-100-covariance_eigh-csr_array-1-0.1]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-100-covariance_eigh-csr_array-1-0.3]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-100-covariance_eigh-csr_array-10-0.01]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-100-covariance_eigh-csr_array-10-0.1]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-100-covariance_eigh-csr_array-10-0.3]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-100-covariance_eigh-csr_array-2-0.01]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-100-covariance_eigh-csr_array-2-0.1]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-100-covariance_eigh-csr_array-2-0.3]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-100-covariance_eigh-csr_matrix-1-0.01]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-100-covariance_eigh-csr_matrix-1-0.1]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-100-covariance_eigh-csr_matrix-1-0.3]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-100-covariance_eigh-csr_matrix-10-0.01]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-100-covariance_eigh-csr_matrix-10-0.1]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-100-covariance_eigh-csr_matrix-10-0.3]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-100-covariance_eigh-csr_matrix-2-0.01]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-100-covariance_eigh-csr_matrix-2-0.1]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-100-covariance_eigh-csr_matrix-2-0.3]"
  - "sklearn.decomposition.tests.test_pca::test_pca_svd_solver_auto[10-50-5-full]"
  - "sklearn.decomposition.tests.test_pca::test_pca_svd_solver_auto[1000-50-50-covariance_eigh]"
  - "sklearn.decomposition.tests.test_pca::test_pca_svd_solver_auto[1000-500-0.5-full]"
  - "sklearn.decomposition.tests.test_pca::test_pca_svd_solver_auto[1000-500-10-randomized]"
  - "sklearn.decomposition.tests.test_pca::test_pca_svd_solver_auto[1000-500-400-full]"
  - "sklearn.decomposition.tests.test_pca::test_pca_validation[arpack-0-must be between 1 and min\\\\(n_samples, n_features\\\\)-data0]"
  - "sklearn.decomposition.tests.test_pca::test_pca_validation[arpack-0-must be between 1 and min\\\\(n_samples, n_features\\\\)-data1]"
  - "sklearn.decomposition.tests.test_pca::test_pca_validation[arpack-2-must be strictly less than min-data0]"
  - "sklearn.decomposition.tests.test_pca::test_pca_validation[arpack-2-must be strictly less than min-data1]"
  - "sklearn.decomposition.tests.test_pca::test_pca_validation[auto-3-n_components=3 must be between 0 and min\\\\(n_samples, n_features\\\\)=2 with svd_solver='full'-data0]"
  - "sklearn.decomposition.tests.test_pca::test_pca_validation[auto-3-n_components=3 must be between 0 and min\\\\(n_samples, n_features\\\\)=2 with svd_solver='full'-data1]"
  - "sklearn.decomposition.tests.test_pca::test_pca_validation[randomized-0-must be between 1 and min\\\\(n_samples, n_features\\\\)-data0]"
  - "sklearn.decomposition.tests.test_pca::test_pca_validation[randomized-0-must be between 1 and min\\\\(n_samples, n_features\\\\)-data1]"
  - "sklearn.decomposition.tests.test_pca::test_sparse_pca_solver_error[42-csc_array-full]"
  - "sklearn.decomposition.tests.test_pca::test_sparse_pca_solver_error[42-csc_array-randomized]"
  - "sklearn.decomposition.tests.test_pca::test_sparse_pca_solver_error[42-csc_matrix-full]"
  - "sklearn.decomposition.tests.test_pca::test_sparse_pca_solver_error[42-csc_matrix-randomized]"
  - "sklearn.decomposition.tests.test_pca::test_sparse_pca_solver_error[42-csr_array-full]"
  - "sklearn.decomposition.tests.test_pca::test_sparse_pca_solver_error[42-csr_array-randomized]"
  - "sklearn.decomposition.tests.test_pca::test_sparse_pca_solver_error[42-csr_matrix-full]"
  - "sklearn.decomposition.tests.test_pca::test_sparse_pca_solver_error[42-csr_matrix-randomized]"
  - "sklearn.decomposition.tests.test_truncated_svd::test_truncated_svd_eq_pca"
  - "sklearn.ensemble.tests.test_forest::test_1d_input[RandomForestClassifier]"
  - "sklearn.ensemble.tests.test_forest::test_1d_input[RandomForestRegressor]"
  - "sklearn.ensemble.tests.test_forest::test_backend_respected"
  - "sklearn.ensemble.tests.test_forest::test_class_weight_balanced_and_bootstrap_multi_output[RandomForestClassifier]"
  - "sklearn.ensemble.tests.test_forest::test_class_weights[RandomForestClassifier]"
  - "sklearn.ensemble.tests.test_forest::test_classes_shape[RandomForestClassifier]"
  - "sklearn.ensemble.tests.test_forest::test_dtype_convert"
  - "sklearn.ensemble.tests.test_forest::test_estimators_samples[RandomForestClassifier-False-1]"
  - "sklearn.ensemble.tests.test_forest::test_estimators_samples[RandomForestClassifier-False-None]"
  - "sklearn.ensemble.tests.test_forest::test_estimators_samples[RandomForestClassifier-True-1]"
  - "sklearn.ensemble.tests.test_forest::test_estimators_samples[RandomForestClassifier-True-None]"
  - "sklearn.ensemble.tests.test_forest::test_estimators_samples[RandomForestRegressor-False-1]"
  - "sklearn.ensemble.tests.test_forest::test_estimators_samples[RandomForestRegressor-False-None]"
  - "sklearn.ensemble.tests.test_forest::test_estimators_samples[RandomForestRegressor-True-1]"
  - "sklearn.ensemble.tests.test_forest::test_estimators_samples[RandomForestRegressor-True-None]"
  - "sklearn.ensemble.tests.test_forest::test_forest_feature_importances_sum"
  - "sklearn.ensemble.tests.test_forest::test_forest_y_sparse[csr_array]"
  - "sklearn.ensemble.tests.test_forest::test_forest_y_sparse[csr_matrix]"
  - "sklearn.ensemble.tests.test_forest::test_importances[RandomForestClassifier-gini-float32]"
  - "sklearn.ensemble.tests.test_forest::test_importances[RandomForestClassifier-gini-float64]"
  - "sklearn.ensemble.tests.test_forest::test_importances[RandomForestRegressor-squared_error-float32]"
  - "sklearn.ensemble.tests.test_forest::test_importances[RandomForestRegressor-squared_error-float64]"
  - "sklearn.ensemble.tests.test_forest::test_max_leaf_nodes_max_depth[RandomForestClassifier]"
  - "sklearn.ensemble.tests.test_forest::test_max_leaf_nodes_max_depth[RandomForestRegressor]"
  - "sklearn.ensemble.tests.test_forest::test_max_samples_bootstrap[RandomForestClassifier]"
  - "sklearn.ensemble.tests.test_forest::test_max_samples_bootstrap[RandomForestRegressor]"
  - "sklearn.ensemble.tests.test_forest::test_min_impurity_decrease"
  - "sklearn.ensemble.tests.test_forest::test_min_samples_leaf[RandomForestClassifier]"
  - "sklearn.ensemble.tests.test_forest::test_min_samples_leaf[RandomForestRegressor]"
  - "sklearn.ensemble.tests.test_forest::test_min_samples_split[RandomForestClassifier]"
  - "sklearn.ensemble.tests.test_forest::test_min_samples_split[RandomForestRegressor]"
  - "sklearn.ensemble.tests.test_forest::test_missing_value_is_predictive[RandomForestClassifier]"
  - "sklearn.ensemble.tests.test_forest::test_missing_value_is_predictive[RandomForestRegressor]"
  - "sklearn.ensemble.tests.test_forest::test_missing_values_is_resilient[make_regression-RandomForestRegressor]"
  - "sklearn.ensemble.tests.test_forest::test_multioutput[RandomForestClassifier]"
  - "sklearn.ensemble.tests.test_forest::test_multioutput[RandomForestRegressor]"
  - "sklearn.ensemble.tests.test_forest::test_multioutput_string[RandomForestClassifier]"
  - "sklearn.ensemble.tests.test_forest::test_oob_not_computed_twice[RandomForestClassifier]"
  - "sklearn.ensemble.tests.test_forest::test_oob_not_computed_twice[RandomForestRegressor]"
  - "sklearn.ensemble.tests.test_forest::test_poisson_y_positive_check"
  - "sklearn.ensemble.tests.test_forest::test_probability[RandomForestClassifier]"
  - "sklearn.ensemble.tests.test_forest::test_sparse_input[coo_array-RandomForestClassifier]"
  - "sklearn.ensemble.tests.test_forest::test_sparse_input[coo_array-RandomForestRegressor]"
  - "sklearn.ensemble.tests.test_forest::test_sparse_input[coo_matrix-RandomForestClassifier]"
  - "sklearn.ensemble.tests.test_forest::test_sparse_input[coo_matrix-RandomForestRegressor]"
  - "sklearn.ensemble.tests.test_forest::test_sparse_input[csc_array-RandomForestClassifier]"
  - "sklearn.ensemble.tests.test_forest::test_sparse_input[csc_array-RandomForestRegressor]"
  - "sklearn.ensemble.tests.test_forest::test_sparse_input[csc_matrix-RandomForestClassifier]"
  - "sklearn.ensemble.tests.test_forest::test_sparse_input[csc_matrix-RandomForestRegressor]"
  - "sklearn.ensemble.tests.test_forest::test_sparse_input[csr_array-RandomForestClassifier]"
  - "sklearn.ensemble.tests.test_forest::test_sparse_input[csr_array-RandomForestRegressor]"
  - "sklearn.ensemble.tests.test_forest::test_sparse_input[csr_matrix-RandomForestClassifier]"
  - "sklearn.ensemble.tests.test_forest::test_sparse_input[csr_matrix-RandomForestRegressor]"
  - "sklearn.ensemble.tests.test_forest::test_warm_start[RandomForestClassifier]"
  - "sklearn.ensemble.tests.test_forest::test_warm_start[RandomForestRegressor]"
  - "sklearn.ensemble.tests.test_forest::test_warm_start_oob[RandomForestRegressor]"
  - "sklearn.ensemble.tests.test_stacking::test_stacking_classifier_multilabel_auto_predict[False-auto]"
  - "sklearn.ensemble.tests.test_stacking::test_stacking_classifier_multilabel_auto_predict[False-predict]"
  - "sklearn.ensemble.tests.test_stacking::test_stacking_classifier_multilabel_auto_predict[True-auto]"
  - "sklearn.ensemble.tests.test_stacking::test_stacking_classifier_multilabel_auto_predict[True-predict]"
  - "sklearn.ensemble.tests.test_stacking::test_stacking_classifier_multilabel_predict_proba[RandomForestClassifier]"
  - "sklearn.ensemble.tests.test_stacking::test_stacking_classifier_sparse_passthrough[coo_array]"
  - "sklearn.ensemble.tests.test_stacking::test_stacking_classifier_sparse_passthrough[csc_array]"
  - "sklearn.ensemble.tests.test_stacking::test_stacking_classifier_sparse_passthrough[csr_array]"
  - "sklearn.ensemble.tests.test_stacking::test_stacking_without_n_features_in[make_classification-StackingClassifier-LogisticRegression]"
  - "sklearn.ensemble.tests.test_stacking::test_stacking_without_n_features_in[make_regression-StackingRegressor-LinearRegression]"
  - "sklearn.ensemble.tests.test_voting::test_parallel_fit[42]"
  - "sklearn.ensemble.tests.test_voting::test_predict_on_toy_problem[42]"
  - "sklearn.ensemble.tests.test_voting::test_sample_weight[42]"
  - "sklearn.ensemble.tests.test_voting::test_set_estimator_drop"
  - "sklearn.ensemble.tests.test_voting::test_tie_situation"
  - "sklearn.ensemble.tests.test_weight_boosting::test_estimator"
  - "sklearn.feature_selection.tests.test_from_model::test_feature_importances"
  - "sklearn.feature_selection.tests.test_from_model::test_prefit_get_feature_names_out"
  - "sklearn.feature_selection.tests.test_from_model::test_threshold_string"
  - "sklearn.feature_selection.tests.test_rfe::test_multioutput[RFECV]"
  - "sklearn.feature_selection.tests.test_rfe::test_multioutput[RFE]"
  - "sklearn.feature_selection.tests.test_rfe::test_rfe_cv_groups"
  - "sklearn.feature_selection.tests.test_rfe::test_rfe_features_importance"
  - "sklearn.inspection.tests.test_partial_dependence::test_multiclass_multioutput[RandomForestClassifier]"
  - "sklearn.inspection.tests.test_partial_dependence::test_recursion_decision_tree_vs_forest_and_gbdt[0]"
  - "sklearn.inspection.tests.test_permutation_importance::test_robustness_to_high_cardinality_noisy_feature[0.5-1]"
  - "sklearn.inspection.tests.test_permutation_importance::test_robustness_to_high_cardinality_noisy_feature[0.5-2]"
  - "sklearn.inspection.tests.test_permutation_importance::test_robustness_to_high_cardinality_noisy_feature[1.0-1]"
  - "sklearn.inspection.tests.test_permutation_importance::test_robustness_to_high_cardinality_noisy_feature[1.0-2]"
  - "sklearn.linear_model.tests.test_base::test_inplace_data_preprocessing[42-False-None]"
  - "sklearn.linear_model.tests.test_base::test_inplace_data_preprocessing[42-True-None]"
  - "sklearn.linear_model.tests.test_base::test_linear_regression"
  - "sklearn.linear_model.tests.test_base::test_linear_regression_pd_sparse_dataframe_warning"
  - "sklearn.linear_model.tests.test_base::test_raises_value_error_if_sample_weights_greater_than_1d[2-3]"
  - "sklearn.linear_model.tests.test_base::test_raises_value_error_if_sample_weights_greater_than_1d[3-2]"
  - "sklearn.linear_model.tests.test_common::test_balance_property[42-True-LogisticRegression]"
  - "sklearn.linear_model.tests.test_coordinate_descent::test_check_input_false"
  - "sklearn.linear_model.tests.test_coordinate_descent::test_elasticnet_precompute_gram_weighted_samples"
  - "sklearn.linear_model.tests.test_coordinate_descent::test_enet_coordinate_descent[Lasso-1-kwargs1]"
  - "sklearn.linear_model.tests.test_coordinate_descent::test_enet_copy_X_False_check_input_False"
  - "sklearn.linear_model.tests.test_coordinate_descent::test_enet_float_precision"
  - "sklearn.linear_model.tests.test_coordinate_descent::test_enet_multitarget"
  - "sklearn.linear_model.tests.test_coordinate_descent::test_enet_nonfinite_params"
  - "sklearn.linear_model.tests.test_coordinate_descent::test_enet_sample_weight_consistency[42-None-False-0.01-False]"
  - "sklearn.linear_model.tests.test_coordinate_descent::test_enet_sample_weight_consistency[42-None-False-0.01-True]"
  - "sklearn.linear_model.tests.test_coordinate_descent::test_enet_toy"
  - "sklearn.linear_model.tests.test_coordinate_descent::test_lassoCV_does_not_set_precompute[False-False]"
  - "sklearn.linear_model.tests.test_coordinate_descent::test_lassoCV_does_not_set_precompute[auto-False]"
  - "sklearn.linear_model.tests.test_coordinate_descent::test_lasso_alpha_warning"
  - "sklearn.linear_model.tests.test_coordinate_descent::test_lasso_dual_gap"
  - "sklearn.linear_model.tests.test_coordinate_descent::test_lasso_readonly_data"
  - "sklearn.linear_model.tests.test_coordinate_descent::test_lasso_toy"
  - "sklearn.linear_model.tests.test_coordinate_descent::test_lasso_zero"
  - "sklearn.linear_model.tests.test_coordinate_descent::test_warm_start_convergence"
  - "sklearn.linear_model.tests.test_coordinate_descent::test_warm_start_convergence_with_regularizer_decrement"
  - "sklearn.linear_model.tests.test_ransac::test_perfect_horizontal_line"
  - "sklearn.linear_model.tests.test_ransac::test_ransac_exceed_max_skips"
  - "sklearn.linear_model.tests.test_ransac::test_ransac_min_n_samples"
  - "sklearn.linear_model.tests.test_ransac::test_ransac_no_valid_data"
  - "sklearn.linear_model.tests.test_ransac::test_ransac_no_valid_model"
  - "sklearn.linear_model.tests.test_ransac::test_ransac_warn_exceed_max_skips"
  - "sklearn.linear_model.tests.test_ridge::test_dtype_match_cholesky"
  - "sklearn.linear_model.tests.test_ridge::test_raises_value_error_if_sample_weights_greater_than_1d"
  - "sklearn.linear_model.tests.test_ridge::test_ridge_cv_individual_penalties"
  - "sklearn.linear_model.tests.test_ridge::test_ridge_individual_penalties"
  - "sklearn.linear_model.tests.test_ridge::test_ridge_sample_weight_consistency[42-sag-tall-None-False]"
  - "sklearn.linear_model.tests.test_ridge::test_ridge_sample_weight_consistency[42-sag-tall-csr_array-False]"
  - "sklearn.linear_model.tests.test_ridge::test_ridge_sample_weight_consistency[42-sag-tall-csr_matrix-False]"
  - "sklearn.linear_model.tests.test_ridge::test_ridge_sample_weight_consistency[42-sag-wide-None-False]"
  - "sklearn.linear_model.tests.test_ridge::test_ridge_sample_weight_consistency[42-sag-wide-csr_array-False]"
  - "sklearn.linear_model.tests.test_ridge::test_ridge_sample_weight_consistency[42-sag-wide-csr_matrix-False]"
  - "sklearn.linear_model.tests.test_ridge::test_ridge_sample_weight_consistency[42-saga-tall-None-False]"
  - "sklearn.linear_model.tests.test_ridge::test_ridge_sample_weight_consistency[42-saga-tall-csr_array-False]"
  - "sklearn.linear_model.tests.test_ridge::test_ridge_sample_weight_consistency[42-saga-tall-csr_matrix-False]"
  - "sklearn.linear_model.tests.test_ridge::test_ridge_sample_weight_consistency[42-saga-wide-None-False]"
  - "sklearn.linear_model.tests.test_ridge::test_ridge_sample_weight_consistency[42-saga-wide-csr_array-False]"
  - "sklearn.linear_model.tests.test_ridge::test_ridge_sample_weight_consistency[42-saga-wide-csr_matrix-False]"
  - "sklearn.linear_model.tests.test_ridge::test_ridge_sample_weight_consistency[42-svd-wide-None-False]"
  - "sklearn.linear_model.tests.test_ridge::test_ridge_sample_weight_consistency[42-svd-wide-None-True]"
  - "sklearn.linear_model.tests.test_ridge::test_ridgecv_sample_weight"
  - "sklearn.linear_model.tests.test_sag::test_binary_classifier_class_weight[csr_array]"
  - "sklearn.linear_model.tests.test_sag::test_binary_classifier_class_weight[csr_matrix]"
  - "sklearn.linear_model.tests.test_sag::test_classifier_results[csr_array]"
  - "sklearn.linear_model.tests.test_sag::test_classifier_single_class"
  - "sklearn.linear_model.tests.test_sag::test_sag_classifier_computed_correctly[csr_array]"
  - "sklearn.linear_model.tests.test_sag::test_sag_classifier_computed_correctly[csr_matrix]"
  - "sklearn.linear_model.tests.test_sag::test_sag_classifier_raises_error[sag]"
  - "sklearn.linear_model.tests.test_sag::test_sag_classifier_raises_error[saga]"
  - "sklearn.linear_model.tests.test_sag::test_sag_multiclass_computed_correctly[csr_array]"
  - "sklearn.linear_model.tests.test_sag::test_sag_multiclass_computed_correctly[csr_matrix]"
  - "sklearn.linear_model.tests.test_sag::test_sag_pobj_matches_logistic_regression[csr_array]"
  - "sklearn.linear_model.tests.test_sag::test_step_size_alpha_error"
  - "sklearn.linear_model.tests.test_sparse_coordinate_descent::test_enet_toy_explicit_sparse_input[lil_array]"
  - "sklearn.linear_model.tests.test_sparse_coordinate_descent::test_enet_toy_explicit_sparse_input[lil_matrix]"
  - "sklearn.linear_model.tests.test_sparse_coordinate_descent::test_enet_toy_list_input[csc_array-False]"
  - "sklearn.linear_model.tests.test_sparse_coordinate_descent::test_enet_toy_list_input[csc_array-True]"
  - "sklearn.linear_model.tests.test_sparse_coordinate_descent::test_enet_toy_list_input[csc_matrix-False]"
  - "sklearn.linear_model.tests.test_sparse_coordinate_descent::test_enet_toy_list_input[csc_matrix-True]"
  - "sklearn.linear_model.tests.test_sparse_coordinate_descent::test_same_multiple_output_sparse_dense[coo_array]"
  - "sklearn.linear_model.tests.test_sparse_coordinate_descent::test_same_multiple_output_sparse_dense[coo_matrix]"
  - "sklearn.linear_model.tests.test_sparse_coordinate_descent::test_sparse_dense_equality[csc_array-False-6-24-False-ElasticNet]"
  - "sklearn.linear_model.tests.test_sparse_coordinate_descent::test_sparse_dense_equality[csc_array-False-6-24-False-Lasso]"
  - "sklearn.linear_model.tests.test_sparse_coordinate_descent::test_sparse_dense_equality[csc_array-False-6-24-True-ElasticNet]"
  - "sklearn.linear_model.tests.test_sparse_coordinate_descent::test_sparse_dense_equality[csc_array-False-6-24-True-Lasso]"
  - "sklearn.linear_model.tests.test_sparse_coordinate_descent::test_sparse_dense_equality[csc_array-True-6-24-False-ElasticNet]"
  - "sklearn.linear_model.tests.test_sparse_coordinate_descent::test_sparse_dense_equality[csc_array-True-6-24-False-Lasso]"
  - "sklearn.linear_model.tests.test_sparse_coordinate_descent::test_sparse_dense_equality[csc_array-True-6-24-True-ElasticNet]"
  - "sklearn.linear_model.tests.test_sparse_coordinate_descent::test_sparse_dense_equality[csc_array-True-6-24-True-Lasso]"
  - "sklearn.linear_model.tests.test_sparse_coordinate_descent::test_sparse_dense_equality[csc_matrix-False-6-24-False-ElasticNet]"
  - "sklearn.linear_model.tests.test_sparse_coordinate_descent::test_sparse_dense_equality[csc_matrix-False-6-24-False-Lasso]"
  - "sklearn.linear_model.tests.test_sparse_coordinate_descent::test_sparse_dense_equality[csc_matrix-False-6-24-True-ElasticNet]"
  - "sklearn.linear_model.tests.test_sparse_coordinate_descent::test_sparse_dense_equality[csc_matrix-False-6-24-True-Lasso]"
  - "sklearn.linear_model.tests.test_sparse_coordinate_descent::test_sparse_dense_equality[csc_matrix-True-6-24-False-ElasticNet]"
  - "sklearn.linear_model.tests.test_sparse_coordinate_descent::test_sparse_dense_equality[csc_matrix-True-6-24-False-Lasso]"
  - "sklearn.linear_model.tests.test_sparse_coordinate_descent::test_sparse_dense_equality[csc_matrix-True-6-24-True-ElasticNet]"
  - "sklearn.linear_model.tests.test_sparse_coordinate_descent::test_sparse_dense_equality[csc_matrix-True-6-24-True-Lasso]"
  - "sklearn.linear_model.tests.test_sparse_coordinate_descent::test_sparse_lasso_not_as_toy_dataset[csc_array]"
  - "sklearn.linear_model.tests.test_sparse_coordinate_descent::test_sparse_lasso_not_as_toy_dataset[csc_matrix]"
  - "sklearn.manifold.tests.test_t_sne::test_accessible_kl_divergence"
  - "sklearn.manifold.tests.test_t_sne::test_bad_precomputed_distances[D0-.* square distance matrix-barnes_hut-asarray]"
  - "sklearn.manifold.tests.test_t_sne::test_bad_precomputed_distances[D0-.* square distance matrix-barnes_hut-csr_array]"
  - "sklearn.manifold.tests.test_t_sne::test_bad_precomputed_distances[D0-.* square distance matrix-barnes_hut-csr_matrix]"
  - "sklearn.manifold.tests.test_t_sne::test_bad_precomputed_distances[D0-.* square distance matrix-exact-asarray]"
  - "sklearn.manifold.tests.test_t_sne::test_bad_precomputed_distances[D1-.* positive.*-barnes_hut-asarray]"
  - "sklearn.manifold.tests.test_t_sne::test_bad_precomputed_distances[D1-.* positive.*-barnes_hut-csr_array]"
  - "sklearn.manifold.tests.test_t_sne::test_bad_precomputed_distances[D1-.* positive.*-barnes_hut-csr_matrix]"
  - "sklearn.manifold.tests.test_t_sne::test_bad_precomputed_distances[D1-.* positive.*-exact-asarray]"
  - "sklearn.manifold.tests.test_t_sne::test_bh_match_exact"
  - "sklearn.manifold.tests.test_t_sne::test_binary_perplexity_stability"
  - "sklearn.manifold.tests.test_t_sne::test_exact_no_precomputed_sparse[csr_array]"
  - "sklearn.manifold.tests.test_t_sne::test_exact_no_precomputed_sparse[csr_matrix]"
  - "sklearn.manifold.tests.test_t_sne::test_fit_transform_csr_matrix[csr_array-barnes_hut]"
  - "sklearn.manifold.tests.test_t_sne::test_fit_transform_csr_matrix[csr_array-exact]"
  - "sklearn.manifold.tests.test_t_sne::test_high_perplexity_precomputed_sparse_distances[csr_array]"
  - "sklearn.manifold.tests.test_t_sne::test_high_perplexity_precomputed_sparse_distances[csr_matrix]"
  - "sklearn.manifold.tests.test_t_sne::test_max_iter_used"
  - "sklearn.manifold.tests.test_t_sne::test_n_iter_without_progress"
  - "sklearn.manifold.tests.test_t_sne::test_non_positive_computed_distances"
  - "sklearn.manifold.tests.test_t_sne::test_pca_initialization_not_compatible_with_precomputed_kernel"
  - "sklearn.manifold.tests.test_t_sne::test_pca_initialization_not_compatible_with_sparse_input[csr_array]"
  - "sklearn.manifold.tests.test_t_sne::test_pca_initialization_not_compatible_with_sparse_input[csr_matrix]"
  - "sklearn.manifold.tests.test_t_sne::test_preserve_trustworthiness_approximately[pca-barnes_hut]"
  - "sklearn.manifold.tests.test_t_sne::test_preserve_trustworthiness_approximately[pca-exact]"
  - "sklearn.manifold.tests.test_t_sne::test_preserve_trustworthiness_approximately[random-barnes_hut]"
  - "sklearn.manifold.tests.test_t_sne::test_preserve_trustworthiness_approximately[random-exact]"
  - "sklearn.manifold.tests.test_t_sne::test_preserve_trustworthiness_approximately_with_precomputed_distances"
  - "sklearn.manifold.tests.test_t_sne::test_sparse_precomputed_distance[csr_array]"
  - "sklearn.manifold.tests.test_t_sne::test_sparse_precomputed_distance[csr_matrix]"
  - "sklearn.manifold.tests.test_t_sne::test_sparse_precomputed_distance[lil_array]"
  - "sklearn.manifold.tests.test_t_sne::test_sparse_precomputed_distance[lil_matrix]"
  - "sklearn.manifold.tests.test_t_sne::test_tsne_n_jobs[barnes_hut]"
  - "sklearn.manifold.tests.test_t_sne::test_tsne_n_jobs[exact]"
  - "sklearn.manifold.tests.test_t_sne::test_tsne_perplexity_validation[20]"
  - "sklearn.manifold.tests.test_t_sne::test_tsne_perplexity_validation[30]"
  - "sklearn.manifold.tests.test_t_sne::test_tsne_with_different_distance_metrics[barnes_hut-cosine-cosine_distances]"
  - "sklearn.manifold.tests.test_t_sne::test_tsne_with_different_distance_metrics[barnes_hut-manhattan-manhattan_distances]"
  - "sklearn.manifold.tests.test_t_sne::test_tsne_with_different_distance_metrics[exact-cosine-cosine_distances]"
  - "sklearn.manifold.tests.test_t_sne::test_tsne_with_different_distance_metrics[exact-manhattan-manhattan_distances]"
  - "sklearn.manifold.tests.test_t_sne::test_verbose"
  - "sklearn.metrics.tests.test_pairwise::test_euclidean_distances_extreme_values[1-float64-1e-08-0.99]"
  - "sklearn.metrics.tests.test_pairwise::test_euclidean_distances_extreme_values[1000000-float64-1e-08-0.99]"
  - "sklearn.model_selection.tests.test_classification_threshold::test_fit_and_score_over_thresholds_sample_weight"
  - "sklearn.model_selection.tests.test_validation::test_cross_val_predict_class_subset"
  - "sklearn.model_selection.tests.test_validation::test_cross_val_predict_with_method_multilabel_rf"
  - "sklearn.model_selection.tests.test_validation::test_cross_val_predict_with_method_multilabel_rf_rare_class"
  - "sklearn.neighbors.tests.test_neighbors::test_KNeighborsRegressor_multioutput_uniform_weight"
  - "sklearn.neighbors.tests.test_neighbors::test_auto_algorithm[X3-euclidean-None-kd_tree]"
  - "sklearn.neighbors.tests.test_neighbors::test_auto_algorithm[X4-seuclidean-metric_params4-ball_tree]"
  - "sklearn.neighbors.tests.test_neighbors::test_dtype_convert"
  - "sklearn.neighbors.tests.test_neighbors::test_k_and_radius_neighbors_X_None[auto]"
  - "sklearn.neighbors.tests.test_neighbors::test_k_and_radius_neighbors_X_None[ball_tree]"
  - "sklearn.neighbors.tests.test_neighbors::test_k_and_radius_neighbors_X_None[brute]"
  - "sklearn.neighbors.tests.test_neighbors::test_k_and_radius_neighbors_X_None[kd_tree]"
  - "sklearn.neighbors.tests.test_neighbors::test_k_and_radius_neighbors_duplicates[auto]"
  - "sklearn.neighbors.tests.test_neighbors::test_k_and_radius_neighbors_duplicates[ball_tree]"
  - "sklearn.neighbors.tests.test_neighbors::test_k_and_radius_neighbors_duplicates[brute]"
  - "sklearn.neighbors.tests.test_neighbors::test_k_and_radius_neighbors_duplicates[kd_tree]"
  - "sklearn.neighbors.tests.test_neighbors::test_k_and_radius_neighbors_train_is_not_query"
  - "sklearn.neighbors.tests.test_neighbors::test_kneighbors_classifier[float64-uniform-auto]"
  - "sklearn.neighbors.tests.test_neighbors::test_kneighbors_classifier[float64-uniform-ball_tree]"
  - "sklearn.neighbors.tests.test_neighbors::test_kneighbors_classifier[float64-uniform-brute]"
  - "sklearn.neighbors.tests.test_neighbors::test_kneighbors_classifier[float64-uniform-kd_tree]"
  - "sklearn.neighbors.tests.test_neighbors::test_kneighbors_classifier_predict_proba[float64]"
  - "sklearn.neighbors.tests.test_neighbors::test_kneighbors_classifier_sparse"
  - "sklearn.neighbors.tests.test_neighbors::test_kneighbors_regressor_sparse"
  - "sklearn.neighbors.tests.test_neighbors::test_metric_params_interface"
  - "sklearn.neighbors.tests.test_neighbors::test_nearest_neighbors_validate_params"
  - "sklearn.neighbors.tests.test_neighbors::test_neigh_predictions_algorithm_agnosticity[float64-KNeighborsClassifier-100-1000-chebyshev-100-100-10]"
  - "sklearn.neighbors.tests.test_neighbors::test_neigh_predictions_algorithm_agnosticity[float64-KNeighborsClassifier-100-1000-cityblock-100-100-10]"
  - "sklearn.neighbors.tests.test_neighbors::test_neigh_predictions_algorithm_agnosticity[float64-KNeighborsClassifier-100-1000-euclidean-100-100-10]"
  - "sklearn.neighbors.tests.test_neighbors::test_neigh_predictions_algorithm_agnosticity[float64-KNeighborsClassifier-100-1000-l1-100-100-10]"
  - "sklearn.neighbors.tests.test_neighbors::test_neigh_predictions_algorithm_agnosticity[float64-KNeighborsClassifier-100-1000-l2-100-100-10]"
  - "sklearn.neighbors.tests.test_neighbors::test_neigh_predictions_algorithm_agnosticity[float64-KNeighborsClassifier-100-1000-manhattan-100-100-10]"
  - "sklearn.neighbors.tests.test_neighbors::test_neigh_predictions_algorithm_agnosticity[float64-KNeighborsClassifier-100-1000-minkowski-100-100-10]"
  - "sklearn.neighbors.tests.test_neighbors::test_neigh_predictions_algorithm_agnosticity[float64-KNeighborsClassifier-50-500-chebyshev-100-100-10]"
  - "sklearn.neighbors.tests.test_neighbors::test_neigh_predictions_algorithm_agnosticity[float64-KNeighborsClassifier-50-500-cityblock-100-100-10]"
  - "sklearn.neighbors.tests.test_neighbors::test_neigh_predictions_algorithm_agnosticity[float64-KNeighborsClassifier-50-500-euclidean-100-100-10]"
  - "sklearn.neighbors.tests.test_neighbors::test_neigh_predictions_algorithm_agnosticity[float64-KNeighborsClassifier-50-500-l1-100-100-10]"
  - "sklearn.neighbors.tests.test_neighbors::test_neigh_predictions_algorithm_agnosticity[float64-KNeighborsClassifier-50-500-l2-100-100-10]"
  - "sklearn.neighbors.tests.test_neighbors::test_neigh_predictions_algorithm_agnosticity[float64-KNeighborsClassifier-50-500-manhattan-100-100-10]"
  - "sklearn.neighbors.tests.test_neighbors::test_neigh_predictions_algorithm_agnosticity[float64-KNeighborsClassifier-50-500-minkowski-100-100-10]"
  - "sklearn.neighbors.tests.test_neighbors::test_neigh_predictions_algorithm_agnosticity[float64-KNeighborsRegressor-100-1000-DM_euclidean-100-100-10]"
  - "sklearn.neighbors.tests.test_neighbors::test_neigh_predictions_algorithm_agnosticity[float64-KNeighborsRegressor-100-1000-chebyshev-100-100-10]"
  - "sklearn.neighbors.tests.test_neighbors::test_neigh_predictions_algorithm_agnosticity[float64-KNeighborsRegressor-100-1000-cityblock-100-100-10]"
  - "sklearn.neighbors.tests.test_neighbors::test_neigh_predictions_algorithm_agnosticity[float64-KNeighborsRegressor-100-1000-euclidean-100-100-10]"
  - "sklearn.neighbors.tests.test_neighbors::test_neigh_predictions_algorithm_agnosticity[float64-KNeighborsRegressor-100-1000-l1-100-100-10]"
  - "sklearn.neighbors.tests.test_neighbors::test_neigh_predictions_algorithm_agnosticity[float64-KNeighborsRegressor-100-1000-l2-100-100-10]"
  - "sklearn.neighbors.tests.test_neighbors::test_neigh_predictions_algorithm_agnosticity[float64-KNeighborsRegressor-100-1000-manhattan-100-100-10]"
  - "sklearn.neighbors.tests.test_neighbors::test_neigh_predictions_algorithm_agnosticity[float64-KNeighborsRegressor-100-1000-minkowski-100-100-10]"
  - "sklearn.neighbors.tests.test_neighbors::test_neigh_predictions_algorithm_agnosticity[float64-KNeighborsRegressor-50-500-DM_euclidean-100-100-10]"
  - "sklearn.neighbors.tests.test_neighbors::test_neigh_predictions_algorithm_agnosticity[float64-KNeighborsRegressor-50-500-chebyshev-100-100-10]"
  - "sklearn.neighbors.tests.test_neighbors::test_neigh_predictions_algorithm_agnosticity[float64-KNeighborsRegressor-50-500-cityblock-100-100-10]"
  - "sklearn.neighbors.tests.test_neighbors::test_neigh_predictions_algorithm_agnosticity[float64-KNeighborsRegressor-50-500-euclidean-100-100-10]"
  - "sklearn.neighbors.tests.test_neighbors::test_neigh_predictions_algorithm_agnosticity[float64-KNeighborsRegressor-50-500-l1-100-100-10]"
  - "sklearn.neighbors.tests.test_neighbors::test_neigh_predictions_algorithm_agnosticity[float64-KNeighborsRegressor-50-500-l2-100-100-10]"
  - "sklearn.neighbors.tests.test_neighbors::test_neigh_predictions_algorithm_agnosticity[float64-KNeighborsRegressor-50-500-manhattan-100-100-10]"
  - "sklearn.neighbors.tests.test_neighbors::test_neigh_predictions_algorithm_agnosticity[float64-KNeighborsRegressor-50-500-minkowski-100-100-10]"
  - "sklearn.neighbors.tests.test_neighbors::test_neighbors_iris"
  - "sklearn.neighbors.tests.test_neighbors::test_neighbors_minkowski_semimetric_algo_error[ball_tree-100-KNeighborsClassifier]"
  - "sklearn.neighbors.tests.test_neighbors::test_neighbors_minkowski_semimetric_algo_error[ball_tree-100-KNeighborsRegressor]"
  - "sklearn.neighbors.tests.test_neighbors::test_neighbors_minkowski_semimetric_algo_error[ball_tree-2-KNeighborsClassifier]"
  - "sklearn.neighbors.tests.test_neighbors::test_neighbors_minkowski_semimetric_algo_error[ball_tree-2-KNeighborsRegressor]"
  - "sklearn.neighbors.tests.test_neighbors::test_neighbors_minkowski_semimetric_algo_error[kd_tree-100-KNeighborsClassifier]"
  - "sklearn.neighbors.tests.test_neighbors::test_neighbors_minkowski_semimetric_algo_error[kd_tree-100-KNeighborsRegressor]"
  - "sklearn.neighbors.tests.test_neighbors::test_neighbors_minkowski_semimetric_algo_error[kd_tree-2-KNeighborsClassifier]"
  - "sklearn.neighbors.tests.test_neighbors::test_neighbors_minkowski_semimetric_algo_error[kd_tree-2-KNeighborsRegressor]"
  - "sklearn.neighbors.tests.test_neighbors::test_neighbors_minkowski_semimetric_algo_warn[auto-100-KNeighborsClassifier]"
  - "sklearn.neighbors.tests.test_neighbors::test_neighbors_minkowski_semimetric_algo_warn[auto-100-KNeighborsRegressor]"
  - "sklearn.neighbors.tests.test_neighbors::test_neighbors_minkowski_semimetric_algo_warn[auto-2-KNeighborsClassifier]"
  - "sklearn.neighbors.tests.test_neighbors::test_neighbors_minkowski_semimetric_algo_warn[auto-2-KNeighborsRegressor]"
  - "sklearn.neighbors.tests.test_neighbors::test_neighbors_minkowski_semimetric_algo_warn[brute-100-KNeighborsClassifier]"
  - "sklearn.neighbors.tests.test_neighbors::test_neighbors_minkowski_semimetric_algo_warn[brute-100-KNeighborsRegressor]"
  - "sklearn.neighbors.tests.test_neighbors::test_neighbors_minkowski_semimetric_algo_warn[brute-2-KNeighborsClassifier]"
  - "sklearn.neighbors.tests.test_neighbors::test_neighbors_minkowski_semimetric_algo_warn[brute-2-KNeighborsRegressor]"
  - "sklearn.neighbors.tests.test_neighbors::test_neighbors_validate_parameters[csr_array-KNeighborsClassifier]"
  - "sklearn.neighbors.tests.test_neighbors::test_neighbors_validate_parameters[csr_array-KNeighborsRegressor]"
  - "sklearn.neighbors.tests.test_neighbors::test_neighbors_validate_parameters[csr_matrix-KNeighborsClassifier]"
  - "sklearn.neighbors.tests.test_neighbors::test_neighbors_validate_parameters[csr_matrix-KNeighborsRegressor]"
  - "sklearn.neighbors.tests.test_neighbors::test_pipeline_with_nearest_neighbors_transformer"
  - "sklearn.neighbors.tests.test_neighbors::test_precomputed_cross_validation"
  - "sklearn.neighbors.tests.test_neighbors::test_unsupervised_inputs[float64-KNeighborsClassifier]"
  - "sklearn.neighbors.tests.test_neighbors::test_unsupervised_inputs[float64-KNeighborsRegressor]"
  - "sklearn.neighbors.tests.test_neighbors::test_unsupervised_inputs[float64-NearestNeighbors]"
  - "sklearn.neighbors.tests.test_neighbors::test_valid_brute_metric_for_auto_algorithm[float64-csr_array-cityblock]"
  - "sklearn.neighbors.tests.test_neighbors::test_valid_brute_metric_for_auto_algorithm[float64-csr_array-cosine]"
  - "sklearn.neighbors.tests.test_neighbors::test_valid_brute_metric_for_auto_algorithm[float64-csr_array-euclidean]"
  - "sklearn.neighbors.tests.test_neighbors::test_valid_brute_metric_for_auto_algorithm[float64-csr_array-l1]"
  - "sklearn.neighbors.tests.test_neighbors::test_valid_brute_metric_for_auto_algorithm[float64-csr_array-l2]"
  - "sklearn.neighbors.tests.test_neighbors::test_valid_brute_metric_for_auto_algorithm[float64-csr_array-manhattan]"
  - "sklearn.neighbors.tests.test_neighbors_pipeline::test_kneighbors_regressor"
  - "sklearn.neighbors.tests.test_neighbors_pipeline::test_tsne"
  - "sklearn.svm.tests.test_bounds::test_l1_min_c[fit-intercept-multi-class-log-array]"
  - "sklearn.svm.tests.test_bounds::test_l1_min_c[fit-intercept-multi-class-log-csr_array]"
  - "sklearn.svm.tests.test_bounds::test_l1_min_c[fit-intercept-multi-class-log-csr_matrix]"
  - "sklearn.svm.tests.test_bounds::test_l1_min_c[fit-intercept-two-classes-log-array]"
  - "sklearn.svm.tests.test_bounds::test_l1_min_c[fit-intercept-two-classes-log-csr_array]"
  - "sklearn.svm.tests.test_bounds::test_l1_min_c[fit-intercept-two-classes-log-csr_matrix]"
  - "sklearn.svm.tests.test_bounds::test_l1_min_c[no-intercept-multi-class-log-array]"
  - "sklearn.svm.tests.test_bounds::test_l1_min_c[no-intercept-multi-class-log-csr_array]"
  - "sklearn.svm.tests.test_bounds::test_l1_min_c[no-intercept-multi-class-log-csr_matrix]"
  - "sklearn.svm.tests.test_bounds::test_l1_min_c[no-intercept-two-classes-log-csr_array]"
  - "sklearn.svm.tests.test_bounds::test_l1_min_c[no-intercept-two-classes-log-csr_matrix]"
  - "sklearn.svm.tests.test_sparse::test_weight[csr_array]"
  - "sklearn.svm.tests.test_sparse::test_weight[csr_matrix]"
  - "sklearn.tests.test_calibration::test_calibrated_classifier_cv_double_sample_weights_equivalence[False-isotonic]"
  - "sklearn.tests.test_calibration::test_calibrated_classifier_cv_double_sample_weights_equivalence[False-sigmoid]"
  - "sklearn.tests.test_calibration::test_calibrated_classifier_cv_double_sample_weights_equivalence[True-isotonic]"
  - "sklearn.tests.test_calibration::test_calibrated_classifier_cv_double_sample_weights_equivalence[True-sigmoid]"
  - "sklearn.tests.test_common::test_estimators[NuSVC()-check_class_weight_classifiers]"
  - "sklearn.tests.test_common::test_estimators[NuSVC()-check_classifiers_one_label_sample_weights]"
  - "sklearn.tests.test_common::test_estimators[Pipeline(steps=[('scaler',StandardScaler()),('final_estimator',LogisticRegression())])-check_dont_overwrite_parameters]"
  - "sklearn.tests.test_common::test_estimators[Pipeline(steps=[('scaler',StandardScaler()),('final_estimator',LogisticRegression())])-check_estimators_overwrite_params]"
  - "sklearn.tests.test_common::test_estimators[Pipeline(steps=[('scaler',StandardScaler()),('final_estimator',Ridge())])-check_dont_overwrite_parameters]"
  - "sklearn.tests.test_common::test_estimators[Pipeline(steps=[('scaler',StandardScaler()),('final_estimator',Ridge())])-check_estimators_overwrite_params]"
  - "sklearn.tests.test_common::test_pandas_column_name_consistency[Pipeline(steps=[('logisticregression',LogisticRegression(C=1))])]"
  - "sklearn.tests.test_docstrings::test_docstring[GridSearchCV-None]"
  - "sklearn.tests.test_multioutput::test_multi_output_classes_[estimator0]"
  - "sklearn.tests.test_multioutput::test_multi_output_classification_sample_weights"
  - "sklearn.tests.test_multioutput::test_multi_target_sparse_regression[bsr_array]"
  - "sklearn.tests.test_multioutput::test_multi_target_sparse_regression[bsr_matrix]"
  - "sklearn.tests.test_multioutput::test_multi_target_sparse_regression[coo_array]"
  - "sklearn.tests.test_multioutput::test_multi_target_sparse_regression[coo_matrix]"
  - "sklearn.tests.test_multioutput::test_multi_target_sparse_regression[csc_array]"
  - "sklearn.tests.test_multioutput::test_multi_target_sparse_regression[csc_matrix]"
  - "sklearn.tests.test_multioutput::test_multi_target_sparse_regression[csr_array]"
  - "sklearn.tests.test_multioutput::test_multi_target_sparse_regression[csr_matrix]"
  - "sklearn.tests.test_multioutput::test_multi_target_sparse_regression[dok_array]"
  - "sklearn.tests.test_multioutput::test_multi_target_sparse_regression[dok_matrix]"
  - "sklearn.tests.test_multioutput::test_multi_target_sparse_regression[lil_array]"
  - "sklearn.tests.test_multioutput::test_multi_target_sparse_regression[lil_matrix]"
  - "sklearn.tests.test_multioutput::test_multiclass_multioutput_estimator_predict_proba"
  - "sklearn.tests.test_pipeline::test_pipeline_set_output_integration"
  - "sklearn.tests.test_public_functions::test_class_wrapper_param_validation[sklearn.cluster.dbscan-sklearn.cluster.DBSCAN]"
  - "sklearn.tests.test_public_functions::test_class_wrapper_param_validation[sklearn.cluster.k_means-sklearn.cluster.KMeans]"
  - "sklearn.utils.tests.test_estimator_checks::test_check_dataframe_column_names_consistency"
  - "sklearn.utils.tests.test_estimator_checks::test_check_estimator"
  - "sklearn.utils.tests.test_estimator_checks::test_check_estimator_clones"
  - "sklearn.utils.tests.test_validation::test_check_array_links_to_imputer_doc_only_for_X[asarray-X]"
- reason: Test should fail with cuml.accel (scikit-learn 1.5)
  marker: cuml_accel_bugs
  condition: scikit-learn<1.6
  tests:
  - "sklearn.linear_model.tests.test_base::test_linear_regression_sample_weight_consistency[42-False-None]"
  - "sklearn.linear_model.tests.test_base::test_linear_regression_sample_weight_consistency[42-True-None]"
  - "sklearn.linear_model.tests.test_ridge::test_ridge_regression[wide-42-False-svd]"
  - "sklearn.linear_model.tests.test_ridge::test_ridge_regression[wide-42-True-svd]"
  - "sklearn.linear_model.tests.test_ridge::test_ridge_regression_hstacked_X[wide-42-False-svd]"
  - "sklearn.linear_model.tests.test_ridge::test_ridge_regression_hstacked_X[wide-42-True-svd]"
  - "sklearn.linear_model.tests.test_ridge::test_ridge_regression_sample_weights[wide-42-0.01-None-False-svd]"
  - "sklearn.linear_model.tests.test_ridge::test_ridge_regression_sample_weights[wide-42-0.01-None-True-svd]"
  - "sklearn.linear_model.tests.test_ridge::test_ridge_regression_sample_weights[wide-42-1.0-None-False-svd]"
  - "sklearn.linear_model.tests.test_ridge::test_ridge_regression_sample_weights[wide-42-1.0-None-True-svd]"
  - "sklearn.linear_model.tests.test_ridge::test_ridge_regression_unpenalized[wide-42-False-svd]"
  - "sklearn.linear_model.tests.test_ridge::test_ridge_regression_unpenalized[wide-42-True-cholesky]"
  - "sklearn.linear_model.tests.test_ridge::test_ridge_regression_unpenalized[wide-42-True-lsqr]"
  - "sklearn.linear_model.tests.test_ridge::test_ridge_regression_unpenalized[wide-42-True-sag]"
  - "sklearn.linear_model.tests.test_ridge::test_ridge_regression_unpenalized[wide-42-True-saga]"
  - "sklearn.linear_model.tests.test_ridge::test_ridge_regression_unpenalized[wide-42-True-sparse_cg]"
  - "sklearn.linear_model.tests.test_ridge::test_ridge_regression_unpenalized[wide-42-True-svd]"
  - "sklearn.linear_model.tests.test_ridge::test_ridge_regression_unpenalized_hstacked_X[wide-42-False-svd]"
  - "sklearn.linear_model.tests.test_ridge::test_ridge_regression_unpenalized_hstacked_X[wide-42-True-cholesky]"
  - "sklearn.linear_model.tests.test_ridge::test_ridge_regression_unpenalized_hstacked_X[wide-42-True-lsqr]"
  - "sklearn.linear_model.tests.test_ridge::test_ridge_regression_unpenalized_hstacked_X[wide-42-True-sag]"
  - "sklearn.linear_model.tests.test_ridge::test_ridge_regression_unpenalized_hstacked_X[wide-42-True-saga]"
  - "sklearn.linear_model.tests.test_ridge::test_ridge_regression_unpenalized_hstacked_X[wide-42-True-sparse_cg]"
  - "sklearn.linear_model.tests.test_ridge::test_ridge_regression_unpenalized_hstacked_X[wide-42-True-svd]"
  - "sklearn.linear_model.tests.test_ridge::test_ridge_regression_unpenalized_vstacked_X[wide-42-False-svd]"
  - "sklearn.linear_model.tests.test_ridge::test_ridge_regression_unpenalized_vstacked_X[wide-42-True-cholesky]"
  - "sklearn.linear_model.tests.test_ridge::test_ridge_regression_unpenalized_vstacked_X[wide-42-True-lsqr]"
  - "sklearn.linear_model.tests.test_ridge::test_ridge_regression_unpenalized_vstacked_X[wide-42-True-sag]"
  - "sklearn.linear_model.tests.test_ridge::test_ridge_regression_unpenalized_vstacked_X[wide-42-True-saga]"
  - "sklearn.linear_model.tests.test_ridge::test_ridge_regression_unpenalized_vstacked_X[wide-42-True-sparse_cg]"
  - "sklearn.linear_model.tests.test_ridge::test_ridge_regression_unpenalized_vstacked_X[wide-42-True-svd]"
  - "sklearn.linear_model.tests.test_ridge::test_ridge_regression_vstacked_X[wide-42-False-svd]"
  - "sklearn.linear_model.tests.test_ridge::test_ridge_regression_vstacked_X[wide-42-True-svd]"
  - "sklearn.semi_supervised.tests.test_self_training::test_classification[k_best-base_estimator0]"
  - "sklearn.semi_supervised.tests.test_self_training::test_classification[threshold-base_estimator0]"
  - "sklearn.semi_supervised.tests.test_self_training::test_zero_iterations[y1-base_estimator0]"
  - "sklearn.tests.test_calibration::test_calibrated_classifier_cv_zeros_sample_weights_equivalence[False-isotonic]"
  - "sklearn.tests.test_calibration::test_calibrated_classifier_cv_zeros_sample_weights_equivalence[False-sigmoid]"
  - "sklearn.tests.test_calibration::test_calibrated_classifier_cv_zeros_sample_weights_equivalence[True-isotonic]"
  - "sklearn.tests.test_calibration::test_calibrated_classifier_cv_zeros_sample_weights_equivalence[True-sigmoid]"
  - "sklearn.tests.test_common::test_estimators[BernoulliRBM()-check_methods_sample_order_invariance]"
  - "sklearn.tests.test_common::test_estimators[BernoulliRBM()-check_methods_subset_invariance]"
  - "sklearn.tests.test_common::test_estimators[BisectingKMeans()-check_sample_weights_invariance(kind=zeros)]"
  - "sklearn.tests.test_common::test_estimators[CalibratedClassifierCV(estimator=LogisticRegression(C=1))-check_sample_weights_invariance(kind=zeros)]"
  - "sklearn.tests.test_common::test_estimators[DummyClassifier()-check_methods_sample_order_invariance]"
  - "sklearn.tests.test_common::test_estimators[DummyClassifier()-check_methods_subset_invariance]"
  - "sklearn.tests.test_common::test_estimators[ElasticNetCV()-check_sample_weights_invariance(kind=zeros)]"
  - "sklearn.tests.test_common::test_estimators[IsolationForest()-check_sample_weights_invariance(kind=zeros)]"
  - "sklearn.tests.test_common::test_estimators[LassoCV()-check_sample_weights_invariance(kind=zeros)]"
  - "sklearn.tests.test_common::test_estimators[LinearSVR()-check_sample_weights_invariance(kind=zeros)]"
  - "sklearn.tests.test_common::test_estimators[LogisticRegressionCV()-check_sample_weights_invariance(kind=zeros)]"
  - "sklearn.tests.test_common::test_estimators[MiniBatchKMeans()-check_sample_weights_invariance(kind=zeros)]"
  - "sklearn.tests.test_common::test_estimators[NuSVC()-check_sample_weights_invariance(kind=zeros)]"
  - "sklearn.tests.test_common::test_estimators[NuSVR()-check_sample_weights_invariance(kind=zeros)]"
  - "sklearn.tests.test_common::test_estimators[OneClassSVM()-check_sample_weights_invariance(kind=zeros)]"
  - "sklearn.tests.test_common::test_estimators[Pipeline(steps=[('scaler',StandardScaler()),('final_estimator',LogisticRegression())])-check_classifier_data_not_an_array]"
  - "sklearn.tests.test_common::test_estimators[Pipeline(steps=[('scaler',StandardScaler()),('final_estimator',LogisticRegression())])-check_classifiers_one_label]"
  - "sklearn.tests.test_common::test_estimators[Pipeline(steps=[('scaler',StandardScaler()),('final_estimator',LogisticRegression())])-check_classifiers_regression_target]"
  - "sklearn.tests.test_common::test_estimators[Pipeline(steps=[('scaler',StandardScaler()),('final_estimator',LogisticRegression())])-check_dtype_object]"
  - "sklearn.tests.test_common::test_estimators[Pipeline(steps=[('scaler',StandardScaler()),('final_estimator',LogisticRegression())])-check_estimators_nan_inf]"
  - "sklearn.tests.test_common::test_estimators[Pipeline(steps=[('scaler',StandardScaler()),('final_estimator',LogisticRegression())])-check_fit2d_1sample]"
  - "sklearn.tests.test_common::test_estimators[Pipeline(steps=[('scaler',StandardScaler()),('final_estimator',LogisticRegression())])-check_supervised_y_2d]"
  - "sklearn.tests.test_common::test_estimators[Pipeline(steps=[('scaler',StandardScaler()),('final_estimator',LogisticRegression())])-check_supervised_y_no_nan]"
  - "sklearn.tests.test_common::test_estimators[Pipeline(steps=[('scaler',StandardScaler()),('final_estimator',Ridge())])-check_estimators_nan_inf]"
  - "sklearn.tests.test_common::test_estimators[Pipeline(steps=[('scaler',StandardScaler()),('final_estimator',Ridge())])-check_fit2d_1sample]"
  - "sklearn.tests.test_common::test_estimators[Pipeline(steps=[('scaler',StandardScaler()),('final_estimator',Ridge())])-check_regressor_data_not_an_array]"
  - "sklearn.tests.test_common::test_estimators[Pipeline(steps=[('scaler',StandardScaler()),('final_estimator',Ridge())])-check_supervised_y_no_nan]"
  - "sklearn.tests.test_common::test_estimators[SGDClassifier()-check_sample_weights_invariance(kind=zeros)]"
  - "sklearn.tests.test_common::test_estimators[SGDOneClassSVM()-check_sample_weights_invariance(kind=zeros)]"
  - "sklearn.tests.test_common::test_estimators[SGDRegressor()-check_sample_weights_invariance(kind=zeros)]"
  - "sklearn.tests.test_common::test_estimators[SVC()-check_sample_weights_invariance(kind=zeros)]"
  - "sklearn.tests.test_common::test_estimators[SVR()-check_sample_weights_invariance(kind=zeros)]"
  - "sklearn.tests.test_common::test_estimators[SpectralBiclustering()-check_estimators_dtypes]"
  - "sklearn.tests.test_common::test_estimators[SpectralBiclustering()-check_fit2d_1feature]"
  - "sklearn.tests.test_common::test_estimators[SpectralBiclustering()-check_fit2d_1sample]"
  - "sklearn.tests.test_common::test_estimators[SpectralCoclustering()-check_dont_overwrite_parameters]"
  - "sklearn.tests.test_common::test_estimators[SpectralCoclustering()-check_estimator_sparse_array]"
  - "sklearn.tests.test_common::test_estimators[SpectralCoclustering()-check_estimator_sparse_matrix]"
  - "sklearn.tests.test_common::test_estimators[SpectralCoclustering()-check_estimators_dtypes]"
  - "sklearn.tests.test_common::test_estimators[SpectralCoclustering()-check_fit2d_1feature]"
  - "sklearn.tests.test_common::test_estimators[SpectralCoclustering()-check_fit2d_1sample]"
  - "sklearn.tests.test_common::test_estimators[SpectralCoclustering()-check_fit2d_predict1d]"
  - "sklearn.tests.test_common::test_estimators[SpectralCoclustering()-check_methods_subset_invariance]"
  - "sklearn.tests.test_common::test_estimators[TunedThresholdClassifierCV(estimator=LogisticRegression(C=1))-check_classifiers_train(readonly_memmap=True)]"
  - "sklearn.tests.test_common::test_estimators[TunedThresholdClassifierCV(estimator=LogisticRegression(C=1))-check_classifiers_train(readonly_memmap=True,X_dtype=float32)]"
  - "sklearn.tests.test_common::test_estimators[TunedThresholdClassifierCV(estimator=LogisticRegression(C=1))-check_classifiers_train]"
  - "sklearn.tests.test_common::test_pandas_column_name_consistency[GridSearchCV(cv=2,error_score='raise',estimator=Pipeline(steps=[('pca',PCA()),('logisticregression',LogisticRegression())]),param_grid={'logisticregression__C':[0.1,1.0]})]"
  - "sklearn.tests.test_common::test_pandas_column_name_consistency[GridSearchCV(cv=2,error_score='raise',estimator=Pipeline(steps=[('pca',PCA()),('ridge',Ridge())]),param_grid={'ridge__alpha':[0.1,1.0]})]"
  - "sklearn.tests.test_common::test_pandas_column_name_consistency[GridSearchCV(cv=2,estimator=LogisticRegression(),param_grid={'C':[0.1,1.0]})]"
  - "sklearn.tests.test_common::test_pandas_column_name_consistency[GridSearchCV(cv=2,estimator=Ridge(),param_grid={'alpha':[0.1,1.0]})]"
  - "sklearn.tests.test_common::test_pandas_column_name_consistency[HalvingGridSearchCV(cv=2,error_score='raise',estimator=Pipeline(steps=[('pca',PCA()),('logisticregression',LogisticRegression())]),min_resources='smallest',param_grid={'logisticregression__C':[0.1,1.0]},random_state=0)]"
  - "sklearn.tests.test_common::test_pandas_column_name_consistency[HalvingGridSearchCV(cv=2,error_score='raise',estimator=Pipeline(steps=[('pca',PCA()),('ridge',Ridge())]),min_resources='smallest',param_grid={'ridge__alpha':[0.1,1.0]},random_state=0)]"
  - "sklearn.tests.test_common::test_pandas_column_name_consistency[HalvingGridSearchCV(cv=2,estimator=LogisticRegression(),min_resources='smallest',param_grid={'C':[0.1,1.0]},random_state=0)0]"
  - "sklearn.tests.test_common::test_pandas_column_name_consistency[HalvingGridSearchCV(cv=2,estimator=LogisticRegression(),min_resources='smallest',param_grid={'C':[0.1,1.0]},random_state=0)1]"
  - "sklearn.tests.test_common::test_pandas_column_name_consistency[HalvingGridSearchCV(cv=2,estimator=Ridge(),min_resources='smallest',param_grid={'alpha':[0.1,1.0]},random_state=0)0]"
  - "sklearn.tests.test_common::test_pandas_column_name_consistency[HalvingGridSearchCV(cv=2,estimator=Ridge(),min_resources='smallest',param_grid={'alpha':[0.1,1.0]},random_state=0)1]"
  - "sklearn.tests.test_common::test_pandas_column_name_consistency[HalvingRandomSearchCV(cv=2,error_score='raise',estimator=Pipeline(steps=[('pca',PCA()),('logisticregression',LogisticRegression())]),param_distributions={'logisticregression__C':[0.1,1.0]},random_state=0)]"
  - "sklearn.tests.test_common::test_pandas_column_name_consistency[HalvingRandomSearchCV(cv=2,error_score='raise',estimator=Pipeline(steps=[('pca',PCA()),('ridge',Ridge())]),param_distributions={'ridge__alpha':[0.1,1.0]},random_state=0)]"
  - "sklearn.tests.test_common::test_pandas_column_name_consistency[RandomizedSearchCV(cv=2,error_score='raise',estimator=Pipeline(steps=[('pca',PCA()),('logisticregression',LogisticRegression())]),param_distributions={'logisticregression__C':[0.1,1.0]},random_state=0)]"
  - "sklearn.tests.test_common::test_pandas_column_name_consistency[RandomizedSearchCV(cv=2,error_score='raise',estimator=Pipeline(steps=[('pca',PCA()),('ridge',Ridge())]),param_distributions={'ridge__alpha':[0.1,1.0]},random_state=0)]"
  - "sklearn.tests.test_common::test_pandas_column_name_consistency[RandomizedSearchCV(cv=2,estimator=LogisticRegression(),param_distributions={'C':[0.1,1.0]},random_state=0)]"
  - "sklearn.tests.test_common::test_pandas_column_name_consistency[RandomizedSearchCV(cv=2,estimator=Ridge(),param_distributions={'alpha':[0.1,1.0]},random_state=0)]"
  - "sklearn.tests.test_common::test_search_cv[GridSearchCV(cv=2,error_score='raise',estimator=Pipeline(steps=[('pca',PCA()),('logisticregression',LogisticRegression())]),param_grid={'logisticregression__C':[0.1,1.0]})-check_classifier_data_not_an_array]"
  - "sklearn.tests.test_common::test_search_cv[GridSearchCV(cv=2,error_score='raise',estimator=Pipeline(steps=[('pca',PCA()),('logisticregression',LogisticRegression())]),param_grid={'logisticregression__C':[0.1,1.0]})-check_classifiers_one_label]"
  - "sklearn.tests.test_common::test_search_cv[GridSearchCV(cv=2,error_score='raise',estimator=Pipeline(steps=[('pca',PCA()),('logisticregression',LogisticRegression())]),param_grid={'logisticregression__C':[0.1,1.0]})-check_classifiers_regression_target]"
  - "sklearn.tests.test_common::test_search_cv[GridSearchCV(cv=2,error_score='raise',estimator=Pipeline(steps=[('pca',PCA()),('logisticregression',LogisticRegression())]),param_grid={'logisticregression__C':[0.1,1.0]})-check_dtype_object]"
  - "sklearn.tests.test_common::test_search_cv[GridSearchCV(cv=2,error_score='raise',estimator=Pipeline(steps=[('pca',PCA()),('logisticregression',LogisticRegression())]),param_grid={'logisticregression__C':[0.1,1.0]})-check_estimators_empty_data_messages]"
  - "sklearn.tests.test_common::test_search_cv[GridSearchCV(cv=2,error_score='raise',estimator=Pipeline(steps=[('pca',PCA()),('logisticregression',LogisticRegression())]),param_grid={'logisticregression__C':[0.1,1.0]})-check_estimators_nan_inf]"
  - "sklearn.tests.test_common::test_search_cv[GridSearchCV(cv=2,error_score='raise',estimator=Pipeline(steps=[('pca',PCA()),('logisticregression',LogisticRegression())]),param_grid={'logisticregression__C':[0.1,1.0]})-check_fit1d]"
  - "sklearn.tests.test_common::test_search_cv[GridSearchCV(cv=2,error_score='raise',estimator=Pipeline(steps=[('pca',PCA()),('logisticregression',LogisticRegression())]),param_grid={'logisticregression__C':[0.1,1.0]})-check_fit2d_1feature]"
  - "sklearn.tests.test_common::test_search_cv[GridSearchCV(cv=2,error_score='raise',estimator=Pipeline(steps=[('pca',PCA()),('logisticregression',LogisticRegression())]),param_grid={'logisticregression__C':[0.1,1.0]})-check_fit2d_predict1d]"
  - "sklearn.tests.test_common::test_search_cv[GridSearchCV(cv=2,error_score='raise',estimator=Pipeline(steps=[('pca',PCA()),('logisticregression',LogisticRegression())]),param_grid={'logisticregression__C':[0.1,1.0]})-check_supervised_y_2d]"
  - "sklearn.tests.test_common::test_search_cv[GridSearchCV(cv=2,error_score='raise',estimator=Pipeline(steps=[('pca',PCA()),('ridge',Ridge())]),param_grid={'ridge__alpha':[0.1,1.0]})-check_complex_data]"
  - "sklearn.tests.test_common::test_search_cv[GridSearchCV(cv=2,error_score='raise',estimator=Pipeline(steps=[('pca',PCA()),('ridge',Ridge())]),param_grid={'ridge__alpha':[0.1,1.0]})-check_dtype_object]"
  - "sklearn.tests.test_common::test_search_cv[GridSearchCV(cv=2,error_score='raise',estimator=Pipeline(steps=[('pca',PCA()),('ridge',Ridge())]),param_grid={'ridge__alpha':[0.1,1.0]})-check_estimators_empty_data_messages]"
  - "sklearn.tests.test_common::test_search_cv[GridSearchCV(cv=2,error_score='raise',estimator=Pipeline(steps=[('pca',PCA()),('ridge',Ridge())]),param_grid={'ridge__alpha':[0.1,1.0]})-check_estimators_nan_inf]"
  - "sklearn.tests.test_common::test_search_cv[GridSearchCV(cv=2,error_score='raise',estimator=Pipeline(steps=[('pca',PCA()),('ridge',Ridge())]),param_grid={'ridge__alpha':[0.1,1.0]})-check_fit1d]"
  - "sklearn.tests.test_common::test_search_cv[GridSearchCV(cv=2,error_score='raise',estimator=Pipeline(steps=[('pca',PCA()),('ridge',Ridge())]),param_grid={'ridge__alpha':[0.1,1.0]})-check_fit2d_1feature]"
  - "sklearn.tests.test_common::test_search_cv[GridSearchCV(cv=2,error_score='raise',estimator=Pipeline(steps=[('pca',PCA()),('ridge',Ridge())]),param_grid={'ridge__alpha':[0.1,1.0]})-check_fit2d_predict1d]"
  - "sklearn.tests.test_common::test_search_cv[GridSearchCV(cv=2,error_score='raise',estimator=Pipeline(steps=[('pca',PCA()),('ridge',Ridge())]),param_grid={'ridge__alpha':[0.1,1.0]})-check_regressor_data_not_an_array]"
  - "sklearn.tests.test_common::test_search_cv[GridSearchCV(cv=2,error_score='raise',estimator=Pipeline(steps=[('pca',PCA()),('ridge',Ridge())]),param_grid={'ridge__alpha':[0.1,1.0]})-check_supervised_y_2d]"
  - "sklearn.tests.test_common::test_search_cv[GridSearchCV(cv=2,error_score='raise',estimator=Pipeline(steps=[('pca',PCA()),('ridge',Ridge())]),param_grid={'ridge__alpha':[0.1,1.0]})-check_supervised_y_no_nan]"
  - "sklearn.tests.test_common::test_search_cv[GridSearchCV(cv=2,estimator=LogisticRegression(),param_grid={'C':[0.1,1.0]})-check_classifier_data_not_an_array]"
  - "sklearn.tests.test_common::test_search_cv[GridSearchCV(cv=2,estimator=LogisticRegression(),param_grid={'C':[0.1,1.0]})-check_classifiers_one_label]"
  - "sklearn.tests.test_common::test_search_cv[GridSearchCV(cv=2,estimator=LogisticRegression(),param_grid={'C':[0.1,1.0]})-check_classifiers_regression_target]"
  - "sklearn.tests.test_common::test_search_cv[GridSearchCV(cv=2,estimator=LogisticRegression(),param_grid={'C':[0.1,1.0]})-check_dtype_object]"
  - "sklearn.tests.test_common::test_search_cv[GridSearchCV(cv=2,estimator=LogisticRegression(),param_grid={'C':[0.1,1.0]})-check_estimators_empty_data_messages]"
  - "sklearn.tests.test_common::test_search_cv[GridSearchCV(cv=2,estimator=LogisticRegression(),param_grid={'C':[0.1,1.0]})-check_estimators_nan_inf]"
  - "sklearn.tests.test_common::test_search_cv[GridSearchCV(cv=2,estimator=LogisticRegression(),param_grid={'C':[0.1,1.0]})-check_fit1d]"
  - "sklearn.tests.test_common::test_search_cv[GridSearchCV(cv=2,estimator=LogisticRegression(),param_grid={'C':[0.1,1.0]})-check_fit2d_predict1d]"
  - "sklearn.tests.test_common::test_search_cv[GridSearchCV(cv=2,estimator=LogisticRegression(),param_grid={'C':[0.1,1.0]})-check_supervised_y_2d]"
  - "sklearn.tests.test_common::test_search_cv[GridSearchCV(cv=2,estimator=Ridge(),param_grid={'alpha':[0.1,1.0]})-check_complex_data]"
  - "sklearn.tests.test_common::test_search_cv[GridSearchCV(cv=2,estimator=Ridge(),param_grid={'alpha':[0.1,1.0]})-check_dtype_object]"
  - "sklearn.tests.test_common::test_search_cv[GridSearchCV(cv=2,estimator=Ridge(),param_grid={'alpha':[0.1,1.0]})-check_estimators_empty_data_messages]"
  - "sklearn.tests.test_common::test_search_cv[GridSearchCV(cv=2,estimator=Ridge(),param_grid={'alpha':[0.1,1.0]})-check_estimators_nan_inf]"
  - "sklearn.tests.test_common::test_search_cv[GridSearchCV(cv=2,estimator=Ridge(),param_grid={'alpha':[0.1,1.0]})-check_fit1d]"
  - "sklearn.tests.test_common::test_search_cv[GridSearchCV(cv=2,estimator=Ridge(),param_grid={'alpha':[0.1,1.0]})-check_fit2d_predict1d]"
  - "sklearn.tests.test_common::test_search_cv[GridSearchCV(cv=2,estimator=Ridge(),param_grid={'alpha':[0.1,1.0]})-check_regressor_data_not_an_array]"
  - "sklearn.tests.test_common::test_search_cv[GridSearchCV(cv=2,estimator=Ridge(),param_grid={'alpha':[0.1,1.0]})-check_supervised_y_2d]"
  - "sklearn.tests.test_common::test_search_cv[GridSearchCV(cv=2,estimator=Ridge(),param_grid={'alpha':[0.1,1.0]})-check_supervised_y_no_nan]"
  - "sklearn.tests.test_common::test_search_cv[HalvingGridSearchCV(cv=2,error_score='raise',estimator=Pipeline(steps=[('pca',PCA()),('logisticregression',LogisticRegression())]),min_resources='smallest',param_grid={'logisticregression__C':[0.1,1.0]},random_state=0)-check_classifier_data_not_an_array]"
  - "sklearn.tests.test_common::test_search_cv[HalvingGridSearchCV(cv=2,error_score='raise',estimator=Pipeline(steps=[('pca',PCA()),('logisticregression',LogisticRegression())]),min_resources='smallest',param_grid={'logisticregression__C':[0.1,1.0]},random_state=0)-check_classifiers_one_label]"
  - "sklearn.tests.test_common::test_search_cv[HalvingGridSearchCV(cv=2,error_score='raise',estimator=Pipeline(steps=[('pca',PCA()),('logisticregression',LogisticRegression())]),min_resources='smallest',param_grid={'logisticregression__C':[0.1,1.0]},random_state=0)-check_dtype_object]"
  - "sklearn.tests.test_common::test_search_cv[HalvingGridSearchCV(cv=2,error_score='raise',estimator=Pipeline(steps=[('pca',PCA()),('logisticregression',LogisticRegression())]),min_resources='smallest',param_grid={'logisticregression__C':[0.1,1.0]},random_state=0)-check_estimators_empty_data_messages]"
  - "sklearn.tests.test_common::test_search_cv[HalvingGridSearchCV(cv=2,error_score='raise',estimator=Pipeline(steps=[('pca',PCA()),('logisticregression',LogisticRegression())]),min_resources='smallest',param_grid={'logisticregression__C':[0.1,1.0]},random_state=0)-check_estimators_nan_inf]"
  - "sklearn.tests.test_common::test_search_cv[HalvingGridSearchCV(cv=2,error_score='raise',estimator=Pipeline(steps=[('pca',PCA()),('logisticregression',LogisticRegression())]),min_resources='smallest',param_grid={'logisticregression__C':[0.1,1.0]},random_state=0)-check_fit1d]"
  - "sklearn.tests.test_common::test_search_cv[HalvingGridSearchCV(cv=2,error_score='raise',estimator=Pipeline(steps=[('pca',PCA()),('logisticregression',LogisticRegression())]),min_resources='smallest',param_grid={'logisticregression__C':[0.1,1.0]},random_state=0)-check_fit2d_1feature]"
  - "sklearn.tests.test_common::test_search_cv[HalvingGridSearchCV(cv=2,error_score='raise',estimator=Pipeline(steps=[('pca',PCA()),('logisticregression',LogisticRegression())]),min_resources='smallest',param_grid={'logisticregression__C':[0.1,1.0]},random_state=0)-check_fit2d_1sample]"
  - "sklearn.tests.test_common::test_search_cv[HalvingGridSearchCV(cv=2,error_score='raise',estimator=Pipeline(steps=[('pca',PCA()),('logisticregression',LogisticRegression())]),min_resources='smallest',param_grid={'logisticregression__C':[0.1,1.0]},random_state=0)-check_fit2d_predict1d]"
  - "sklearn.tests.test_common::test_search_cv[HalvingGridSearchCV(cv=2,error_score='raise',estimator=Pipeline(steps=[('pca',PCA()),('ridge',Ridge())]),min_resources='smallest',param_grid={'ridge__alpha':[0.1,1.0]},random_state=0)-check_complex_data]"
  - "sklearn.tests.test_common::test_search_cv[HalvingGridSearchCV(cv=2,error_score='raise',estimator=Pipeline(steps=[('pca',PCA()),('ridge',Ridge())]),min_resources='smallest',param_grid={'ridge__alpha':[0.1,1.0]},random_state=0)-check_dtype_object]"
  - "sklearn.tests.test_common::test_search_cv[HalvingGridSearchCV(cv=2,error_score='raise',estimator=Pipeline(steps=[('pca',PCA()),('ridge',Ridge())]),min_resources='smallest',param_grid={'ridge__alpha':[0.1,1.0]},random_state=0)-check_estimators_empty_data_messages]"
  - "sklearn.tests.test_common::test_search_cv[HalvingGridSearchCV(cv=2,error_score='raise',estimator=Pipeline(steps=[('pca',PCA()),('ridge',Ridge())]),min_resources='smallest',param_grid={'ridge__alpha':[0.1,1.0]},random_state=0)-check_estimators_fit_returns_self(readonly_memmap=True)]"
  - "sklearn.tests.test_common::test_search_cv[HalvingGridSearchCV(cv=2,error_score='raise',estimator=Pipeline(steps=[('pca',PCA()),('ridge',Ridge())]),min_resources='smallest',param_grid={'ridge__alpha':[0.1,1.0]},random_state=0)-check_estimators_fit_returns_self]"
  - "sklearn.tests.test_common::test_search_cv[HalvingGridSearchCV(cv=2,error_score='raise',estimator=Pipeline(steps=[('pca',PCA()),('ridge',Ridge())]),min_resources='smallest',param_grid={'ridge__alpha':[0.1,1.0]},random_state=0)-check_estimators_nan_inf]"
  - "sklearn.tests.test_common::test_search_cv[HalvingGridSearchCV(cv=2,error_score='raise',estimator=Pipeline(steps=[('pca',PCA()),('ridge',Ridge())]),min_resources='smallest',param_grid={'ridge__alpha':[0.1,1.0]},random_state=0)-check_estimators_overwrite_params]"
  - "sklearn.tests.test_common::test_search_cv[HalvingGridSearchCV(cv=2,error_score='raise',estimator=Pipeline(steps=[('pca',PCA()),('ridge',Ridge())]),min_resources='smallest',param_grid={'ridge__alpha':[0.1,1.0]},random_state=0)-check_fit1d]"
  - "sklearn.tests.test_common::test_search_cv[HalvingGridSearchCV(cv=2,error_score='raise',estimator=Pipeline(steps=[('pca',PCA()),('ridge',Ridge())]),min_resources='smallest',param_grid={'ridge__alpha':[0.1,1.0]},random_state=0)-check_fit2d_1feature]"
  - "sklearn.tests.test_common::test_search_cv[HalvingGridSearchCV(cv=2,error_score='raise',estimator=Pipeline(steps=[('pca',PCA()),('ridge',Ridge())]),min_resources='smallest',param_grid={'ridge__alpha':[0.1,1.0]},random_state=0)-check_fit2d_1sample]"
  - "sklearn.tests.test_common::test_search_cv[HalvingGridSearchCV(cv=2,error_score='raise',estimator=Pipeline(steps=[('pca',PCA()),('ridge',Ridge())]),min_resources='smallest',param_grid={'ridge__alpha':[0.1,1.0]},random_state=0)-check_fit2d_predict1d]"
  - "sklearn.tests.test_common::test_search_cv[HalvingGridSearchCV(cv=2,error_score='raise',estimator=Pipeline(steps=[('pca',PCA()),('ridge',Ridge())]),min_resources='smallest',param_grid={'ridge__alpha':[0.1,1.0]},random_state=0)-check_regressor_data_not_an_array]"
  - "sklearn.tests.test_common::test_search_cv[HalvingGridSearchCV(cv=2,error_score='raise',estimator=Pipeline(steps=[('pca',PCA()),('ridge',Ridge())]),min_resources='smallest',param_grid={'ridge__alpha':[0.1,1.0]},random_state=0)-check_supervised_y_2d]"
  - "sklearn.tests.test_common::test_search_cv[HalvingGridSearchCV(cv=2,error_score='raise',estimator=Pipeline(steps=[('pca',PCA()),('ridge',Ridge())]),min_resources='smallest',param_grid={'ridge__alpha':[0.1,1.0]},random_state=0)-check_supervised_y_no_nan]"
  - "sklearn.tests.test_common::test_search_cv[HalvingGridSearchCV(cv=2,estimator=LogisticRegression(),min_resources='smallest',param_grid={'C':[0.1,1.0]},random_state=0)-check_classifier_data_not_an_array0]"
  - "sklearn.tests.test_common::test_search_cv[HalvingGridSearchCV(cv=2,estimator=LogisticRegression(),min_resources='smallest',param_grid={'C':[0.1,1.0]},random_state=0)-check_classifier_data_not_an_array1]"
  - "sklearn.tests.test_common::test_search_cv[HalvingGridSearchCV(cv=2,estimator=LogisticRegression(),min_resources='smallest',param_grid={'C':[0.1,1.0]},random_state=0)-check_classifiers_one_label0]"
  - "sklearn.tests.test_common::test_search_cv[HalvingGridSearchCV(cv=2,estimator=LogisticRegression(),min_resources='smallest',param_grid={'C':[0.1,1.0]},random_state=0)-check_classifiers_one_label1]"
  - "sklearn.tests.test_common::test_search_cv[HalvingGridSearchCV(cv=2,estimator=LogisticRegression(),min_resources='smallest',param_grid={'C':[0.1,1.0]},random_state=0)-check_dtype_object0]"
  - "sklearn.tests.test_common::test_search_cv[HalvingGridSearchCV(cv=2,estimator=LogisticRegression(),min_resources='smallest',param_grid={'C':[0.1,1.0]},random_state=0)-check_dtype_object1]"
  - "sklearn.tests.test_common::test_search_cv[HalvingGridSearchCV(cv=2,estimator=LogisticRegression(),min_resources='smallest',param_grid={'C':[0.1,1.0]},random_state=0)-check_estimators_empty_data_messages0]"
  - "sklearn.tests.test_common::test_search_cv[HalvingGridSearchCV(cv=2,estimator=LogisticRegression(),min_resources='smallest',param_grid={'C':[0.1,1.0]},random_state=0)-check_estimators_empty_data_messages1]"
  - "sklearn.tests.test_common::test_search_cv[HalvingGridSearchCV(cv=2,estimator=LogisticRegression(),min_resources='smallest',param_grid={'C':[0.1,1.0]},random_state=0)-check_estimators_nan_inf0]"
  - "sklearn.tests.test_common::test_search_cv[HalvingGridSearchCV(cv=2,estimator=LogisticRegression(),min_resources='smallest',param_grid={'C':[0.1,1.0]},random_state=0)-check_estimators_nan_inf1]"
  - "sklearn.tests.test_common::test_search_cv[HalvingGridSearchCV(cv=2,estimator=LogisticRegression(),min_resources='smallest',param_grid={'C':[0.1,1.0]},random_state=0)-check_fit1d0]"
  - "sklearn.tests.test_common::test_search_cv[HalvingGridSearchCV(cv=2,estimator=LogisticRegression(),min_resources='smallest',param_grid={'C':[0.1,1.0]},random_state=0)-check_fit1d1]"
  - "sklearn.tests.test_common::test_search_cv[HalvingGridSearchCV(cv=2,estimator=LogisticRegression(),min_resources='smallest',param_grid={'C':[0.1,1.0]},random_state=0)-check_fit2d_1sample0]"
  - "sklearn.tests.test_common::test_search_cv[HalvingGridSearchCV(cv=2,estimator=LogisticRegression(),min_resources='smallest',param_grid={'C':[0.1,1.0]},random_state=0)-check_fit2d_1sample1]"
  - "sklearn.tests.test_common::test_search_cv[HalvingGridSearchCV(cv=2,estimator=LogisticRegression(),min_resources='smallest',param_grid={'C':[0.1,1.0]},random_state=0)-check_fit2d_predict1d0]"
  - "sklearn.tests.test_common::test_search_cv[HalvingGridSearchCV(cv=2,estimator=LogisticRegression(),min_resources='smallest',param_grid={'C':[0.1,1.0]},random_state=0)-check_fit2d_predict1d1]"
  - "sklearn.tests.test_common::test_search_cv[HalvingGridSearchCV(cv=2,estimator=Ridge(),min_resources='smallest',param_grid={'alpha':[0.1,1.0]},random_state=0)-check_complex_data0]"
  - "sklearn.tests.test_common::test_search_cv[HalvingGridSearchCV(cv=2,estimator=Ridge(),min_resources='smallest',param_grid={'alpha':[0.1,1.0]},random_state=0)-check_complex_data1]"
  - "sklearn.tests.test_common::test_search_cv[HalvingGridSearchCV(cv=2,estimator=Ridge(),min_resources='smallest',param_grid={'alpha':[0.1,1.0]},random_state=0)-check_dtype_object0]"
  - "sklearn.tests.test_common::test_search_cv[HalvingGridSearchCV(cv=2,estimator=Ridge(),min_resources='smallest',param_grid={'alpha':[0.1,1.0]},random_state=0)-check_dtype_object1]"
  - "sklearn.tests.test_common::test_search_cv[HalvingGridSearchCV(cv=2,estimator=Ridge(),min_resources='smallest',param_grid={'alpha':[0.1,1.0]},random_state=0)-check_estimators_empty_data_messages0]"
  - "sklearn.tests.test_common::test_search_cv[HalvingGridSearchCV(cv=2,estimator=Ridge(),min_resources='smallest',param_grid={'alpha':[0.1,1.0]},random_state=0)-check_estimators_empty_data_messages1]"
  - "sklearn.tests.test_common::test_search_cv[HalvingGridSearchCV(cv=2,estimator=Ridge(),min_resources='smallest',param_grid={'alpha':[0.1,1.0]},random_state=0)-check_estimators_nan_inf0]"
  - "sklearn.tests.test_common::test_search_cv[HalvingGridSearchCV(cv=2,estimator=Ridge(),min_resources='smallest',param_grid={'alpha':[0.1,1.0]},random_state=0)-check_estimators_nan_inf1]"
  - "sklearn.tests.test_common::test_search_cv[HalvingGridSearchCV(cv=2,estimator=Ridge(),min_resources='smallest',param_grid={'alpha':[0.1,1.0]},random_state=0)-check_fit1d0]"
  - "sklearn.tests.test_common::test_search_cv[HalvingGridSearchCV(cv=2,estimator=Ridge(),min_resources='smallest',param_grid={'alpha':[0.1,1.0]},random_state=0)-check_fit1d1]"
  - "sklearn.tests.test_common::test_search_cv[HalvingGridSearchCV(cv=2,estimator=Ridge(),min_resources='smallest',param_grid={'alpha':[0.1,1.0]},random_state=0)-check_fit2d_1sample0]"
  - "sklearn.tests.test_common::test_search_cv[HalvingGridSearchCV(cv=2,estimator=Ridge(),min_resources='smallest',param_grid={'alpha':[0.1,1.0]},random_state=0)-check_fit2d_1sample1]"
  - "sklearn.tests.test_common::test_search_cv[HalvingGridSearchCV(cv=2,estimator=Ridge(),min_resources='smallest',param_grid={'alpha':[0.1,1.0]},random_state=0)-check_fit2d_predict1d0]"
  - "sklearn.tests.test_common::test_search_cv[HalvingGridSearchCV(cv=2,estimator=Ridge(),min_resources='smallest',param_grid={'alpha':[0.1,1.0]},random_state=0)-check_fit2d_predict1d1]"
  - "sklearn.tests.test_common::test_search_cv[HalvingGridSearchCV(cv=2,estimator=Ridge(),min_resources='smallest',param_grid={'alpha':[0.1,1.0]},random_state=0)-check_regressor_data_not_an_array0]"
  - "sklearn.tests.test_common::test_search_cv[HalvingGridSearchCV(cv=2,estimator=Ridge(),min_resources='smallest',param_grid={'alpha':[0.1,1.0]},random_state=0)-check_regressor_data_not_an_array1]"
  - "sklearn.tests.test_common::test_search_cv[HalvingGridSearchCV(cv=2,estimator=Ridge(),min_resources='smallest',param_grid={'alpha':[0.1,1.0]},random_state=0)-check_supervised_y_2d0]"
  - "sklearn.tests.test_common::test_search_cv[HalvingGridSearchCV(cv=2,estimator=Ridge(),min_resources='smallest',param_grid={'alpha':[0.1,1.0]},random_state=0)-check_supervised_y_2d1]"
  - "sklearn.tests.test_common::test_search_cv[HalvingGridSearchCV(cv=2,estimator=Ridge(),min_resources='smallest',param_grid={'alpha':[0.1,1.0]},random_state=0)-check_supervised_y_no_nan0]"
  - "sklearn.tests.test_common::test_search_cv[HalvingGridSearchCV(cv=2,estimator=Ridge(),min_resources='smallest',param_grid={'alpha':[0.1,1.0]},random_state=0)-check_supervised_y_no_nan1]"
  - "sklearn.tests.test_common::test_search_cv[HalvingRandomSearchCV(cv=2,error_score='raise',estimator=Pipeline(steps=[('pca',PCA()),('logisticregression',LogisticRegression())]),param_distributions={'logisticregression__C':[0.1,1.0]},random_state=0)-check_classifier_data_not_an_array]"
  - "sklearn.tests.test_common::test_search_cv[HalvingRandomSearchCV(cv=2,error_score='raise',estimator=Pipeline(steps=[('pca',PCA()),('logisticregression',LogisticRegression())]),param_distributions={'logisticregression__C':[0.1,1.0]},random_state=0)-check_classifiers_one_label]"
  - "sklearn.tests.test_common::test_search_cv[HalvingRandomSearchCV(cv=2,error_score='raise',estimator=Pipeline(steps=[('pca',PCA()),('logisticregression',LogisticRegression())]),param_distributions={'logisticregression__C':[0.1,1.0]},random_state=0)-check_dtype_object]"
  - "sklearn.tests.test_common::test_search_cv[HalvingRandomSearchCV(cv=2,error_score='raise',estimator=Pipeline(steps=[('pca',PCA()),('logisticregression',LogisticRegression())]),param_distributions={'logisticregression__C':[0.1,1.0]},random_state=0)-check_estimators_empty_data_messages]"
  - "sklearn.tests.test_common::test_search_cv[HalvingRandomSearchCV(cv=2,error_score='raise',estimator=Pipeline(steps=[('pca',PCA()),('logisticregression',LogisticRegression())]),param_distributions={'logisticregression__C':[0.1,1.0]},random_state=0)-check_estimators_nan_inf]"
  - "sklearn.tests.test_common::test_search_cv[HalvingRandomSearchCV(cv=2,error_score='raise',estimator=Pipeline(steps=[('pca',PCA()),('logisticregression',LogisticRegression())]),param_distributions={'logisticregression__C':[0.1,1.0]},random_state=0)-check_fit1d]"
  - "sklearn.tests.test_common::test_search_cv[HalvingRandomSearchCV(cv=2,error_score='raise',estimator=Pipeline(steps=[('pca',PCA()),('logisticregression',LogisticRegression())]),param_distributions={'logisticregression__C':[0.1,1.0]},random_state=0)-check_fit2d_1feature]"
  - "sklearn.tests.test_common::test_search_cv[HalvingRandomSearchCV(cv=2,error_score='raise',estimator=Pipeline(steps=[('pca',PCA()),('logisticregression',LogisticRegression())]),param_distributions={'logisticregression__C':[0.1,1.0]},random_state=0)-check_fit2d_1sample]"
  - "sklearn.tests.test_common::test_search_cv[HalvingRandomSearchCV(cv=2,error_score='raise',estimator=Pipeline(steps=[('pca',PCA()),('logisticregression',LogisticRegression())]),param_distributions={'logisticregression__C':[0.1,1.0]},random_state=0)-check_fit2d_predict1d]"
  - "sklearn.tests.test_common::test_search_cv[HalvingRandomSearchCV(cv=2,error_score='raise',estimator=Pipeline(steps=[('pca',PCA()),('ridge',Ridge())]),param_distributions={'ridge__alpha':[0.1,1.0]},random_state=0)-check_complex_data]"
  - "sklearn.tests.test_common::test_search_cv[HalvingRandomSearchCV(cv=2,error_score='raise',estimator=Pipeline(steps=[('pca',PCA()),('ridge',Ridge())]),param_distributions={'ridge__alpha':[0.1,1.0]},random_state=0)-check_dtype_object]"
  - "sklearn.tests.test_common::test_search_cv[HalvingRandomSearchCV(cv=2,error_score='raise',estimator=Pipeline(steps=[('pca',PCA()),('ridge',Ridge())]),param_distributions={'ridge__alpha':[0.1,1.0]},random_state=0)-check_estimators_empty_data_messages]"
  - "sklearn.tests.test_common::test_search_cv[HalvingRandomSearchCV(cv=2,error_score='raise',estimator=Pipeline(steps=[('pca',PCA()),('ridge',Ridge())]),param_distributions={'ridge__alpha':[0.1,1.0]},random_state=0)-check_estimators_fit_returns_self(readonly_memmap=True)]"
  - "sklearn.tests.test_common::test_search_cv[HalvingRandomSearchCV(cv=2,error_score='raise',estimator=Pipeline(steps=[('pca',PCA()),('ridge',Ridge())]),param_distributions={'ridge__alpha':[0.1,1.0]},random_state=0)-check_estimators_fit_returns_self]"
  - "sklearn.tests.test_common::test_search_cv[HalvingRandomSearchCV(cv=2,error_score='raise',estimator=Pipeline(steps=[('pca',PCA()),('ridge',Ridge())]),param_distributions={'ridge__alpha':[0.1,1.0]},random_state=0)-check_estimators_nan_inf]"
  - "sklearn.tests.test_common::test_search_cv[HalvingRandomSearchCV(cv=2,error_score='raise',estimator=Pipeline(steps=[('pca',PCA()),('ridge',Ridge())]),param_distributions={'ridge__alpha':[0.1,1.0]},random_state=0)-check_estimators_overwrite_params]"
  - "sklearn.tests.test_common::test_search_cv[HalvingRandomSearchCV(cv=2,error_score='raise',estimator=Pipeline(steps=[('pca',PCA()),('ridge',Ridge())]),param_distributions={'ridge__alpha':[0.1,1.0]},random_state=0)-check_fit1d]"
  - "sklearn.tests.test_common::test_search_cv[HalvingRandomSearchCV(cv=2,error_score='raise',estimator=Pipeline(steps=[('pca',PCA()),('ridge',Ridge())]),param_distributions={'ridge__alpha':[0.1,1.0]},random_state=0)-check_fit2d_1feature]"
  - "sklearn.tests.test_common::test_search_cv[HalvingRandomSearchCV(cv=2,error_score='raise',estimator=Pipeline(steps=[('pca',PCA()),('ridge',Ridge())]),param_distributions={'ridge__alpha':[0.1,1.0]},random_state=0)-check_fit2d_1sample]"
  - "sklearn.tests.test_common::test_search_cv[HalvingRandomSearchCV(cv=2,error_score='raise',estimator=Pipeline(steps=[('pca',PCA()),('ridge',Ridge())]),param_distributions={'ridge__alpha':[0.1,1.0]},random_state=0)-check_fit2d_predict1d]"
  - "sklearn.tests.test_common::test_search_cv[HalvingRandomSearchCV(cv=2,error_score='raise',estimator=Pipeline(steps=[('pca',PCA()),('ridge',Ridge())]),param_distributions={'ridge__alpha':[0.1,1.0]},random_state=0)-check_regressor_data_not_an_array]"
  - "sklearn.tests.test_common::test_search_cv[HalvingRandomSearchCV(cv=2,error_score='raise',estimator=Pipeline(steps=[('pca',PCA()),('ridge',Ridge())]),param_distributions={'ridge__alpha':[0.1,1.0]},random_state=0)-check_supervised_y_2d]"
  - "sklearn.tests.test_common::test_search_cv[HalvingRandomSearchCV(cv=2,error_score='raise',estimator=Pipeline(steps=[('pca',PCA()),('ridge',Ridge())]),param_distributions={'ridge__alpha':[0.1,1.0]},random_state=0)-check_supervised_y_no_nan]"
  - "sklearn.tests.test_common::test_search_cv[RandomizedSearchCV(cv=2,error_score='raise',estimator=Pipeline(steps=[('pca',PCA()),('logisticregression',LogisticRegression())]),param_distributions={'logisticregression__C':[0.1,1.0]},random_state=0)-check_classifier_data_not_an_array]"
  - "sklearn.tests.test_common::test_search_cv[RandomizedSearchCV(cv=2,error_score='raise',estimator=Pipeline(steps=[('pca',PCA()),('logisticregression',LogisticRegression())]),param_distributions={'logisticregression__C':[0.1,1.0]},random_state=0)-check_classifiers_one_label]"
  - "sklearn.tests.test_common::test_search_cv[RandomizedSearchCV(cv=2,error_score='raise',estimator=Pipeline(steps=[('pca',PCA()),('logisticregression',LogisticRegression())]),param_distributions={'logisticregression__C':[0.1,1.0]},random_state=0)-check_classifiers_regression_target]"
  - "sklearn.tests.test_common::test_search_cv[RandomizedSearchCV(cv=2,error_score='raise',estimator=Pipeline(steps=[('pca',PCA()),('logisticregression',LogisticRegression())]),param_distributions={'logisticregression__C':[0.1,1.0]},random_state=0)-check_dtype_object]"
  - "sklearn.tests.test_common::test_search_cv[RandomizedSearchCV(cv=2,error_score='raise',estimator=Pipeline(steps=[('pca',PCA()),('logisticregression',LogisticRegression())]),param_distributions={'logisticregression__C':[0.1,1.0]},random_state=0)-check_estimators_empty_data_messages]"
  - "sklearn.tests.test_common::test_search_cv[RandomizedSearchCV(cv=2,error_score='raise',estimator=Pipeline(steps=[('pca',PCA()),('logisticregression',LogisticRegression())]),param_distributions={'logisticregression__C':[0.1,1.0]},random_state=0)-check_estimators_nan_inf]"
  - "sklearn.tests.test_common::test_search_cv[RandomizedSearchCV(cv=2,error_score='raise',estimator=Pipeline(steps=[('pca',PCA()),('logisticregression',LogisticRegression())]),param_distributions={'logisticregression__C':[0.1,1.0]},random_state=0)-check_fit1d]"
  - "sklearn.tests.test_common::test_search_cv[RandomizedSearchCV(cv=2,error_score='raise',estimator=Pipeline(steps=[('pca',PCA()),('logisticregression',LogisticRegression())]),param_distributions={'logisticregression__C':[0.1,1.0]},random_state=0)-check_fit2d_1feature]"
  - "sklearn.tests.test_common::test_search_cv[RandomizedSearchCV(cv=2,error_score='raise',estimator=Pipeline(steps=[('pca',PCA()),('logisticregression',LogisticRegression())]),param_distributions={'logisticregression__C':[0.1,1.0]},random_state=0)-check_fit2d_predict1d]"
  - "sklearn.tests.test_common::test_search_cv[RandomizedSearchCV(cv=2,error_score='raise',estimator=Pipeline(steps=[('pca',PCA()),('logisticregression',LogisticRegression())]),param_distributions={'logisticregression__C':[0.1,1.0]},random_state=0)-check_supervised_y_2d]"
  - "sklearn.tests.test_common::test_search_cv[RandomizedSearchCV(cv=2,error_score='raise',estimator=Pipeline(steps=[('pca',PCA()),('ridge',Ridge())]),param_distributions={'ridge__alpha':[0.1,1.0]},random_state=0)-check_complex_data]"
  - "sklearn.tests.test_common::test_search_cv[RandomizedSearchCV(cv=2,error_score='raise',estimator=Pipeline(steps=[('pca',PCA()),('ridge',Ridge())]),param_distributions={'ridge__alpha':[0.1,1.0]},random_state=0)-check_dtype_object]"
  - "sklearn.tests.test_common::test_search_cv[RandomizedSearchCV(cv=2,error_score='raise',estimator=Pipeline(steps=[('pca',PCA()),('ridge',Ridge())]),param_distributions={'ridge__alpha':[0.1,1.0]},random_state=0)-check_estimators_empty_data_messages]"
  - "sklearn.tests.test_common::test_search_cv[RandomizedSearchCV(cv=2,error_score='raise',estimator=Pipeline(steps=[('pca',PCA()),('ridge',Ridge())]),param_distributions={'ridge__alpha':[0.1,1.0]},random_state=0)-check_estimators_nan_inf]"
  - "sklearn.tests.test_common::test_search_cv[RandomizedSearchCV(cv=2,error_score='raise',estimator=Pipeline(steps=[('pca',PCA()),('ridge',Ridge())]),param_distributions={'ridge__alpha':[0.1,1.0]},random_state=0)-check_fit1d]"
  - "sklearn.tests.test_common::test_search_cv[RandomizedSearchCV(cv=2,error_score='raise',estimator=Pipeline(steps=[('pca',PCA()),('ridge',Ridge())]),param_distributions={'ridge__alpha':[0.1,1.0]},random_state=0)-check_fit2d_1feature]"
  - "sklearn.tests.test_common::test_search_cv[RandomizedSearchCV(cv=2,error_score='raise',estimator=Pipeline(steps=[('pca',PCA()),('ridge',Ridge())]),param_distributions={'ridge__alpha':[0.1,1.0]},random_state=0)-check_fit2d_predict1d]"
  - "sklearn.tests.test_common::test_search_cv[RandomizedSearchCV(cv=2,error_score='raise',estimator=Pipeline(steps=[('pca',PCA()),('ridge',Ridge())]),param_distributions={'ridge__alpha':[0.1,1.0]},random_state=0)-check_regressor_data_not_an_array]"
  - "sklearn.tests.test_common::test_search_cv[RandomizedSearchCV(cv=2,error_score='raise',estimator=Pipeline(steps=[('pca',PCA()),('ridge',Ridge())]),param_distributions={'ridge__alpha':[0.1,1.0]},random_state=0)-check_supervised_y_2d]"
  - "sklearn.tests.test_common::test_search_cv[RandomizedSearchCV(cv=2,error_score='raise',estimator=Pipeline(steps=[('pca',PCA()),('ridge',Ridge())]),param_distributions={'ridge__alpha':[0.1,1.0]},random_state=0)-check_supervised_y_no_nan]"
  - "sklearn.tests.test_common::test_search_cv[RandomizedSearchCV(cv=2,estimator=LogisticRegression(),param_distributions={'C':[0.1,1.0]},random_state=0)-check_classifier_data_not_an_array]"
  - "sklearn.tests.test_common::test_search_cv[RandomizedSearchCV(cv=2,estimator=LogisticRegression(),param_distributions={'C':[0.1,1.0]},random_state=0)-check_classifiers_one_label]"
  - "sklearn.tests.test_common::test_search_cv[RandomizedSearchCV(cv=2,estimator=LogisticRegression(),param_distributions={'C':[0.1,1.0]},random_state=0)-check_classifiers_regression_target]"
  - "sklearn.tests.test_common::test_search_cv[RandomizedSearchCV(cv=2,estimator=LogisticRegression(),param_distributions={'C':[0.1,1.0]},random_state=0)-check_dtype_object]"
  - "sklearn.tests.test_common::test_search_cv[RandomizedSearchCV(cv=2,estimator=LogisticRegression(),param_distributions={'C':[0.1,1.0]},random_state=0)-check_estimators_empty_data_messages]"
  - "sklearn.tests.test_common::test_search_cv[RandomizedSearchCV(cv=2,estimator=LogisticRegression(),param_distributions={'C':[0.1,1.0]},random_state=0)-check_estimators_nan_inf]"
  - "sklearn.tests.test_common::test_search_cv[RandomizedSearchCV(cv=2,estimator=LogisticRegression(),param_distributions={'C':[0.1,1.0]},random_state=0)-check_fit1d]"
  - "sklearn.tests.test_common::test_search_cv[RandomizedSearchCV(cv=2,estimator=LogisticRegression(),param_distributions={'C':[0.1,1.0]},random_state=0)-check_fit2d_predict1d]"
  - "sklearn.tests.test_common::test_search_cv[RandomizedSearchCV(cv=2,estimator=LogisticRegression(),param_distributions={'C':[0.1,1.0]},random_state=0)-check_supervised_y_2d]"
  - "sklearn.tests.test_common::test_search_cv[RandomizedSearchCV(cv=2,estimator=Ridge(),param_distributions={'alpha':[0.1,1.0]},random_state=0)-check_complex_data]"
  - "sklearn.tests.test_common::test_search_cv[RandomizedSearchCV(cv=2,estimator=Ridge(),param_distributions={'alpha':[0.1,1.0]},random_state=0)-check_dtype_object]"
  - "sklearn.tests.test_common::test_search_cv[RandomizedSearchCV(cv=2,estimator=Ridge(),param_distributions={'alpha':[0.1,1.0]},random_state=0)-check_estimators_empty_data_messages]"
  - "sklearn.tests.test_common::test_search_cv[RandomizedSearchCV(cv=2,estimator=Ridge(),param_distributions={'alpha':[0.1,1.0]},random_state=0)-check_estimators_nan_inf]"
  - "sklearn.tests.test_common::test_search_cv[RandomizedSearchCV(cv=2,estimator=Ridge(),param_distributions={'alpha':[0.1,1.0]},random_state=0)-check_fit1d]"
  - "sklearn.tests.test_common::test_search_cv[RandomizedSearchCV(cv=2,estimator=Ridge(),param_distributions={'alpha':[0.1,1.0]},random_state=0)-check_fit2d_predict1d]"
  - "sklearn.tests.test_common::test_search_cv[RandomizedSearchCV(cv=2,estimator=Ridge(),param_distributions={'alpha':[0.1,1.0]},random_state=0)-check_regressor_data_not_an_array]"
  - "sklearn.tests.test_common::test_search_cv[RandomizedSearchCV(cv=2,estimator=Ridge(),param_distributions={'alpha':[0.1,1.0]},random_state=0)-check_supervised_y_2d]"
  - "sklearn.tests.test_common::test_search_cv[RandomizedSearchCV(cv=2,estimator=Ridge(),param_distributions={'alpha':[0.1,1.0]},random_state=0)-check_supervised_y_no_nan]"
- reason: Test should fail with cuml.accel (scikit-learn 1.6+)
  marker: cuml_accel_bugs
  condition: scikit-learn>=1.6
  tests:
  - "sklearn.decomposition.tests.test_incremental_pca::test_incremental_pca_partial_fit_small_batch"
  - "sklearn.linear_model.tests.test_base::test_linear_regression_sample_weight_consistency[42-False-None-X_shape0]"
  - "sklearn.linear_model.tests.test_base::test_linear_regression_sample_weight_consistency[42-False-None-X_shape1]"
  - "sklearn.linear_model.tests.test_base::test_linear_regression_sample_weight_consistency[42-False-None-X_shape2]"
  - "sklearn.linear_model.tests.test_base::test_linear_regression_sample_weight_consistency[42-True-None-X_shape0]"
  - "sklearn.linear_model.tests.test_base::test_linear_regression_sample_weight_consistency[42-True-None-X_shape1]"
  - "sklearn.linear_model.tests.test_base::test_linear_regression_sample_weight_consistency[42-True-None-X_shape2]"
  - "sklearn.linear_model.tests.test_ridge::test_ridge_regression[42-wide-False-svd]"
  - "sklearn.linear_model.tests.test_ridge::test_ridge_regression[42-wide-True-svd]"
  - "sklearn.linear_model.tests.test_ridge::test_ridge_regression_hstacked_X[42-wide-False-svd]"
  - "sklearn.linear_model.tests.test_ridge::test_ridge_regression_hstacked_X[42-wide-True-svd]"
  - "sklearn.linear_model.tests.test_ridge::test_ridge_regression_sample_weights[42-wide-0.01-None-False-svd]"
  - "sklearn.linear_model.tests.test_ridge::test_ridge_regression_sample_weights[42-wide-0.01-None-True-svd]"
  - "sklearn.linear_model.tests.test_ridge::test_ridge_regression_sample_weights[42-wide-1.0-None-False-svd]"
  - "sklearn.linear_model.tests.test_ridge::test_ridge_regression_sample_weights[42-wide-1.0-None-True-svd]"
  - "sklearn.linear_model.tests.test_ridge::test_ridge_regression_unpenalized[42-wide-False-svd]"
  - "sklearn.linear_model.tests.test_ridge::test_ridge_regression_unpenalized[42-wide-True-svd]"
  - "sklearn.linear_model.tests.test_ridge::test_ridge_regression_unpenalized_hstacked_X[42-wide-False-svd]"
  - "sklearn.linear_model.tests.test_ridge::test_ridge_regression_unpenalized_hstacked_X[42-wide-True-svd]"
  - "sklearn.linear_model.tests.test_ridge::test_ridge_regression_unpenalized_vstacked_X[42-wide-False-svd]"
  - "sklearn.linear_model.tests.test_ridge::test_ridge_regression_unpenalized_vstacked_X[42-wide-True-cholesky]"
  - "sklearn.linear_model.tests.test_ridge::test_ridge_regression_unpenalized_vstacked_X[42-wide-True-lsqr]"
  - "sklearn.linear_model.tests.test_ridge::test_ridge_regression_unpenalized_vstacked_X[42-wide-True-sag]"
  - "sklearn.linear_model.tests.test_ridge::test_ridge_regression_unpenalized_vstacked_X[42-wide-True-saga]"
  - "sklearn.linear_model.tests.test_ridge::test_ridge_regression_unpenalized_vstacked_X[42-wide-True-sparse_cg]"
  - "sklearn.linear_model.tests.test_ridge::test_ridge_regression_unpenalized_vstacked_X[42-wide-True-svd]"
  - "sklearn.linear_model.tests.test_ridge::test_ridge_regression_vstacked_X[42-wide-False-svd]"
  - "sklearn.linear_model.tests.test_ridge::test_ridge_regression_vstacked_X[42-wide-True-svd]"
  - "sklearn.neighbors.tests.test_neighbors::test_neighbor_classifiers_loocv[auto-nn_model0]"
  - "sklearn.neighbors.tests.test_neighbors::test_neighbor_classifiers_loocv[ball_tree-nn_model0]"
  - "sklearn.neighbors.tests.test_neighbors::test_neighbor_classifiers_loocv[brute-nn_model0]"
  - "sklearn.neighbors.tests.test_neighbors::test_neighbor_classifiers_loocv[kd_tree-nn_model0]"
  - "sklearn.semi_supervised.tests.test_self_training::test_classification[k_best-estimator0]"
  - "sklearn.semi_supervised.tests.test_self_training::test_classification[threshold-estimator0]"
  - "sklearn.semi_supervised.tests.test_self_training::test_zero_iterations[y1-estimator0]"
  - "sklearn.tests.test_common::test_estimators[LogisticRegression()-check_estimator_sparse_tag]"
  - "sklearn.tests.test_common::test_estimators[LogisticRegression()-check_non_transformer_estimators_n_iter]"
  - "sklearn.tests.test_common::test_estimators[LogisticRegression()-check_sample_weight_equivalence_on_dense_data]"
  - "sklearn.tests.test_common::test_estimators[LogisticRegression()-check_sample_weight_equivalence_on_sparse_data]"
  - "sklearn.tests.test_common::test_estimators[Ridge()-check_non_transformer_estimators_n_iter]"
  - "sklearn.utils.tests.test_estimator_checks::test_check_estimator_pairwise"
- reason: Test should fail with cuml.accel (scikit-learn 1.7)
  marker: cuml_accel_bugs
  condition: scikit-learn == 1.7.*
  tests:
  - "sklearn.linear_model.tests.test_ridge::test_solver_consistency[42-20-float32-0.1-cholesky-None]"
  - "sklearn.linear_model.tests.test_ridge::test_solver_consistency[42-20-float32-0.1-lsqr-None]"
  - "sklearn.linear_model.tests.test_ridge::test_solver_consistency[42-20-float32-0.1-ridgecv-None]"
  - "sklearn.linear_model.tests.test_ridge::test_solver_consistency[42-20-float32-0.1-ridgecv-csr_array]"
  - "sklearn.linear_model.tests.test_ridge::test_solver_consistency[42-20-float32-0.1-ridgecv-csr_matrix]"
  - "sklearn.linear_model.tests.test_ridge::test_solver_consistency[42-20-float32-0.1-sag-None]"
  - "sklearn.linear_model.tests.test_ridge::test_solver_consistency[42-20-float32-0.1-saga-None]"
  - "sklearn.linear_model.tests.test_ridge::test_solver_consistency[42-20-float32-0.1-sparse_cg-None]"
  - "sklearn.linear_model.tests.test_ridge::test_solver_consistency[42-20-float32-0.1-sparse_cg-csr_array]"
  - "sklearn.linear_model.tests.test_ridge::test_solver_consistency[42-20-float32-0.1-sparse_cg-csr_matrix]"
  - "sklearn.linear_model.tests.test_ridge::test_solver_consistency[42-20-float64-0.2-cholesky-None]"
  - "sklearn.linear_model.tests.test_ridge::test_solver_consistency[42-20-float64-0.2-lsqr-None]"
  - "sklearn.linear_model.tests.test_ridge::test_solver_consistency[42-20-float64-0.2-ridgecv-None]"
  - "sklearn.linear_model.tests.test_ridge::test_solver_consistency[42-20-float64-0.2-ridgecv-csr_array]"
  - "sklearn.linear_model.tests.test_ridge::test_solver_consistency[42-20-float64-0.2-ridgecv-csr_matrix]"
  - "sklearn.linear_model.tests.test_ridge::test_solver_consistency[42-20-float64-0.2-sag-None]"
  - "sklearn.linear_model.tests.test_ridge::test_solver_consistency[42-20-float64-0.2-saga-None]"
  - "sklearn.linear_model.tests.test_ridge::test_solver_consistency[42-20-float64-0.2-sparse_cg-None]"
  - "sklearn.linear_model.tests.test_ridge::test_solver_consistency[42-20-float64-0.2-sparse_cg-csr_array]"
  - "sklearn.linear_model.tests.test_ridge::test_solver_consistency[42-20-float64-0.2-sparse_cg-csr_matrix]"
  - "sklearn.metrics._plot.tests.test_roc_curve_display::test_roc_curve_display_plotting_from_cv_results[False-False-decision_function-False-None]"
  - "sklearn.metrics._plot.tests.test_roc_curve_display::test_roc_curve_display_plotting_from_cv_results[False-False-decision_function-False-curve_kwargs1]"
  - "sklearn.metrics._plot.tests.test_roc_curve_display::test_roc_curve_display_plotting_from_cv_results[False-False-decision_function-True-None]"
  - "sklearn.metrics._plot.tests.test_roc_curve_display::test_roc_curve_display_plotting_from_cv_results[False-False-decision_function-True-curve_kwargs1]"
  - "sklearn.metrics._plot.tests.test_roc_curve_display::test_roc_curve_display_plotting_from_cv_results[False-False-predict_proba-False-None]"
  - "sklearn.metrics._plot.tests.test_roc_curve_display::test_roc_curve_display_plotting_from_cv_results[False-False-predict_proba-False-curve_kwargs1]"
  - "sklearn.metrics._plot.tests.test_roc_curve_display::test_roc_curve_display_plotting_from_cv_results[False-False-predict_proba-True-None]"
  - "sklearn.metrics._plot.tests.test_roc_curve_display::test_roc_curve_display_plotting_from_cv_results[False-False-predict_proba-True-curve_kwargs1]"
  - "sklearn.metrics._plot.tests.test_roc_curve_display::test_roc_curve_display_plotting_from_cv_results[True-False-decision_function-False-None]"
  - "sklearn.metrics._plot.tests.test_roc_curve_display::test_roc_curve_display_plotting_from_cv_results[True-False-decision_function-False-curve_kwargs1]"
  - "sklearn.metrics._plot.tests.test_roc_curve_display::test_roc_curve_display_plotting_from_cv_results[True-False-decision_function-True-None]"
  - "sklearn.metrics._plot.tests.test_roc_curve_display::test_roc_curve_display_plotting_from_cv_results[True-False-decision_function-True-curve_kwargs1]"
  - "sklearn.metrics._plot.tests.test_roc_curve_display::test_roc_curve_display_plotting_from_cv_results[True-False-predict_proba-False-None]"
  - "sklearn.metrics._plot.tests.test_roc_curve_display::test_roc_curve_display_plotting_from_cv_results[True-False-predict_proba-False-curve_kwargs1]"
  - "sklearn.metrics._plot.tests.test_roc_curve_display::test_roc_curve_display_plotting_from_cv_results[True-False-predict_proba-True-None]"
  - "sklearn.metrics._plot.tests.test_roc_curve_display::test_roc_curve_display_plotting_from_cv_results[True-False-predict_proba-True-curve_kwargs1]"
  - "sklearn.metrics._plot.tests.test_roc_curve_display::test_roc_curve_from_cv_results_legend_label[None-None]"
  - "sklearn.metrics._plot.tests.test_roc_curve_display::test_roc_curve_from_cv_results_legend_label[None-curve_kwargs1]"
  - "sklearn.metrics._plot.tests.test_roc_curve_display::test_roc_curve_from_cv_results_legend_label[single-None]"
  - "sklearn.metrics._plot.tests.test_roc_curve_display::test_roc_curve_from_cv_results_legend_label[single-curve_kwargs1]"
  - "sklearn.model_selection.tests.test_search::test_search_cv_sample_weight_equivalence[estimator0]"
- reason: Test should fail with cuml.accel (scikit-learn <1.7)
  marker: cuml_accel_bugs
  condition: scikit-learn<1.7
  tests:
  - "sklearn.linear_model.tests.test_ridge::test_solver_consistency[seed0-20-float32-0.1-cholesky-None]"
  - "sklearn.linear_model.tests.test_ridge::test_solver_consistency[seed0-20-float32-0.1-lsqr-None]"
  - "sklearn.linear_model.tests.test_ridge::test_solver_consistency[seed0-20-float32-0.1-ridgecv-None]"
  - "sklearn.linear_model.tests.test_ridge::test_solver_consistency[seed0-20-float32-0.1-ridgecv-csr_array]"
  - "sklearn.linear_model.tests.test_ridge::test_solver_consistency[seed0-20-float32-0.1-ridgecv-csr_matrix]"
  - "sklearn.linear_model.tests.test_ridge::test_solver_consistency[seed0-20-float32-0.1-sag-None]"
  - "sklearn.linear_model.tests.test_ridge::test_solver_consistency[seed0-20-float32-0.1-saga-None]"
  - "sklearn.linear_model.tests.test_ridge::test_solver_consistency[seed0-20-float32-0.1-sparse_cg-None]"
  - "sklearn.linear_model.tests.test_ridge::test_solver_consistency[seed0-20-float32-0.1-sparse_cg-csr_array]"
  - "sklearn.linear_model.tests.test_ridge::test_solver_consistency[seed0-20-float32-0.1-sparse_cg-csr_matrix]"
  - "sklearn.linear_model.tests.test_ridge::test_solver_consistency[seed0-20-float64-0.2-cholesky-None]"
  - "sklearn.linear_model.tests.test_ridge::test_solver_consistency[seed0-20-float64-0.2-lsqr-None]"
  - "sklearn.linear_model.tests.test_ridge::test_solver_consistency[seed0-20-float64-0.2-ridgecv-None]"
  - "sklearn.linear_model.tests.test_ridge::test_solver_consistency[seed0-20-float64-0.2-ridgecv-csr_array]"
  - "sklearn.linear_model.tests.test_ridge::test_solver_consistency[seed0-20-float64-0.2-ridgecv-csr_matrix]"
  - "sklearn.linear_model.tests.test_ridge::test_solver_consistency[seed0-20-float64-0.2-sag-None]"
  - "sklearn.linear_model.tests.test_ridge::test_solver_consistency[seed0-20-float64-0.2-saga-None]"
  - "sklearn.linear_model.tests.test_ridge::test_solver_consistency[seed0-20-float64-0.2-sparse_cg-None]"
  - "sklearn.linear_model.tests.test_ridge::test_solver_consistency[seed0-20-float64-0.2-sparse_cg-csr_array]"
  - "sklearn.linear_model.tests.test_ridge::test_solver_consistency[seed0-20-float64-0.2-sparse_cg-csr_matrix]"
  - "sklearn.linear_model.tests.test_ridge::test_solver_consistency[seed1-20-float32-0.1-cholesky-None]"
  - "sklearn.linear_model.tests.test_ridge::test_solver_consistency[seed1-20-float32-0.1-lsqr-None]"
  - "sklearn.linear_model.tests.test_ridge::test_solver_consistency[seed1-20-float32-0.1-ridgecv-None]"
  - "sklearn.linear_model.tests.test_ridge::test_solver_consistency[seed1-20-float32-0.1-ridgecv-csr_array]"
  - "sklearn.linear_model.tests.test_ridge::test_solver_consistency[seed1-20-float32-0.1-ridgecv-csr_matrix]"
  - "sklearn.linear_model.tests.test_ridge::test_solver_consistency[seed1-20-float32-0.1-sag-None]"
  - "sklearn.linear_model.tests.test_ridge::test_solver_consistency[seed1-20-float32-0.1-saga-None]"
  - "sklearn.linear_model.tests.test_ridge::test_solver_consistency[seed1-20-float32-0.1-sparse_cg-None]"
  - "sklearn.linear_model.tests.test_ridge::test_solver_consistency[seed1-20-float32-0.1-sparse_cg-csr_array]"
  - "sklearn.linear_model.tests.test_ridge::test_solver_consistency[seed1-20-float32-0.1-sparse_cg-csr_matrix]"
  - "sklearn.linear_model.tests.test_ridge::test_solver_consistency[seed1-20-float64-0.2-cholesky-None]"
  - "sklearn.linear_model.tests.test_ridge::test_solver_consistency[seed1-20-float64-0.2-lsqr-None]"
  - "sklearn.linear_model.tests.test_ridge::test_solver_consistency[seed1-20-float64-0.2-ridgecv-None]"
  - "sklearn.linear_model.tests.test_ridge::test_solver_consistency[seed1-20-float64-0.2-ridgecv-csr_array]"
  - "sklearn.linear_model.tests.test_ridge::test_solver_consistency[seed1-20-float64-0.2-ridgecv-csr_matrix]"
  - "sklearn.linear_model.tests.test_ridge::test_solver_consistency[seed1-20-float64-0.2-sag-None]"
  - "sklearn.linear_model.tests.test_ridge::test_solver_consistency[seed1-20-float64-0.2-saga-None]"
  - "sklearn.linear_model.tests.test_ridge::test_solver_consistency[seed1-20-float64-0.2-sparse_cg-None]"
  - "sklearn.linear_model.tests.test_ridge::test_solver_consistency[seed1-20-float64-0.2-sparse_cg-csr_array]"
  - "sklearn.linear_model.tests.test_ridge::test_solver_consistency[seed1-20-float64-0.2-sparse_cg-csr_matrix]"
  - "sklearn.linear_model.tests.test_ridge::test_solver_consistency[seed2-20-float32-0.1-cholesky-None]"
  - "sklearn.linear_model.tests.test_ridge::test_solver_consistency[seed2-20-float32-0.1-lsqr-None]"
  - "sklearn.linear_model.tests.test_ridge::test_solver_consistency[seed2-20-float32-0.1-ridgecv-None]"
  - "sklearn.linear_model.tests.test_ridge::test_solver_consistency[seed2-20-float32-0.1-ridgecv-csr_array]"
  - "sklearn.linear_model.tests.test_ridge::test_solver_consistency[seed2-20-float32-0.1-ridgecv-csr_matrix]"
  - "sklearn.linear_model.tests.test_ridge::test_solver_consistency[seed2-20-float32-0.1-sag-None]"
  - "sklearn.linear_model.tests.test_ridge::test_solver_consistency[seed2-20-float32-0.1-saga-None]"
  - "sklearn.linear_model.tests.test_ridge::test_solver_consistency[seed2-20-float32-0.1-sparse_cg-None]"
  - "sklearn.linear_model.tests.test_ridge::test_solver_consistency[seed2-20-float32-0.1-sparse_cg-csr_array]"
  - "sklearn.linear_model.tests.test_ridge::test_solver_consistency[seed2-20-float32-0.1-sparse_cg-csr_matrix]"
  - "sklearn.linear_model.tests.test_ridge::test_solver_consistency[seed2-20-float64-0.2-cholesky-None]"
  - "sklearn.linear_model.tests.test_ridge::test_solver_consistency[seed2-20-float64-0.2-lsqr-None]"
  - "sklearn.linear_model.tests.test_ridge::test_solver_consistency[seed2-20-float64-0.2-ridgecv-None]"
  - "sklearn.linear_model.tests.test_ridge::test_solver_consistency[seed2-20-float64-0.2-ridgecv-csr_array]"
  - "sklearn.linear_model.tests.test_ridge::test_solver_consistency[seed2-20-float64-0.2-ridgecv-csr_matrix]"
  - "sklearn.linear_model.tests.test_ridge::test_solver_consistency[seed2-20-float64-0.2-sag-None]"
  - "sklearn.linear_model.tests.test_ridge::test_solver_consistency[seed2-20-float64-0.2-saga-None]"
  - "sklearn.linear_model.tests.test_ridge::test_solver_consistency[seed2-20-float64-0.2-sparse_cg-None]"
  - "sklearn.linear_model.tests.test_ridge::test_solver_consistency[seed2-20-float64-0.2-sparse_cg-csr_array]"
  - "sklearn.linear_model.tests.test_ridge::test_solver_consistency[seed2-20-float64-0.2-sparse_cg-csr_matrix]"
  - "sklearn.manifold.tests.test_t_sne::test_tnse_n_iter_deprecated"
  - "sklearn.manifold.tests.test_t_sne::test_tnse_n_iter_max_iter_both_set"
- reason: cuml raises a different error if X doesn't have expected n features
  marker: cuml_accel_check_n_features_in
  condition: scikit-learn<1.6
  tests:
  - "sklearn.tests.test_common::test_check_n_features_in_after_fitting[ElasticNet()]"
  - "sklearn.tests.test_common::test_check_n_features_in_after_fitting[KMeans()]"
  - "sklearn.tests.test_common::test_check_n_features_in_after_fitting[KNeighborsClassifier()]"
  - "sklearn.tests.test_common::test_check_n_features_in_after_fitting[KNeighborsRegressor()]"
  - "sklearn.tests.test_common::test_check_n_features_in_after_fitting[KernelRidge()]"
  - "sklearn.tests.test_common::test_check_n_features_in_after_fitting[Lasso()]"
  - "sklearn.tests.test_common::test_check_n_features_in_after_fitting[LinearRegression()]"
  - "sklearn.tests.test_common::test_check_n_features_in_after_fitting[LogisticRegression()]"
  - "sklearn.tests.test_common::test_check_n_features_in_after_fitting[PCA()]"
  - "sklearn.tests.test_common::test_check_n_features_in_after_fitting[RandomForestClassifier()]"
  - "sklearn.tests.test_common::test_check_n_features_in_after_fitting[RandomForestRegressor()]"
  - "sklearn.tests.test_common::test_check_n_features_in_after_fitting[Ridge()]"
  - "sklearn.tests.test_common::test_check_n_features_in_after_fitting[SVC()]"
  - "sklearn.tests.test_common::test_check_n_features_in_after_fitting[SVR()]"
  - "sklearn.tests.test_common::test_check_n_features_in_after_fitting[TruncatedSVD()]"
- reason: cuml raises a different error if X doesn't have expected n features
  marker: cuml_accel_check_n_features_in
  condition: scikit-learn>=1.6
  tests:
  - "sklearn.tests.test_common::test_estimators[ElasticNet()-check_n_features_in_after_fitting]"
  - "sklearn.tests.test_common::test_estimators[KMeans()-check_n_features_in_after_fitting]"
  - "sklearn.tests.test_common::test_estimators[KNeighborsClassifier()-check_n_features_in_after_fitting]"
  - "sklearn.tests.test_common::test_estimators[KNeighborsRegressor()-check_n_features_in_after_fitting]"
  - "sklearn.tests.test_common::test_estimators[KernelRidge()-check_n_features_in_after_fitting]"
  - "sklearn.tests.test_common::test_estimators[Lasso()-check_n_features_in_after_fitting]"
  - "sklearn.tests.test_common::test_estimators[LinearRegression()-check_n_features_in_after_fitting]"
  - "sklearn.tests.test_common::test_estimators[LogisticRegression()-check_n_features_in_after_fitting]"
  - "sklearn.tests.test_common::test_estimators[PCA()-check_n_features_in_after_fitting]"
  - "sklearn.tests.test_common::test_estimators[RandomForestClassifier()-check_n_features_in_after_fitting]"
  - "sklearn.tests.test_common::test_estimators[RandomForestRegressor()-check_n_features_in_after_fitting]"
  - "sklearn.tests.test_common::test_estimators[Ridge()-check_n_features_in_after_fitting]"
  - "sklearn.tests.test_common::test_estimators[SVC()-check_n_features_in_after_fitting]"
  - "sklearn.tests.test_common::test_estimators[SVR()-check_n_features_in_after_fitting]"
  - "sklearn.tests.test_common::test_estimators[TruncatedSVD()-check_n_features_in_after_fitting]"
- reason: Test crashes with cuml.accel
  marker: cuml_accel_crashes
  run: false
  tests:
  - "sklearn.tests.test_common::test_estimators[RandomForestClassifier()-check_classifiers_regression_target]"
- reason: cuml doesn't set `feature_names_in_` properly
  marker: cuml_accel_feature_names_in
  tests:
  - "sklearn.tests.test_common::test_pandas_column_name_consistency[DBSCAN()]"
  - "sklearn.tests.test_common::test_pandas_column_name_consistency[ElasticNet()]"
  - "sklearn.tests.test_common::test_pandas_column_name_consistency[KMeans()]"
  - "sklearn.tests.test_common::test_pandas_column_name_consistency[KNeighborsClassifier()]"
  - "sklearn.tests.test_common::test_pandas_column_name_consistency[KNeighborsRegressor()]"
  - "sklearn.tests.test_common::test_pandas_column_name_consistency[KernelRidge()]"
  - "sklearn.tests.test_common::test_pandas_column_name_consistency[Lasso()]"
  - "sklearn.tests.test_common::test_pandas_column_name_consistency[LinearRegression()]"
  - "sklearn.tests.test_common::test_pandas_column_name_consistency[LogisticRegression()]"
  - "sklearn.tests.test_common::test_pandas_column_name_consistency[NearestNeighbors()]"
  - "sklearn.tests.test_common::test_pandas_column_name_consistency[PCA()]"
  - "sklearn.tests.test_common::test_pandas_column_name_consistency[RandomForestClassifier()]"
  - "sklearn.tests.test_common::test_pandas_column_name_consistency[RandomForestRegressor()]"
  - "sklearn.tests.test_common::test_pandas_column_name_consistency[Ridge()]"
  - "sklearn.tests.test_common::test_pandas_column_name_consistency[SVC()]"
  - "sklearn.tests.test_common::test_pandas_column_name_consistency[SVR()]"
  - "sklearn.tests.test_common::test_pandas_column_name_consistency[TSNE()]"
  - "sklearn.tests.test_common::test_pandas_column_name_consistency[TruncatedSVD()]"
- reason: Test is flaky with cuml.accel
  marker: cuml_accel_flaky
  condition: scikit-learn<1.7
  strict: false
  tests:
  - "sklearn.utils.tests.test_estimator_html_repr::test_show_arrow_pipeline"
- reason: Test is flaky with cuml.accel
  marker: cuml_accel_flaky
  strict: false
  tests:
  - "sklearn.cluster.tests.test_k_means::test_score_max_iter[42-KMeans]"
  - "sklearn.decomposition.tests.test_truncated_svd::test_explained_variance_components_10_20[arpack-sparse]"
  - "sklearn.decomposition.tests.test_truncated_svd::test_explained_variance_components_10_20[randomized-sparse]"
  - "sklearn.ensemble.tests.test_forest::test_max_samples_boundary_regressors[RandomForestRegressor]"
  - "sklearn.ensemble.tests.test_forest::test_warm_start_oob[RandomForestClassifier]"
  - "sklearn.feature_selection.tests.test_sequential::test_unsupervised_model_fit[2]"
  - "sklearn.feature_selection.tests.test_sequential::test_unsupervised_model_fit[3]"
  - "sklearn.manifold.tests.test_spectral_embedding::test_pipeline_spectral_clustering"
  - "sklearn.manifold.tests.test_t_sne::test_fit_transform_csr_matrix[csr_matrix-barnes_hut]"
  - "sklearn.manifold.tests.test_t_sne::test_fit_transform_csr_matrix[csr_matrix-exact]"
  - "sklearn.manifold.tests.test_t_sne::test_optimization_minimizes_kl_divergence"
  - "sklearn.manifold.tests.test_t_sne::test_uniform_grid[barnes_hut]"
  - "sklearn.manifold.tests.test_t_sne::test_uniform_grid[exact]"
  - "sklearn.model_selection.tests.test_search::test_unsupervised_grid_search"
  - "sklearn.model_selection.tests.test_validation::test_cross_val_predict[coo_array]"
  - "sklearn.model_selection.tests.test_validation::test_cross_val_predict[coo_matrix]"
  - "sklearn.preprocessing.tests.test_polynomial::test_csr_polynomial_expansion_index_overflow[csr_array-False-True-2-65535]"
  - "sklearn.preprocessing.tests.test_polynomial::test_csr_polynomial_expansion_index_overflow[csr_array-False-True-3-2344]"
  - "sklearn.svm.tests.test_svm::test_custom_kernel_not_array_input[SVC]"
  - "sklearn.svm.tests.test_svm::test_custom_kernel_not_array_input[SVR]"
  - "sklearn.tests.test_multioutput::test_base_chain_fit_and_predict_with_sparse_data_and_cv[csr_array]"
  - "sklearn.tests.test_multioutput::test_classifier_chain_fit_and_predict_with_sparse_data[csr_array]"
- reason: Tests that fail due to poking at sklearn internals, failures don't indicate bugs in cuml.accel
  marker: cuml_accel_invalid_sklearn_tests
  tests:
  - "sklearn.svm.tests.test_svm::test_gamma_scale"
  - "sklearn.svm.tests.test_svm::test_svc_raises_error_internal_representation"
- reason: KernelRidge input handling and validation
  marker: cuml_accel_kernel_ridge_estimator_checks
  tests:
  - "sklearn.tests.test_common::test_estimators[KernelRidge()-check_complex_data]"
  - "sklearn.tests.test_common::test_estimators[KernelRidge()-check_dtype_object]"
  - "sklearn.tests.test_common::test_estimators[KernelRidge()-check_estimators_dtypes]"
  - "sklearn.tests.test_common::test_estimators[KernelRidge()-check_estimators_empty_data_messages]"
  - "sklearn.tests.test_common::test_estimators[KernelRidge()-check_estimators_nan_inf]"
  - "sklearn.tests.test_common::test_estimators[KernelRidge()-check_estimators_pickle(readonly_memmap=True)]"
  - "sklearn.tests.test_common::test_estimators[KernelRidge()-check_fit1d]"
  - "sklearn.tests.test_common::test_estimators[KernelRidge()-check_fit2d_predict1d]"
  - "sklearn.tests.test_common::test_estimators[KernelRidge()-check_regressor_data_not_an_array]"
  - "sklearn.tests.test_common::test_estimators[KernelRidge()-check_regressors_train(readonly_memmap=True)]"
  - "sklearn.tests.test_common::test_estimators[KernelRidge()-check_regressors_train(readonly_memmap=True,X_dtype=float32)]"
  - "sklearn.tests.test_common::test_estimators[KernelRidge()-check_regressors_train]"
  - "sklearn.tests.test_common::test_estimators[KernelRidge()-check_requires_y_none]"
  - "sklearn.tests.test_common::test_estimators[KernelRidge()-check_sample_weights_not_an_array]"
  - "sklearn.tests.test_common::test_estimators[KernelRidge()-check_sample_weights_pandas_series]"
  - "sklearn.tests.test_common::test_estimators[KernelRidge()-check_supervised_y_no_nan]"
- reason: cuml.accel does not support callable initialization for KMeans
  marker: cuml_accel_kmeans_callable_init
  tests:
  - "sklearn.cluster.tests.test_k_means::test_kmeans_init_auto_with_initial_centroids[KMeans-<lambda>-default]"
- reason: cuml.accel deviates in KMeans cluster_centers_ attribute
  marker: cuml_accel_kmeans_cluster_centers_attribute
  tests:
  - "sklearn.cluster.tests.test_k_means::test_transform[42-KMeans]"
- reason: cuml.accel deviates in KMeans empty cluster reloacation (number of labels)
  marker: cuml_accel_kmeans_empty_clusters_num_labels
  tests:
  - "sklearn.cluster.tests.test_k_means::test_kmeans_empty_cluster_relocated[dense]"
- reason: Unexpected deviations in inertia values in cuml.accel
  marker: cuml_accel_kmeans_inertia_weights
  tests:
  - "sklearn.cluster.tests.test_k_means::test_float_precision[42-KMeans-dense]"
  - "sklearn.cluster.tests.test_k_means::test_kmeans_relocated_clusters[elkan-dense]"
  - "sklearn.cluster.tests.test_k_means::test_kmeans_relocated_clusters[lloyd-dense]"
  - "sklearn.cluster.tests.test_k_means::test_kmeans_results[float32-elkan-dense]"
  - "sklearn.cluster.tests.test_k_means::test_kmeans_results[float32-lloyd-dense]"
  - "sklearn.cluster.tests.test_k_means::test_kmeans_results[float64-elkan-dense]"
  - "sklearn.cluster.tests.test_k_means::test_kmeans_results[float64-lloyd-dense]"
  - "sklearn.cluster.tests.test_k_means::test_weighted_vs_repeated[42]"
- reason: Integer inputs are converted to float32 instead of float64 with cuml.accel
  marker: cuml_accel_kmeans_integer_dtype
  tests:
  - "sklearn.cluster.tests.test_k_means::test_integer_input[42-KMeans-k-means++-int32-dense]"
  - "sklearn.cluster.tests.test_k_means::test_integer_input[42-KMeans-k-means++-int64-dense]"
  - "sklearn.cluster.tests.test_k_means::test_integer_input[42-KMeans-ndarray-int32-dense]"
  - "sklearn.cluster.tests.test_k_means::test_integer_input[42-KMeans-ndarray-int64-dense]"
- reason: 'cuml.accel fails for KMeans with AttributeError: ''KMeans'' object has no attribute ''_n_init'''
  marker: cuml_accel_kmeans_n_init
  tests:
  - "sklearn.cluster.tests.test_k_means::test_kmeans_init_auto_with_initial_centroids[KMeans-array-like-1]"
  - "sklearn.cluster.tests.test_k_means::test_kmeans_init_auto_with_initial_centroids[KMeans-k-means++-1]"
  - "sklearn.cluster.tests.test_k_means::test_kmeans_init_auto_with_initial_centroids[KMeans-random-default]"
  - "sklearn.cluster.tests.test_k_means::test_n_init_auto[KMeans-10]"
- reason: 'RAFT library limitation: tolerance must be positive'
  marker: cuml_accel_kmeans_needs_nonnegative_tolerance
  tests:
  - "sklearn.cluster.tests.test_k_means::test_kmeans_convergence[42-elkan]"
  - "sklearn.cluster.tests.test_k_means::test_kmeans_convergence[42-lloyd]"
  - "sklearn.cluster.tests.test_k_means::test_kmeans_elkan_results[42-0-dense-blobs]"
  - "sklearn.cluster.tests.test_k_means::test_kmeans_elkan_results[42-0-dense-normal]"
  - "sklearn.cluster.tests.test_k_means::test_kmeans_verbose[0-elkan]"
  - "sklearn.cluster.tests.test_k_means::test_kmeans_verbose[0-lloyd]"
- reason: Parameter validation differs from scikit-learn
  marker: cuml_accel_kmeans_param_validation
  tests:
  - "sklearn.cluster.tests.test_k_means::test_relocating_with_duplicates[elkan-dense]"
  - "sklearn.cluster.tests.test_k_means::test_relocating_with_duplicates[lloyd-dense]"
  - "sklearn.cluster.tests.test_k_means::test_wrong_params[param0-n_samples.* should be >= n_clusters-KMeans]"
  - "sklearn.cluster.tests.test_k_means::test_wrong_params[param1-The shape of the initial centers .* does not match the number of clusters-KMeans]"
  - "sklearn.cluster.tests.test_k_means::test_wrong_params[param3-The shape of the initial centers .* does not match the number of features of the data-KMeans]"
- reason: cuml.accel deviates in predict output for KMeans
  marker: cuml_accel_kmeans_predict_output_deviation
  condition: scikit-learn<1.7
  tests:
  - "sklearn.cluster.tests.test_spectral::test_precomputed_nearest_neighbors_filtering"
- reason: cuml.accel deviates in predict output for KMeans
  marker: cuml_accel_kmeans_predict_output_deviation
  tests:
  - "sklearn.cluster.tests.test_k_means::test_dense_sparse[42-KMeans-X_csr0]"
  - "sklearn.cluster.tests.test_k_means::test_dense_sparse[42-KMeans-X_csr1]"
- reason: cuml.accel deviates in repeated predict output for KMeans
  marker: cuml_accel_kmeans_repeated_predict_output_deviation
  condition: scikit-learn<1.6
  tests:
  - "sklearn.cluster.tests.test_k_means::test_kmeans_predict[float64-42-100-KMeans-elkan-dense]"
  - "sklearn.cluster.tests.test_k_means::test_kmeans_predict[float64-42-100-KMeans-lloyd-dense]"
  - "sklearn.cluster.tests.test_k_means::test_kmeans_predict[float64-42-2-KMeans-elkan-dense]"
  - "sklearn.cluster.tests.test_k_means::test_kmeans_predict[float64-42-2-KMeans-lloyd-dense]"
- reason: cuml.accel deviates in repeated predict output for KMeans scikit-learn 1.6
  marker: cuml_accel_kmeans_repeated_predict_output_deviation
  condition: scikit-learn>=1.6
  tests:
  - "sklearn.cluster.tests.test_k_means::test_kmeans_predict[42-float64-100-KMeans-elkan-dense]"
  - "sklearn.cluster.tests.test_k_means::test_kmeans_predict[42-float64-100-KMeans-lloyd-dense]"
  - "sklearn.cluster.tests.test_k_means::test_kmeans_predict[42-float64-2-KMeans-elkan-dense]"
  - "sklearn.cluster.tests.test_k_means::test_kmeans_predict[42-float64-2-KMeans-lloyd-dense]"
- reason: cuml.accel deviates in log output for KMeans
  marker: cuml_accel_kmeans_verbose_logging_message_deviation
  tests:
  - "sklearn.cluster.tests.test_k_means::test_kmeans_verbose[0.01-elkan]"
  - "sklearn.cluster.tests.test_k_means::test_kmeans_verbose[0.01-lloyd]"
  - "sklearn.cluster.tests.test_k_means::test_kmeans_warns_less_centers_than_unique_points[42]"
  - "sklearn.cluster.tests.test_k_means::test_warning_elkan_1_cluster"
- reason: cuml.accel does not emit RuntimeWarning when n_init > 1 and precomputed centers are passed
  marker: cuml_accel_kmeans_warning_n_init_precomputed_centers
  tests:
  - "sklearn.cluster.tests.test_k_means::test_warning_n_init_precomputed_centers[KMeans]"
- reason: metadata routing not yet supported
  marker: cuml_accel_metadata_routing
  tests:
  - "sklearn.metrics.tests.test_score_objects::test_PassthroughScorer_set_score_request"
  - "sklearn.model_selection.tests.test_classification_threshold::test_fixed_threshold_classifier_metadata_routing"
  - "sklearn.model_selection.tests.test_classification_threshold::test_tuned_threshold_classifier_cv_zeros_sample_weights_equivalence"
  - "sklearn.model_selection.tests.test_classification_threshold::test_tuned_threshold_classifier_refit[42-True]"
  - "sklearn.tests.test_metadata_routing::test_metaestimator_warnings"
- reason: cuml missing certain fit attributes
  marker: cuml_accel_missing_fit_attributes
  tests:
  - "sklearn.tests.test_docstring_parameters::test_fit_docstring_attributes[DBSCAN-DBSCAN]"
  - "sklearn.tests.test_docstring_parameters::test_fit_docstring_attributes[ElasticNet-ElasticNet]"
  - "sklearn.tests.test_docstring_parameters::test_fit_docstring_attributes[Lasso-Lasso]"
  - "sklearn.tests.test_docstring_parameters::test_fit_docstring_attributes[SVC-SVC]"
  - "sklearn.tests.test_docstring_parameters::test_fit_docstring_attributes[SVR-SVR]"
  - "sklearn.tests.test_docstring_parameters::test_fit_docstring_attributes[TSNE-TSNE]"
- reason: sklearn expects these algorithm/dtype/metric combos to error, cuml supports them fine
  marker: cuml_accel_neighbors_metric_errors
  condition: scikit-learn<1.6
  tests:
  - "sklearn.neighbors.tests.test_neighbors::test_neighbors_metrics[float64-42-canberra]"
  - "sklearn.neighbors.tests.test_neighbors::test_neighbors_metrics[float64-42-haversine]"
  - "sklearn.neighbors.tests.test_neighbors::test_neighbors_metrics[float64-42-minkowski]"
- reason: sklearn expects these algorithm/dtype/metric combos to error, cuml supports them fine
  marker: cuml_accel_neighbors_metric_errors
  condition: scikit-learn>=1.6
  tests:
  - "sklearn.neighbors.tests.test_neighbors::test_neighbors_metrics[42-float64-canberra]"
  - "sklearn.neighbors.tests.test_neighbors::test_neighbors_metrics[42-float64-haversine]"
  - "sklearn.neighbors.tests.test_neighbors::test_neighbors_metrics[42-float64-minkowski]"
- reason: SVC input handling and validation
  marker: cuml_accel_svc_estimator_checks
  condition: scikit-learn>=1.6
  tests:
  - "sklearn.tests.test_common::test_estimators[SVC()-check_sample_weight_equivalence_on_dense_data]"
  - "sklearn.tests.test_common::test_estimators[SVC()-check_sample_weight_equivalence_on_sparse_data]"
- reason: SVC input handling and validation
  marker: cuml_accel_svc_estimator_checks
  tests:
  - "sklearn.svm.tests.test_svm::test_bad_input[lil_array]"
  - "sklearn.svm.tests.test_svm::test_bad_input[lil_matrix]"
  - "sklearn.svm.tests.test_svm::test_svc_nonfinite_params"
  - "sklearn.tests.test_common::test_estimators[SVC()-check_classifier_data_not_an_array]"
  - "sklearn.tests.test_common::test_estimators[SVC()-check_classifiers_classes]"
  - "sklearn.tests.test_common::test_estimators[SVC()-check_classifiers_one_label]"
  - "sklearn.tests.test_common::test_estimators[SVC()-check_classifiers_train(readonly_memmap=True)]"
  - "sklearn.tests.test_common::test_estimators[SVC()-check_classifiers_train(readonly_memmap=True,X_dtype=float32)]"
  - "sklearn.tests.test_common::test_estimators[SVC()-check_classifiers_train]"
  - "sklearn.tests.test_common::test_estimators[SVC()-check_complex_data]"
  - "sklearn.tests.test_common::test_estimators[SVC()-check_estimators_empty_data_messages]"
  - "sklearn.tests.test_common::test_estimators[SVC()-check_estimators_nan_inf]"
  - "sklearn.tests.test_common::test_estimators[SVC()-check_fit2d_1sample]"
  - "sklearn.tests.test_common::test_estimators[SVC()-check_requires_y_none]"
  - "sklearn.tests.test_common::test_estimators[SVC()-check_sample_weights_not_an_array]"
  - "sklearn.tests.test_common::test_estimators[SVC()-check_supervised_y_no_nan]"
- reason: SVM missing certain fit attributes
  marker: cuml_accel_svm_missing_fit_attributes
  tests:
  - "sklearn.svm.tests.test_svm::test_n_iter_libsvm[dataset0-SVC-ndarray]"
  - "sklearn.svm.tests.test_svm::test_n_iter_libsvm[dataset0-SVR-int]"
  - "sklearn.svm.tests.test_svm::test_n_iter_libsvm[dataset1-SVR-int]"
  - "sklearn.svm.tests.test_svm::test_n_iter_libsvm[dataset2-SVR-int]"
- reason: SVM doesn't handle sample_weight identically to sklearn
  marker: cuml_accel_svm_sample_weight
  tests:
  - "sklearn.svm.tests.test_svm::test_negative_sample_weights_mask_all_samples[weights-are-negative-SVC]"
  - "sklearn.svm.tests.test_svm::test_negative_sample_weights_mask_all_samples[weights-are-negative-SVR]"
  - "sklearn.svm.tests.test_svm::test_negative_sample_weights_mask_all_samples[weights-are-zero-SVC]"
  - "sklearn.svm.tests.test_svm::test_negative_sample_weights_mask_all_samples[weights-are-zero-SVR]"
  - "sklearn.svm.tests.test_svm::test_negative_weights_svc_leave_just_one_label[mask-label-1-SVC]"
  - "sklearn.svm.tests.test_svm::test_negative_weights_svc_leave_just_one_label[mask-label-2-SVC]"
  - "sklearn.svm.tests.test_svm::test_weight"
- reason: SVR input handling and validation
  marker: cuml_accel_svr_estimator_checks
  condition: scikit-learn>=1.6
  tests:
  - "sklearn.tests.test_common::test_estimators[SVR()-check_sample_weight_equivalence_on_dense_data]"
  - "sklearn.tests.test_common::test_estimators[SVR()-check_sample_weight_equivalence_on_sparse_data]"
- reason: SVR input handling and validation
  marker: cuml_accel_svr_estimator_checks
  tests:
  - "sklearn.tests.test_common::test_estimators[SVR()-check_complex_data]"
  - "sklearn.tests.test_common::test_estimators[SVR()-check_dtype_object]"
  - "sklearn.tests.test_common::test_estimators[SVR()-check_estimators_empty_data_messages]"
  - "sklearn.tests.test_common::test_estimators[SVR()-check_estimators_nan_inf]"
  - "sklearn.tests.test_common::test_estimators[SVR()-check_fit1d]"
  - "sklearn.tests.test_common::test_estimators[SVR()-check_fit2d_predict1d]"
  - "sklearn.tests.test_common::test_estimators[SVR()-check_non_transformer_estimators_n_iter]"
  - "sklearn.tests.test_common::test_estimators[SVR()-check_regressor_data_not_an_array]"
  - "sklearn.tests.test_common::test_estimators[SVR()-check_requires_y_none]"
  - "sklearn.tests.test_common::test_estimators[SVR()-check_sample_weights_not_an_array]"
  - "sklearn.tests.test_common::test_estimators[SVR()-check_supervised_y_2d]"
  - "sklearn.tests.test_common::test_estimators[SVR()-check_supervised_y_no_nan]"
- reason: test_estimators checks fail
  marker: cuml_accel_test_estimators
  condition: scikit-learn<1.6
  tests:
  - "sklearn.tests.test_common::test_estimators[LogisticRegression()-check_sample_weights_invariance(kind=zeros)]"
- reason: test_estimators checks fail
  marker: cuml_accel_test_estimators
  condition: scikit-learn>=1.6
  tests:
  - "sklearn.tests.test_common::test_estimators[KMeans()-check_sample_weight_equivalence_on_dense_data]"
  - "sklearn.tests.test_common::test_estimators[KMeans()-check_sample_weight_equivalence_on_sparse_data]"
  - "sklearn.tests.test_common::test_estimators[KNeighborsClassifier()-check_estimator_sparse_tag]"
  - "sklearn.tests.test_common::test_estimators[KNeighborsRegressor()-check_estimator_sparse_tag]"
  - "sklearn.tests.test_common::test_estimators[NearestNeighbors()-check_estimator_sparse_tag]"
  - "sklearn.tests.test_common::test_estimators[RandomForestClassifier()-check_sample_weight_equivalence_on_dense_data]"
  - "sklearn.tests.test_common::test_estimators[RandomForestClassifier()-check_sample_weight_equivalence_on_sparse_data]"
  - "sklearn.tests.test_common::test_estimators[RandomForestRegressor()-check_sample_weight_equivalence_on_dense_data]"
  - "sklearn.tests.test_common::test_estimators[RandomForestRegressor()-check_sample_weight_equivalence_on_sparse_data]"
- reason: test_estimators checks fail
  marker: cuml_accel_test_estimators
  tests:
  - "sklearn.tests.test_common::test_estimators[DBSCAN()-check_complex_data]"
  - "sklearn.tests.test_common::test_estimators[DBSCAN()-check_dtype_object]"
  - "sklearn.tests.test_common::test_estimators[DBSCAN()-check_estimators_empty_data_messages]"
  - "sklearn.tests.test_common::test_estimators[DBSCAN()-check_estimators_nan_inf]"
  - "sklearn.tests.test_common::test_estimators[DBSCAN()-check_fit1d]"
  - "sklearn.tests.test_common::test_estimators[DBSCAN()-check_sample_weights_not_an_array]"
  - "sklearn.tests.test_common::test_estimators[ElasticNet()-check_complex_data]"
  - "sklearn.tests.test_common::test_estimators[ElasticNet()-check_dtype_object]"
  - "sklearn.tests.test_common::test_estimators[ElasticNet()-check_estimators_empty_data_messages]"
  - "sklearn.tests.test_common::test_estimators[ElasticNet()-check_estimators_nan_inf]"
  - "sklearn.tests.test_common::test_estimators[ElasticNet()-check_fit1d]"
  - "sklearn.tests.test_common::test_estimators[ElasticNet()-check_fit2d_1sample]"
  - "sklearn.tests.test_common::test_estimators[ElasticNet()-check_fit2d_predict1d]"
  - "sklearn.tests.test_common::test_estimators[ElasticNet()-check_non_transformer_estimators_n_iter]"
  - "sklearn.tests.test_common::test_estimators[ElasticNet()-check_regressor_data_not_an_array]"
  - "sklearn.tests.test_common::test_estimators[ElasticNet()-check_regressor_multioutput]"
  - "sklearn.tests.test_common::test_estimators[ElasticNet()-check_requires_y_none]"
  - "sklearn.tests.test_common::test_estimators[ElasticNet()-check_sample_weights_not_an_array]"
  - "sklearn.tests.test_common::test_estimators[ElasticNet()-check_supervised_y_no_nan]"
  - "sklearn.tests.test_common::test_estimators[KMeans()-check_complex_data]"
  - "sklearn.tests.test_common::test_estimators[KMeans()-check_dtype_object]"
  - "sklearn.tests.test_common::test_estimators[KMeans()-check_estimators_nan_inf]"
  - "sklearn.tests.test_common::test_estimators[KMeans()-check_fit1d]"
  - "sklearn.tests.test_common::test_estimators[KMeans()-check_fit2d_predict1d]"
  - "sklearn.tests.test_common::test_estimators[KMeans()-check_sample_weights_not_an_array]"
  - "sklearn.tests.test_common::test_estimators[KMeans()-check_sample_weights_shape]"
  - "sklearn.tests.test_common::test_estimators[KMeans()-check_transformer_data_not_an_array]"
  - "sklearn.tests.test_common::test_estimators[KNeighborsClassifier()-check_classifier_data_not_an_array]"
  - "sklearn.tests.test_common::test_estimators[KNeighborsClassifier()-check_classifiers_classes]"
  - "sklearn.tests.test_common::test_estimators[KNeighborsClassifier()-check_classifiers_regression_target]"
  - "sklearn.tests.test_common::test_estimators[KNeighborsClassifier()-check_classifiers_train(readonly_memmap=True)]"
  - "sklearn.tests.test_common::test_estimators[KNeighborsClassifier()-check_classifiers_train(readonly_memmap=True,X_dtype=float32)]"
  - "sklearn.tests.test_common::test_estimators[KNeighborsClassifier()-check_classifiers_train]"
  - "sklearn.tests.test_common::test_estimators[KNeighborsClassifier()-check_complex_data]"
  - "sklearn.tests.test_common::test_estimators[KNeighborsClassifier()-check_dtype_object]"
  - "sklearn.tests.test_common::test_estimators[KNeighborsClassifier()-check_estimators_empty_data_messages]"
  - "sklearn.tests.test_common::test_estimators[KNeighborsClassifier()-check_estimators_nan_inf]"
  - "sklearn.tests.test_common::test_estimators[KNeighborsClassifier()-check_fit2d_predict1d]"
  - "sklearn.tests.test_common::test_estimators[KNeighborsClassifier()-check_requires_y_none]"
  - "sklearn.tests.test_common::test_estimators[KNeighborsClassifier()-check_supervised_y_no_nan]"
  - "sklearn.tests.test_common::test_estimators[KNeighborsRegressor()-check_complex_data]"
  - "sklearn.tests.test_common::test_estimators[KNeighborsRegressor()-check_dtype_object]"
  - "sklearn.tests.test_common::test_estimators[KNeighborsRegressor()-check_estimators_empty_data_messages]"
  - "sklearn.tests.test_common::test_estimators[KNeighborsRegressor()-check_estimators_nan_inf]"
  - "sklearn.tests.test_common::test_estimators[KNeighborsRegressor()-check_fit2d_predict1d]"
  - "sklearn.tests.test_common::test_estimators[KNeighborsRegressor()-check_regressor_data_not_an_array]"
  - "sklearn.tests.test_common::test_estimators[KNeighborsRegressor()-check_regressors_int]"
  - "sklearn.tests.test_common::test_estimators[KNeighborsRegressor()-check_regressors_train(readonly_memmap=True)]"
  - "sklearn.tests.test_common::test_estimators[KNeighborsRegressor()-check_regressors_train(readonly_memmap=True,X_dtype=float32)]"
  - "sklearn.tests.test_common::test_estimators[KNeighborsRegressor()-check_regressors_train]"
  - "sklearn.tests.test_common::test_estimators[KNeighborsRegressor()-check_requires_y_none]"
  - "sklearn.tests.test_common::test_estimators[KNeighborsRegressor()-check_supervised_y_no_nan]"
  - "sklearn.tests.test_common::test_estimators[Lasso()-check_complex_data]"
  - "sklearn.tests.test_common::test_estimators[Lasso()-check_dtype_object]"
  - "sklearn.tests.test_common::test_estimators[Lasso()-check_estimators_empty_data_messages]"
  - "sklearn.tests.test_common::test_estimators[Lasso()-check_estimators_nan_inf]"
  - "sklearn.tests.test_common::test_estimators[Lasso()-check_fit1d]"
  - "sklearn.tests.test_common::test_estimators[Lasso()-check_fit2d_1sample]"
  - "sklearn.tests.test_common::test_estimators[Lasso()-check_fit2d_predict1d]"
  - "sklearn.tests.test_common::test_estimators[Lasso()-check_non_transformer_estimators_n_iter]"
  - "sklearn.tests.test_common::test_estimators[Lasso()-check_regressor_data_not_an_array]"
  - "sklearn.tests.test_common::test_estimators[Lasso()-check_regressor_multioutput]"
  - "sklearn.tests.test_common::test_estimators[Lasso()-check_requires_y_none]"
  - "sklearn.tests.test_common::test_estimators[Lasso()-check_sample_weights_not_an_array]"
  - "sklearn.tests.test_common::test_estimators[Lasso()-check_supervised_y_no_nan]"
  - "sklearn.tests.test_common::test_estimators[LinearRegression()-check_complex_data]"
  - "sklearn.tests.test_common::test_estimators[LinearRegression()-check_dtype_object]"
  - "sklearn.tests.test_common::test_estimators[LinearRegression()-check_estimators_empty_data_messages]"
  - "sklearn.tests.test_common::test_estimators[LinearRegression()-check_estimators_nan_inf]"
  - "sklearn.tests.test_common::test_estimators[LinearRegression()-check_fit1d]"
  - "sklearn.tests.test_common::test_estimators[LinearRegression()-check_fit2d_1sample]"
  - "sklearn.tests.test_common::test_estimators[LinearRegression()-check_fit2d_predict1d]"
  - "sklearn.tests.test_common::test_estimators[LinearRegression()-check_regressor_data_not_an_array]"
  - "sklearn.tests.test_common::test_estimators[LinearRegression()-check_requires_y_none]"
  - "sklearn.tests.test_common::test_estimators[LinearRegression()-check_sample_weights_not_an_array]"
  - "sklearn.tests.test_common::test_estimators[LinearRegression()-check_supervised_y_no_nan]"
  - "sklearn.tests.test_common::test_estimators[LogisticRegression()-check_class_weight_classifiers]"
  - "sklearn.tests.test_common::test_estimators[LogisticRegression()-check_classifier_data_not_an_array]"
  - "sklearn.tests.test_common::test_estimators[LogisticRegression()-check_classifiers_one_label]"
  - "sklearn.tests.test_common::test_estimators[LogisticRegression()-check_classifiers_regression_target]"
  - "sklearn.tests.test_common::test_estimators[LogisticRegression()-check_complex_data]"
  - "sklearn.tests.test_common::test_estimators[LogisticRegression()-check_dtype_object]"
  - "sklearn.tests.test_common::test_estimators[LogisticRegression()-check_estimators_empty_data_messages]"
  - "sklearn.tests.test_common::test_estimators[LogisticRegression()-check_estimators_nan_inf]"
  - "sklearn.tests.test_common::test_estimators[LogisticRegression()-check_fit1d]"
  - "sklearn.tests.test_common::test_estimators[LogisticRegression()-check_fit2d_1sample]"
  - "sklearn.tests.test_common::test_estimators[LogisticRegression()-check_fit2d_predict1d]"
  - "sklearn.tests.test_common::test_estimators[LogisticRegression()-check_requires_y_none]"
  - "sklearn.tests.test_common::test_estimators[LogisticRegression()-check_sample_weights_not_an_array]"
  - "sklearn.tests.test_common::test_estimators[LogisticRegression()-check_sparsify_coefficients]"
  - "sklearn.tests.test_common::test_estimators[LogisticRegression()-check_supervised_y_2d]"
  - "sklearn.tests.test_common::test_estimators[LogisticRegression()-check_supervised_y_no_nan]"
  - "sklearn.tests.test_common::test_estimators[NearestNeighbors()-check_complex_data]"
  - "sklearn.tests.test_common::test_estimators[NearestNeighbors()-check_dtype_object]"
  - "sklearn.tests.test_common::test_estimators[NearestNeighbors()-check_estimators_empty_data_messages]"
  - "sklearn.tests.test_common::test_estimators[NearestNeighbors()-check_estimators_nan_inf]"
  - "sklearn.tests.test_common::test_estimators[PCA()-check_complex_data]"
  - "sklearn.tests.test_common::test_estimators[PCA()-check_dtype_object]"
  - "sklearn.tests.test_common::test_estimators[PCA()-check_estimators_empty_data_messages]"
  - "sklearn.tests.test_common::test_estimators[PCA()-check_estimators_nan_inf]"
  - "sklearn.tests.test_common::test_estimators[PCA()-check_fit1d]"
  - "sklearn.tests.test_common::test_estimators[PCA()-check_fit2d_1feature]"
  - "sklearn.tests.test_common::test_estimators[PCA()-check_fit2d_1sample]"
  - "sklearn.tests.test_common::test_estimators[PCA()-check_fit2d_predict1d]"
  - "sklearn.tests.test_common::test_estimators[PCA()-check_transformer_data_not_an_array]"
  - "sklearn.tests.test_common::test_estimators[RandomForestClassifier()-check_class_weight_classifiers]"
  - "sklearn.tests.test_common::test_estimators[RandomForestClassifier()-check_classifier_data_not_an_array]"
  - "sklearn.tests.test_common::test_estimators[RandomForestClassifier()-check_classifier_multioutput]"
  - "sklearn.tests.test_common::test_estimators[RandomForestClassifier()-check_classifiers_classes]"
  - "sklearn.tests.test_common::test_estimators[RandomForestClassifier()-check_classifiers_multilabel_output_format_decision_function]"
  - "sklearn.tests.test_common::test_estimators[RandomForestClassifier()-check_classifiers_multilabel_output_format_predict]"
  - "sklearn.tests.test_common::test_estimators[RandomForestClassifier()-check_classifiers_multilabel_output_format_predict_proba]"
  - "sklearn.tests.test_common::test_estimators[RandomForestClassifier()-check_classifiers_multilabel_representation_invariance]"
  - "sklearn.tests.test_common::test_estimators[RandomForestClassifier()-check_classifiers_train(readonly_memmap=True)]"
  - "sklearn.tests.test_common::test_estimators[RandomForestClassifier()-check_classifiers_train(readonly_memmap=True,X_dtype=float32)]"
  - "sklearn.tests.test_common::test_estimators[RandomForestClassifier()-check_classifiers_train]"
  - "sklearn.tests.test_common::test_estimators[RandomForestClassifier()-check_complex_data]"
  - "sklearn.tests.test_common::test_estimators[RandomForestClassifier()-check_dtype_object]"
  - "sklearn.tests.test_common::test_estimators[RandomForestClassifier()-check_estimators_empty_data_messages]"
  - "sklearn.tests.test_common::test_estimators[RandomForestClassifier()-check_fit1d]"
  - "sklearn.tests.test_common::test_estimators[RandomForestClassifier()-check_fit2d_predict1d]"
  - "sklearn.tests.test_common::test_estimators[RandomForestClassifier()-check_requires_y_none]"
  - "sklearn.tests.test_common::test_estimators[RandomForestClassifier()-check_supervised_y_2d]"
  - "sklearn.tests.test_common::test_estimators[RandomForestClassifier()-check_supervised_y_no_nan]"
  - "sklearn.tests.test_common::test_estimators[RandomForestRegressor()-check_complex_data]"
  - "sklearn.tests.test_common::test_estimators[RandomForestRegressor()-check_dtype_object]"
  - "sklearn.tests.test_common::test_estimators[RandomForestRegressor()-check_estimators_empty_data_messages]"
  - "sklearn.tests.test_common::test_estimators[RandomForestRegressor()-check_fit1d]"
  - "sklearn.tests.test_common::test_estimators[RandomForestRegressor()-check_fit2d_predict1d]"
  - "sklearn.tests.test_common::test_estimators[RandomForestRegressor()-check_regressor_data_not_an_array]"
  - "sklearn.tests.test_common::test_estimators[RandomForestRegressor()-check_regressor_multioutput]"
  - "sklearn.tests.test_common::test_estimators[RandomForestRegressor()-check_requires_y_none]"
  - "sklearn.tests.test_common::test_estimators[RandomForestRegressor()-check_supervised_y_no_nan]"
  - "sklearn.tests.test_common::test_estimators[Ridge()-check_complex_data]"
  - "sklearn.tests.test_common::test_estimators[Ridge()-check_dtype_object]"
  - "sklearn.tests.test_common::test_estimators[Ridge()-check_estimators_empty_data_messages]"
  - "sklearn.tests.test_common::test_estimators[Ridge()-check_estimators_nan_inf]"
  - "sklearn.tests.test_common::test_estimators[Ridge()-check_fit1d]"
  - "sklearn.tests.test_common::test_estimators[Ridge()-check_fit2d_1sample]"
  - "sklearn.tests.test_common::test_estimators[Ridge()-check_fit2d_predict1d]"
  - "sklearn.tests.test_common::test_estimators[Ridge()-check_regressor_data_not_an_array]"
  - "sklearn.tests.test_common::test_estimators[Ridge()-check_requires_y_none]"
  - "sklearn.tests.test_common::test_estimators[Ridge()-check_sample_weights_not_an_array]"
  - "sklearn.tests.test_common::test_estimators[Ridge()-check_supervised_y_no_nan]"
  - "sklearn.tests.test_common::test_estimators[TSNE()-check_complex_data]"
  - "sklearn.tests.test_common::test_estimators[TSNE()-check_dtype_object]"
  - "sklearn.tests.test_common::test_estimators[TSNE()-check_estimator_sparse_matrix]"
  - "sklearn.tests.test_common::test_estimators[TSNE()-check_estimators_empty_data_messages]"
  - "sklearn.tests.test_common::test_estimators[TSNE()-check_estimators_nan_inf]"
  - "sklearn.tests.test_common::test_estimators[TruncatedSVD()-check_complex_data]"
  - "sklearn.tests.test_common::test_estimators[TruncatedSVD()-check_dtype_object]"
  - "sklearn.tests.test_common::test_estimators[TruncatedSVD()-check_estimators_empty_data_messages]"
  - "sklearn.tests.test_common::test_estimators[TruncatedSVD()-check_estimators_nan_inf]"
  - "sklearn.tests.test_common::test_estimators[TruncatedSVD()-check_fit1d]"
  - "sklearn.tests.test_common::test_estimators[TruncatedSVD()-check_fit2d_1feature]"
  - "sklearn.tests.test_common::test_estimators[TruncatedSVD()-check_fit2d_1sample]"
  - "sklearn.tests.test_common::test_estimators[TruncatedSVD()-check_fit2d_predict1d]"
  - "sklearn.tests.test_common::test_estimators[TruncatedSVD()-check_transformer_data_not_an_array]"
- reason: TSNE isn't deterministic, even with random_state
  marker: cuml_accel_tsne_nondeterministic
  condition: scikit-learn<1.6
  tests:
  - "sklearn.tests.test_common::test_estimators[TSNE()-check_pipeline_consistency]"
- reason: TSNE does validation on __init__, which causes these tests to fail only on certain sklearn versions
  marker: cuml_accel_tsne_validation_on_init
  condition: scikit-learn>=1.6
  tests:
  - "sklearn.tests.test_common::test_estimators[TSNE()-check_dont_overwrite_parameters]"
  - "sklearn.tests.test_common::test_estimators[TSNE()-check_fit2d_1feature]"
  - "sklearn.tests.test_common::test_estimators[TSNE()-check_fit2d_predict1d]"
  - "sklearn.tests.test_common::test_estimators[TSNE()-check_methods_sample_order_invariance]"
  - "sklearn.tests.test_common::test_estimators[TSNE()-check_methods_subset_invariance]"
- reason: Flaky deviations in n_iter_ values in cuml.accel
  strict: false
  tests:
  - "sklearn.cluster.tests.test_k_means::test_kmeans_elkan_results[42-1e-100-dense-blobs]"
- reason: The signs of the principal components may be swapped with cuml.accel (insignificant deviation)
  condition: cuda-python >= 12.9
  strict: false
  tests:
  - "sklearn.decomposition.tests.test_sparse_pca::test_equivalence_components_pca_spca[42]"
- reason: 'cuml.accel bug: Missing components_ attribute'
  tests:
  - "sklearn.cluster.tests.test_dbscan::test_dbscan_no_core_samples[csr_array]"
  - "sklearn.cluster.tests.test_dbscan::test_dbscan_no_core_samples[csr_matrix]"
