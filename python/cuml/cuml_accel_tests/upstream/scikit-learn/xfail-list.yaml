- reason: Test should fail with cuml.accel
  marker: cuml_accel_bugs
  tests:
  - "sklearn.cross_decomposition.tests.test_pls::test_pls_regression_fit_1d_y"
  - "sklearn.datasets.tests.test_arff_parser::test_pandas_arff_parser_strip_no_quotes[_liac_arff_parser]"
  - "sklearn.decomposition.tests.test_pca::test_infer_dim_by_explained_variance[X0-0.95-2]"
  - "sklearn.decomposition.tests.test_pca::test_infer_dim_by_explained_variance[X1-0.01-1]"
  - "sklearn.decomposition.tests.test_pca::test_infer_dim_by_explained_variance[X2-0.5-2]"
  - "sklearn.decomposition.tests.test_pca::test_n_components_none[data0-arpack-3]"
  - "sklearn.decomposition.tests.test_pca::test_n_components_none[data1-arpack-3]"
  - "sklearn.decomposition.tests.test_pca::test_pca_n_components_mostly_explained_variance_ratio"
  - "sklearn.decomposition.tests.test_pca::test_pca_score3"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-1-arpack-csc_array-1-0.01]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-1-arpack-csc_array-1-0.1]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-1-arpack-csc_array-1-0.3]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-1-arpack-csc_array-10-0.01]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-1-arpack-csc_array-10-0.1]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-1-arpack-csc_array-10-0.3]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-1-arpack-csc_array-2-0.01]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-1-arpack-csc_array-2-0.1]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-1-arpack-csc_array-2-0.3]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-1-arpack-csc_matrix-1-0.01]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-1-arpack-csc_matrix-1-0.1]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-1-arpack-csc_matrix-1-0.3]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-1-arpack-csc_matrix-10-0.01]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-1-arpack-csc_matrix-10-0.1]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-1-arpack-csc_matrix-10-0.3]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-1-arpack-csc_matrix-2-0.01]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-1-arpack-csc_matrix-2-0.1]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-1-arpack-csc_matrix-2-0.3]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-1-arpack-csr_array-1-0.01]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-1-arpack-csr_array-1-0.1]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-1-arpack-csr_array-1-0.3]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-1-arpack-csr_array-10-0.01]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-1-arpack-csr_array-10-0.1]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-1-arpack-csr_array-10-0.3]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-1-arpack-csr_array-2-0.01]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-1-arpack-csr_array-2-0.1]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-1-arpack-csr_array-2-0.3]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-1-arpack-csr_matrix-1-0.01]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-1-arpack-csr_matrix-1-0.1]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-1-arpack-csr_matrix-1-0.3]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-1-arpack-csr_matrix-10-0.01]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-1-arpack-csr_matrix-10-0.1]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-1-arpack-csr_matrix-10-0.3]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-1-arpack-csr_matrix-2-0.01]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-1-arpack-csr_matrix-2-0.1]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-1-arpack-csr_matrix-2-0.3]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-10-arpack-csc_array-1-0.01]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-10-arpack-csc_array-1-0.1]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-10-arpack-csc_array-1-0.3]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-10-arpack-csc_array-10-0.01]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-10-arpack-csc_array-10-0.1]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-10-arpack-csc_array-10-0.3]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-10-arpack-csc_array-2-0.01]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-10-arpack-csc_array-2-0.1]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-10-arpack-csc_array-2-0.3]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-10-arpack-csc_matrix-1-0.01]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-10-arpack-csc_matrix-1-0.1]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-10-arpack-csc_matrix-1-0.3]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-10-arpack-csc_matrix-10-0.01]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-10-arpack-csc_matrix-10-0.1]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-10-arpack-csc_matrix-10-0.3]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-10-arpack-csc_matrix-2-0.01]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-10-arpack-csc_matrix-2-0.1]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-10-arpack-csc_matrix-2-0.3]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-10-arpack-csr_array-1-0.01]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-10-arpack-csr_array-1-0.1]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-10-arpack-csr_array-1-0.3]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-10-arpack-csr_array-10-0.01]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-10-arpack-csr_array-10-0.1]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-10-arpack-csr_array-10-0.3]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-10-arpack-csr_array-2-0.01]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-10-arpack-csr_array-2-0.1]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-10-arpack-csr_array-2-0.3]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-10-arpack-csr_matrix-1-0.01]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-10-arpack-csr_matrix-1-0.1]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-10-arpack-csr_matrix-1-0.3]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-10-arpack-csr_matrix-10-0.01]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-10-arpack-csr_matrix-10-0.1]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-10-arpack-csr_matrix-10-0.3]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-10-arpack-csr_matrix-2-0.01]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-10-arpack-csr_matrix-2-0.1]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-10-arpack-csr_matrix-2-0.3]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-100-arpack-csc_array-1-0.01]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-100-arpack-csc_array-1-0.1]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-100-arpack-csc_array-1-0.3]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-100-arpack-csc_array-10-0.01]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-100-arpack-csc_array-10-0.1]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-100-arpack-csc_array-10-0.3]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-100-arpack-csc_array-2-0.01]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-100-arpack-csc_array-2-0.1]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-100-arpack-csc_array-2-0.3]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-100-arpack-csc_matrix-1-0.01]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-100-arpack-csc_matrix-1-0.1]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-100-arpack-csc_matrix-1-0.3]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-100-arpack-csc_matrix-10-0.01]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-100-arpack-csc_matrix-10-0.1]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-100-arpack-csc_matrix-10-0.3]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-100-arpack-csc_matrix-2-0.01]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-100-arpack-csc_matrix-2-0.1]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-100-arpack-csc_matrix-2-0.3]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-100-arpack-csr_array-1-0.01]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-100-arpack-csr_array-1-0.1]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-100-arpack-csr_array-1-0.3]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-100-arpack-csr_array-10-0.01]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-100-arpack-csr_array-10-0.1]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-100-arpack-csr_array-10-0.3]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-100-arpack-csr_array-2-0.01]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-100-arpack-csr_array-2-0.1]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-100-arpack-csr_array-2-0.3]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-100-arpack-csr_matrix-1-0.01]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-100-arpack-csr_matrix-1-0.1]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-100-arpack-csr_matrix-1-0.3]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-100-arpack-csr_matrix-10-0.01]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-100-arpack-csr_matrix-10-0.1]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-100-arpack-csr_matrix-10-0.3]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-100-arpack-csr_matrix-2-0.01]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-100-arpack-csr_matrix-2-0.1]"
  - "sklearn.decomposition.tests.test_pca::test_pca_sparse[42-100-arpack-csr_matrix-2-0.3]"
  - "sklearn.decomposition.tests.test_pca::test_pca_validation[arpack-0-must be between 1 and min\\\\(n_samples, n_features\\\\)-data0]"
  - "sklearn.decomposition.tests.test_pca::test_pca_validation[arpack-0-must be between 1 and min\\\\(n_samples, n_features\\\\)-data1]"
  - "sklearn.decomposition.tests.test_pca::test_pca_validation[arpack-2-must be strictly less than min-data0]"
  - "sklearn.decomposition.tests.test_pca::test_pca_validation[arpack-2-must be strictly less than min-data1]"
  - "sklearn.decomposition.tests.test_pca::test_pca_validation[auto-3-n_components=3 must be between 0 and min\\\\(n_samples, n_features\\\\)=2 with svd_solver='full'-data0]"
  - "sklearn.decomposition.tests.test_pca::test_pca_validation[auto-3-n_components=3 must be between 0 and min\\\\(n_samples, n_features\\\\)=2 with svd_solver='full'-data1]"
  - "sklearn.decomposition.tests.test_pca::test_pca_validation[randomized-0-must be between 1 and min\\\\(n_samples, n_features\\\\)-data0]"
  - "sklearn.decomposition.tests.test_pca::test_pca_validation[randomized-0-must be between 1 and min\\\\(n_samples, n_features\\\\)-data1]"
  - "sklearn.decomposition.tests.test_pca::test_sparse_pca_solver_error[42-csc_array-full]"
  - "sklearn.decomposition.tests.test_pca::test_sparse_pca_solver_error[42-csc_array-randomized]"
  - "sklearn.decomposition.tests.test_pca::test_sparse_pca_solver_error[42-csc_matrix-full]"
  - "sklearn.decomposition.tests.test_pca::test_sparse_pca_solver_error[42-csc_matrix-randomized]"
  - "sklearn.decomposition.tests.test_pca::test_sparse_pca_solver_error[42-csr_array-full]"
  - "sklearn.decomposition.tests.test_pca::test_sparse_pca_solver_error[42-csr_array-randomized]"
  - "sklearn.decomposition.tests.test_pca::test_sparse_pca_solver_error[42-csr_matrix-full]"
  - "sklearn.decomposition.tests.test_pca::test_sparse_pca_solver_error[42-csr_matrix-randomized]"
  - "sklearn.decomposition.tests.test_truncated_svd::test_truncated_svd_eq_pca"
  - "sklearn.ensemble.tests.test_forest::test_1d_input[RandomForestClassifier]"
  - "sklearn.ensemble.tests.test_forest::test_1d_input[RandomForestRegressor]"
  - "sklearn.ensemble.tests.test_forest::test_backend_respected"
  - "sklearn.ensemble.tests.test_forest::test_class_weights[RandomForestClassifier]"
  - "sklearn.ensemble.tests.test_forest::test_classes_shape[RandomForestClassifier]"
  - "sklearn.ensemble.tests.test_forest::test_dtype_convert"
  - "sklearn.ensemble.tests.test_forest::test_estimators_samples[RandomForestClassifier-False-1]"
  - "sklearn.ensemble.tests.test_forest::test_estimators_samples[RandomForestClassifier-False-None]"
  - "sklearn.ensemble.tests.test_forest::test_estimators_samples[RandomForestClassifier-True-1]"
  - "sklearn.ensemble.tests.test_forest::test_estimators_samples[RandomForestClassifier-True-None]"
  - "sklearn.ensemble.tests.test_forest::test_estimators_samples[RandomForestRegressor-False-1]"
  - "sklearn.ensemble.tests.test_forest::test_estimators_samples[RandomForestRegressor-False-None]"
  - "sklearn.ensemble.tests.test_forest::test_estimators_samples[RandomForestRegressor-True-1]"
  - "sklearn.ensemble.tests.test_forest::test_estimators_samples[RandomForestRegressor-True-None]"
  - "sklearn.ensemble.tests.test_forest::test_forest_feature_importances_sum"
  - "sklearn.ensemble.tests.test_forest::test_forest_y_sparse[csr_array]"
  - "sklearn.ensemble.tests.test_forest::test_forest_y_sparse[csr_matrix]"
  - "sklearn.ensemble.tests.test_forest::test_importances[RandomForestClassifier-gini-float32]"
  - "sklearn.ensemble.tests.test_forest::test_importances[RandomForestClassifier-gini-float64]"
  - "sklearn.ensemble.tests.test_forest::test_importances[RandomForestRegressor-squared_error-float32]"
  - "sklearn.ensemble.tests.test_forest::test_importances[RandomForestRegressor-squared_error-float64]"
  - "sklearn.ensemble.tests.test_forest::test_max_leaf_nodes_max_depth[RandomForestClassifier]"
  - "sklearn.ensemble.tests.test_forest::test_max_leaf_nodes_max_depth[RandomForestRegressor]"
  - "sklearn.ensemble.tests.test_forest::test_max_samples_bootstrap[RandomForestClassifier]"
  - "sklearn.ensemble.tests.test_forest::test_max_samples_bootstrap[RandomForestRegressor]"
  - "sklearn.ensemble.tests.test_forest::test_min_impurity_decrease"
  - "sklearn.ensemble.tests.test_forest::test_min_samples_leaf[RandomForestClassifier]"
  - "sklearn.ensemble.tests.test_forest::test_min_samples_leaf[RandomForestRegressor]"
  - "sklearn.ensemble.tests.test_forest::test_min_samples_split[RandomForestClassifier]"
  - "sklearn.ensemble.tests.test_forest::test_min_samples_split[RandomForestRegressor]"
  - "sklearn.ensemble.tests.test_forest::test_missing_value_is_predictive[RandomForestClassifier]"
  - "sklearn.ensemble.tests.test_forest::test_missing_value_is_predictive[RandomForestRegressor]"
  - "sklearn.ensemble.tests.test_forest::test_missing_values_is_resilient[make_regression-RandomForestRegressor]"
  - "sklearn.ensemble.tests.test_forest::test_multioutput[RandomForestClassifier]"
  - "sklearn.ensemble.tests.test_forest::test_multioutput[RandomForestRegressor]"
  - "sklearn.ensemble.tests.test_forest::test_multioutput_string[RandomForestClassifier]"
  - "sklearn.ensemble.tests.test_forest::test_oob_not_computed_twice[RandomForestClassifier]"
  - "sklearn.ensemble.tests.test_forest::test_oob_not_computed_twice[RandomForestRegressor]"
  - "sklearn.ensemble.tests.test_forest::test_poisson_y_positive_check"
  - "sklearn.ensemble.tests.test_forest::test_probability[RandomForestClassifier]"
  - "sklearn.ensemble.tests.test_forest::test_sparse_input[coo_array-RandomForestClassifier]"
  - "sklearn.ensemble.tests.test_forest::test_sparse_input[coo_array-RandomForestRegressor]"
  - "sklearn.ensemble.tests.test_forest::test_sparse_input[coo_matrix-RandomForestClassifier]"
  - "sklearn.ensemble.tests.test_forest::test_sparse_input[coo_matrix-RandomForestRegressor]"
  - "sklearn.ensemble.tests.test_forest::test_sparse_input[csc_array-RandomForestClassifier]"
  - "sklearn.ensemble.tests.test_forest::test_sparse_input[csc_array-RandomForestRegressor]"
  - "sklearn.ensemble.tests.test_forest::test_sparse_input[csc_matrix-RandomForestClassifier]"
  - "sklearn.ensemble.tests.test_forest::test_sparse_input[csc_matrix-RandomForestRegressor]"
  - "sklearn.ensemble.tests.test_forest::test_sparse_input[csr_array-RandomForestClassifier]"
  - "sklearn.ensemble.tests.test_forest::test_sparse_input[csr_array-RandomForestRegressor]"
  - "sklearn.ensemble.tests.test_forest::test_sparse_input[csr_matrix-RandomForestClassifier]"
  - "sklearn.ensemble.tests.test_forest::test_sparse_input[csr_matrix-RandomForestRegressor]"
  - "sklearn.ensemble.tests.test_forest::test_warm_start[RandomForestClassifier]"
  - "sklearn.ensemble.tests.test_forest::test_warm_start[RandomForestRegressor]"
  - "sklearn.ensemble.tests.test_forest::test_warm_start_oob[RandomForestRegressor]"
  - "sklearn.ensemble.tests.test_stacking::test_stacking_classifier_multilabel_auto_predict[False-auto]"
  - "sklearn.ensemble.tests.test_stacking::test_stacking_classifier_multilabel_auto_predict[False-predict]"
  - "sklearn.ensemble.tests.test_stacking::test_stacking_classifier_multilabel_auto_predict[True-auto]"
  - "sklearn.ensemble.tests.test_stacking::test_stacking_classifier_multilabel_auto_predict[True-predict]"
  - "sklearn.ensemble.tests.test_stacking::test_stacking_classifier_multilabel_predict_proba[RandomForestClassifier]"
  - "sklearn.ensemble.tests.test_stacking::test_stacking_without_n_features_in[make_classification-StackingClassifier-LogisticRegression]"
  - "sklearn.ensemble.tests.test_stacking::test_stacking_without_n_features_in[make_regression-StackingRegressor-LinearRegression]"
  - "sklearn.ensemble.tests.test_voting::test_parallel_fit[42]"
  - "sklearn.ensemble.tests.test_voting::test_predict_on_toy_problem[42]"
  - "sklearn.ensemble.tests.test_voting::test_sample_weight[42]"
  - "sklearn.ensemble.tests.test_voting::test_set_estimator_drop"
  - "sklearn.ensemble.tests.test_weight_boosting::test_estimator"
  - "sklearn.feature_selection.tests.test_from_model::test_feature_importances"
  - "sklearn.feature_selection.tests.test_from_model::test_prefit_get_feature_names_out"
  - "sklearn.feature_selection.tests.test_from_model::test_threshold_string"
  - "sklearn.feature_selection.tests.test_rfe::test_multioutput[RFECV]"
  - "sklearn.feature_selection.tests.test_rfe::test_multioutput[RFE]"
  - "sklearn.feature_selection.tests.test_rfe::test_rfe_cv_groups"
  - "sklearn.feature_selection.tests.test_rfe::test_rfe_features_importance"
  - "sklearn.inspection.tests.test_partial_dependence::test_multiclass_multioutput[RandomForestClassifier]"
  - "sklearn.inspection.tests.test_partial_dependence::test_recursion_decision_tree_vs_forest_and_gbdt[0]"
  - "sklearn.inspection.tests.test_permutation_importance::test_robustness_to_high_cardinality_noisy_feature[0.5-1]"
  - "sklearn.inspection.tests.test_permutation_importance::test_robustness_to_high_cardinality_noisy_feature[0.5-2]"
  - "sklearn.inspection.tests.test_permutation_importance::test_robustness_to_high_cardinality_noisy_feature[1.0-1]"
  - "sklearn.inspection.tests.test_permutation_importance::test_robustness_to_high_cardinality_noisy_feature[1.0-2]"
  - "sklearn.linear_model.tests.test_base::test_inplace_data_preprocessing[42-False-None]"
  - "sklearn.linear_model.tests.test_base::test_inplace_data_preprocessing[42-True-None]"
  - "sklearn.linear_model.tests.test_base::test_linear_regression"
  - "sklearn.linear_model.tests.test_base::test_linear_regression_pd_sparse_dataframe_warning"
  - "sklearn.linear_model.tests.test_base::test_raises_value_error_if_sample_weights_greater_than_1d[2-3]"
  - "sklearn.linear_model.tests.test_base::test_raises_value_error_if_sample_weights_greater_than_1d[3-2]"
  - "sklearn.linear_model.tests.test_common::test_balance_property[42-True-LogisticRegression]"
  - "sklearn.linear_model.tests.test_coordinate_descent::test_check_input_false"
  - "sklearn.linear_model.tests.test_coordinate_descent::test_elasticnet_precompute_gram_weighted_samples"
  - "sklearn.linear_model.tests.test_coordinate_descent::test_enet_coordinate_descent[Lasso-1-kwargs1]"
  - "sklearn.linear_model.tests.test_coordinate_descent::test_enet_copy_X_False_check_input_False"
  - "sklearn.linear_model.tests.test_coordinate_descent::test_enet_float_precision"
  - "sklearn.linear_model.tests.test_coordinate_descent::test_enet_multitarget"
  - "sklearn.linear_model.tests.test_coordinate_descent::test_enet_nonfinite_params"
  - "sklearn.linear_model.tests.test_coordinate_descent::test_enet_sample_weight_consistency[42-None-False-0.01-False]"
  - "sklearn.linear_model.tests.test_coordinate_descent::test_enet_sample_weight_consistency[42-None-False-0.01-True]"
  - "sklearn.linear_model.tests.test_coordinate_descent::test_enet_toy"
  - "sklearn.linear_model.tests.test_coordinate_descent::test_lassoCV_does_not_set_precompute[False-False]"
  - "sklearn.linear_model.tests.test_coordinate_descent::test_lassoCV_does_not_set_precompute[auto-False]"
  - "sklearn.linear_model.tests.test_coordinate_descent::test_lasso_alpha_warning"
  - "sklearn.linear_model.tests.test_coordinate_descent::test_lasso_dual_gap"
  - "sklearn.linear_model.tests.test_coordinate_descent::test_lasso_readonly_data"
  - "sklearn.linear_model.tests.test_coordinate_descent::test_lasso_toy"
  - "sklearn.linear_model.tests.test_coordinate_descent::test_lasso_zero"
  - "sklearn.linear_model.tests.test_coordinate_descent::test_warm_start_convergence"
  - "sklearn.linear_model.tests.test_coordinate_descent::test_warm_start_convergence_with_regularizer_decrement"
  - "sklearn.linear_model.tests.test_ransac::test_perfect_horizontal_line"
  - "sklearn.linear_model.tests.test_ransac::test_ransac_exceed_max_skips"
  - "sklearn.linear_model.tests.test_ransac::test_ransac_min_n_samples"
  - "sklearn.linear_model.tests.test_ransac::test_ransac_no_valid_data"
  - "sklearn.linear_model.tests.test_ransac::test_ransac_no_valid_model"
  - "sklearn.linear_model.tests.test_ransac::test_ransac_warn_exceed_max_skips"
  - "sklearn.linear_model.tests.test_ridge::test_dtype_match_cholesky"
  - "sklearn.linear_model.tests.test_ridge::test_raises_value_error_if_sample_weights_greater_than_1d"
  - "sklearn.linear_model.tests.test_ridge::test_ridge_cv_individual_penalties"
  - "sklearn.linear_model.tests.test_ridge::test_ridge_individual_penalties"
  - "sklearn.linear_model.tests.test_ridge::test_ridge_sample_weight_consistency[42-sag-tall-None-False]"
  - "sklearn.linear_model.tests.test_ridge::test_ridge_sample_weight_consistency[42-sag-tall-csr_array-False]"
  - "sklearn.linear_model.tests.test_ridge::test_ridge_sample_weight_consistency[42-sag-tall-csr_matrix-False]"
  - "sklearn.linear_model.tests.test_ridge::test_ridge_sample_weight_consistency[42-sag-wide-None-False]"
  - "sklearn.linear_model.tests.test_ridge::test_ridge_sample_weight_consistency[42-sag-wide-csr_array-False]"
  - "sklearn.linear_model.tests.test_ridge::test_ridge_sample_weight_consistency[42-sag-wide-csr_matrix-False]"
  - "sklearn.linear_model.tests.test_ridge::test_ridge_sample_weight_consistency[42-saga-tall-None-False]"
  - "sklearn.linear_model.tests.test_ridge::test_ridge_sample_weight_consistency[42-saga-tall-csr_array-False]"
  - "sklearn.linear_model.tests.test_ridge::test_ridge_sample_weight_consistency[42-saga-tall-csr_matrix-False]"
  - "sklearn.linear_model.tests.test_ridge::test_ridge_sample_weight_consistency[42-saga-wide-None-False]"
  - "sklearn.linear_model.tests.test_ridge::test_ridge_sample_weight_consistency[42-saga-wide-csr_array-False]"
  - "sklearn.linear_model.tests.test_ridge::test_ridge_sample_weight_consistency[42-saga-wide-csr_matrix-False]"
  - "sklearn.linear_model.tests.test_ridge::test_ridgecv_sample_weight"
  - "sklearn.linear_model.tests.test_sag::test_step_size_alpha_error"
  - "sklearn.linear_model.tests.test_sparse_coordinate_descent::test_enet_toy_explicit_sparse_input[lil_array]"
  - "sklearn.linear_model.tests.test_sparse_coordinate_descent::test_enet_toy_explicit_sparse_input[lil_matrix]"
  - "sklearn.linear_model.tests.test_sparse_coordinate_descent::test_enet_toy_list_input[csc_array-False]"
  - "sklearn.linear_model.tests.test_sparse_coordinate_descent::test_enet_toy_list_input[csc_array-True]"
  - "sklearn.linear_model.tests.test_sparse_coordinate_descent::test_enet_toy_list_input[csc_matrix-False]"
  - "sklearn.linear_model.tests.test_sparse_coordinate_descent::test_enet_toy_list_input[csc_matrix-True]"
  - "sklearn.linear_model.tests.test_sparse_coordinate_descent::test_same_multiple_output_sparse_dense[coo_array]"
  - "sklearn.linear_model.tests.test_sparse_coordinate_descent::test_same_multiple_output_sparse_dense[coo_matrix]"
  - "sklearn.linear_model.tests.test_sparse_coordinate_descent::test_sparse_dense_equality[csc_array-False-6-24-False-ElasticNet]"
  - "sklearn.linear_model.tests.test_sparse_coordinate_descent::test_sparse_dense_equality[csc_array-False-6-24-False-Lasso]"
  - "sklearn.linear_model.tests.test_sparse_coordinate_descent::test_sparse_dense_equality[csc_array-False-6-24-True-ElasticNet]"
  - "sklearn.linear_model.tests.test_sparse_coordinate_descent::test_sparse_dense_equality[csc_array-False-6-24-True-Lasso]"
  - "sklearn.linear_model.tests.test_sparse_coordinate_descent::test_sparse_dense_equality[csc_array-True-6-24-False-ElasticNet]"
  - "sklearn.linear_model.tests.test_sparse_coordinate_descent::test_sparse_dense_equality[csc_array-True-6-24-False-Lasso]"
  - "sklearn.linear_model.tests.test_sparse_coordinate_descent::test_sparse_dense_equality[csc_array-True-6-24-True-ElasticNet]"
  - "sklearn.linear_model.tests.test_sparse_coordinate_descent::test_sparse_dense_equality[csc_array-True-6-24-True-Lasso]"
  - "sklearn.linear_model.tests.test_sparse_coordinate_descent::test_sparse_dense_equality[csc_matrix-False-6-24-False-ElasticNet]"
  - "sklearn.linear_model.tests.test_sparse_coordinate_descent::test_sparse_dense_equality[csc_matrix-False-6-24-False-Lasso]"
  - "sklearn.linear_model.tests.test_sparse_coordinate_descent::test_sparse_dense_equality[csc_matrix-False-6-24-True-ElasticNet]"
  - "sklearn.linear_model.tests.test_sparse_coordinate_descent::test_sparse_dense_equality[csc_matrix-False-6-24-True-Lasso]"
  - "sklearn.linear_model.tests.test_sparse_coordinate_descent::test_sparse_dense_equality[csc_matrix-True-6-24-False-ElasticNet]"
  - "sklearn.linear_model.tests.test_sparse_coordinate_descent::test_sparse_dense_equality[csc_matrix-True-6-24-False-Lasso]"
  - "sklearn.linear_model.tests.test_sparse_coordinate_descent::test_sparse_dense_equality[csc_matrix-True-6-24-True-ElasticNet]"
  - "sklearn.linear_model.tests.test_sparse_coordinate_descent::test_sparse_dense_equality[csc_matrix-True-6-24-True-Lasso]"
  - "sklearn.linear_model.tests.test_sparse_coordinate_descent::test_sparse_lasso_not_as_toy_dataset[csc_array]"
  - "sklearn.linear_model.tests.test_sparse_coordinate_descent::test_sparse_lasso_not_as_toy_dataset[csc_matrix]"
  - "sklearn.manifold.tests.test_t_sne::test_accessible_kl_divergence"
  - "sklearn.manifold.tests.test_t_sne::test_bh_match_exact"
  - "sklearn.manifold.tests.test_t_sne::test_binary_perplexity_stability"
  - "sklearn.manifold.tests.test_t_sne::test_fit_transform_csr_matrix[csr_array-barnes_hut]"
  - "sklearn.manifold.tests.test_t_sne::test_fit_transform_csr_matrix[csr_array-exact]"
  - "sklearn.manifold.tests.test_t_sne::test_n_iter_without_progress"
  - "sklearn.manifold.tests.test_t_sne::test_pca_initialization_not_compatible_with_sparse_input[csr_array]"
  - "sklearn.manifold.tests.test_t_sne::test_pca_initialization_not_compatible_with_sparse_input[csr_matrix]"
  - "sklearn.manifold.tests.test_t_sne::test_preserve_trustworthiness_approximately[pca-barnes_hut]"
  - "sklearn.manifold.tests.test_t_sne::test_preserve_trustworthiness_approximately[pca-exact]"
  - "sklearn.manifold.tests.test_t_sne::test_preserve_trustworthiness_approximately[random-barnes_hut]"
  - "sklearn.manifold.tests.test_t_sne::test_preserve_trustworthiness_approximately[random-exact]"
  - "sklearn.manifold.tests.test_t_sne::test_tsne_n_jobs[barnes_hut]"
  - "sklearn.manifold.tests.test_t_sne::test_tsne_n_jobs[exact]"
  - "sklearn.manifold.tests.test_t_sne::test_tsne_perplexity_validation[20]"
  - "sklearn.manifold.tests.test_t_sne::test_tsne_perplexity_validation[30]"
  - "sklearn.manifold.tests.test_t_sne::test_tsne_with_different_distance_metrics[barnes_hut-cosine-cosine_distances]"
  - "sklearn.manifold.tests.test_t_sne::test_tsne_with_different_distance_metrics[barnes_hut-manhattan-manhattan_distances]"
  - "sklearn.manifold.tests.test_t_sne::test_tsne_with_different_distance_metrics[exact-cosine-cosine_distances]"
  - "sklearn.manifold.tests.test_t_sne::test_tsne_with_different_distance_metrics[exact-manhattan-manhattan_distances]"
  - "sklearn.manifold.tests.test_t_sne::test_verbose"
  - "sklearn.metrics.tests.test_pairwise::test_euclidean_distances_extreme_values[1-float64-1e-08-0.99]"
  - "sklearn.metrics.tests.test_pairwise::test_euclidean_distances_extreme_values[1000000-float64-1e-08-0.99]"
  - "sklearn.model_selection.tests.test_validation::test_cross_val_predict_with_method_multilabel_rf"
  - "sklearn.model_selection.tests.test_validation::test_cross_val_predict_with_method_multilabel_rf_rare_class"
  - "sklearn.neighbors.tests.test_neighbors::test_KNeighborsRegressor_multioutput_uniform_weight"
  - "sklearn.neighbors.tests.test_neighbors::test_auto_algorithm[X3-euclidean-None-kd_tree]"
  - "sklearn.neighbors.tests.test_neighbors::test_auto_algorithm[X4-seuclidean-metric_params4-ball_tree]"
  - "sklearn.neighbors.tests.test_neighbors::test_dtype_convert"
  - "sklearn.neighbors.tests.test_neighbors::test_k_and_radius_neighbors_X_None[auto]"
  - "sklearn.neighbors.tests.test_neighbors::test_k_and_radius_neighbors_X_None[ball_tree]"
  - "sklearn.neighbors.tests.test_neighbors::test_k_and_radius_neighbors_X_None[brute]"
  - "sklearn.neighbors.tests.test_neighbors::test_k_and_radius_neighbors_X_None[kd_tree]"
  - "sklearn.neighbors.tests.test_neighbors::test_k_and_radius_neighbors_duplicates[auto]"
  - "sklearn.neighbors.tests.test_neighbors::test_k_and_radius_neighbors_duplicates[ball_tree]"
  - "sklearn.neighbors.tests.test_neighbors::test_k_and_radius_neighbors_duplicates[brute]"
  - "sklearn.neighbors.tests.test_neighbors::test_k_and_radius_neighbors_duplicates[kd_tree]"
  - "sklearn.neighbors.tests.test_neighbors::test_k_and_radius_neighbors_train_is_not_query"
  - "sklearn.neighbors.tests.test_neighbors::test_kneighbors_classifier[float64-uniform-auto]"
  - "sklearn.neighbors.tests.test_neighbors::test_kneighbors_classifier[float64-uniform-ball_tree]"
  - "sklearn.neighbors.tests.test_neighbors::test_kneighbors_classifier[float64-uniform-brute]"
  - "sklearn.neighbors.tests.test_neighbors::test_kneighbors_classifier[float64-uniform-kd_tree]"
  - "sklearn.neighbors.tests.test_neighbors::test_kneighbors_classifier_predict_proba[float64]"
  - "sklearn.neighbors.tests.test_neighbors::test_kneighbors_classifier_sparse"
  - "sklearn.neighbors.tests.test_neighbors::test_kneighbors_regressor_sparse"
  - "sklearn.neighbors.tests.test_neighbors::test_metric_params_interface"
  - "sklearn.neighbors.tests.test_neighbors::test_nearest_neighbors_validate_params"
  - "sklearn.neighbors.tests.test_neighbors::test_neigh_predictions_algorithm_agnosticity[float64-KNeighborsClassifier-100-1000-chebyshev-100-100-10]"
  - "sklearn.neighbors.tests.test_neighbors::test_neigh_predictions_algorithm_agnosticity[float64-KNeighborsClassifier-100-1000-cityblock-100-100-10]"
  - "sklearn.neighbors.tests.test_neighbors::test_neigh_predictions_algorithm_agnosticity[float64-KNeighborsClassifier-100-1000-euclidean-100-100-10]"
  - "sklearn.neighbors.tests.test_neighbors::test_neigh_predictions_algorithm_agnosticity[float64-KNeighborsClassifier-100-1000-l1-100-100-10]"
  - "sklearn.neighbors.tests.test_neighbors::test_neigh_predictions_algorithm_agnosticity[float64-KNeighborsClassifier-100-1000-l2-100-100-10]"
  - "sklearn.neighbors.tests.test_neighbors::test_neigh_predictions_algorithm_agnosticity[float64-KNeighborsClassifier-100-1000-manhattan-100-100-10]"
  - "sklearn.neighbors.tests.test_neighbors::test_neigh_predictions_algorithm_agnosticity[float64-KNeighborsClassifier-100-1000-minkowski-100-100-10]"
  - "sklearn.neighbors.tests.test_neighbors::test_neigh_predictions_algorithm_agnosticity[float64-KNeighborsClassifier-50-500-chebyshev-100-100-10]"
  - "sklearn.neighbors.tests.test_neighbors::test_neigh_predictions_algorithm_agnosticity[float64-KNeighborsClassifier-50-500-cityblock-100-100-10]"
  - "sklearn.neighbors.tests.test_neighbors::test_neigh_predictions_algorithm_agnosticity[float64-KNeighborsClassifier-50-500-euclidean-100-100-10]"
  - "sklearn.neighbors.tests.test_neighbors::test_neigh_predictions_algorithm_agnosticity[float64-KNeighborsClassifier-50-500-l1-100-100-10]"
  - "sklearn.neighbors.tests.test_neighbors::test_neigh_predictions_algorithm_agnosticity[float64-KNeighborsClassifier-50-500-l2-100-100-10]"
  - "sklearn.neighbors.tests.test_neighbors::test_neigh_predictions_algorithm_agnosticity[float64-KNeighborsClassifier-50-500-manhattan-100-100-10]"
  - "sklearn.neighbors.tests.test_neighbors::test_neigh_predictions_algorithm_agnosticity[float64-KNeighborsClassifier-50-500-minkowski-100-100-10]"
  - "sklearn.neighbors.tests.test_neighbors::test_neigh_predictions_algorithm_agnosticity[float64-KNeighborsRegressor-100-1000-DM_euclidean-100-100-10]"
  - "sklearn.neighbors.tests.test_neighbors::test_neigh_predictions_algorithm_agnosticity[float64-KNeighborsRegressor-100-1000-chebyshev-100-100-10]"
  - "sklearn.neighbors.tests.test_neighbors::test_neigh_predictions_algorithm_agnosticity[float64-KNeighborsRegressor-100-1000-cityblock-100-100-10]"
  - "sklearn.neighbors.tests.test_neighbors::test_neigh_predictions_algorithm_agnosticity[float64-KNeighborsRegressor-100-1000-euclidean-100-100-10]"
  - "sklearn.neighbors.tests.test_neighbors::test_neigh_predictions_algorithm_agnosticity[float64-KNeighborsRegressor-100-1000-l1-100-100-10]"
  - "sklearn.neighbors.tests.test_neighbors::test_neigh_predictions_algorithm_agnosticity[float64-KNeighborsRegressor-100-1000-l2-100-100-10]"
  - "sklearn.neighbors.tests.test_neighbors::test_neigh_predictions_algorithm_agnosticity[float64-KNeighborsRegressor-100-1000-manhattan-100-100-10]"
  - "sklearn.neighbors.tests.test_neighbors::test_neigh_predictions_algorithm_agnosticity[float64-KNeighborsRegressor-100-1000-minkowski-100-100-10]"
  - "sklearn.neighbors.tests.test_neighbors::test_neigh_predictions_algorithm_agnosticity[float64-KNeighborsRegressor-50-500-DM_euclidean-100-100-10]"
  - "sklearn.neighbors.tests.test_neighbors::test_neigh_predictions_algorithm_agnosticity[float64-KNeighborsRegressor-50-500-chebyshev-100-100-10]"
  - "sklearn.neighbors.tests.test_neighbors::test_neigh_predictions_algorithm_agnosticity[float64-KNeighborsRegressor-50-500-cityblock-100-100-10]"
  - "sklearn.neighbors.tests.test_neighbors::test_neigh_predictions_algorithm_agnosticity[float64-KNeighborsRegressor-50-500-euclidean-100-100-10]"
  - "sklearn.neighbors.tests.test_neighbors::test_neigh_predictions_algorithm_agnosticity[float64-KNeighborsRegressor-50-500-l1-100-100-10]"
  - "sklearn.neighbors.tests.test_neighbors::test_neigh_predictions_algorithm_agnosticity[float64-KNeighborsRegressor-50-500-l2-100-100-10]"
  - "sklearn.neighbors.tests.test_neighbors::test_neigh_predictions_algorithm_agnosticity[float64-KNeighborsRegressor-50-500-manhattan-100-100-10]"
  - "sklearn.neighbors.tests.test_neighbors::test_neigh_predictions_algorithm_agnosticity[float64-KNeighborsRegressor-50-500-minkowski-100-100-10]"
  - "sklearn.neighbors.tests.test_neighbors::test_neighbors_iris"
  - "sklearn.neighbors.tests.test_neighbors::test_neighbors_minkowski_semimetric_algo_error[ball_tree-100-KNeighborsClassifier]"
  - "sklearn.neighbors.tests.test_neighbors::test_neighbors_minkowski_semimetric_algo_error[ball_tree-100-KNeighborsRegressor]"
  - "sklearn.neighbors.tests.test_neighbors::test_neighbors_minkowski_semimetric_algo_error[ball_tree-2-KNeighborsClassifier]"
  - "sklearn.neighbors.tests.test_neighbors::test_neighbors_minkowski_semimetric_algo_error[ball_tree-2-KNeighborsRegressor]"
  - "sklearn.neighbors.tests.test_neighbors::test_neighbors_minkowski_semimetric_algo_error[kd_tree-100-KNeighborsClassifier]"
  - "sklearn.neighbors.tests.test_neighbors::test_neighbors_minkowski_semimetric_algo_error[kd_tree-100-KNeighborsRegressor]"
  - "sklearn.neighbors.tests.test_neighbors::test_neighbors_minkowski_semimetric_algo_error[kd_tree-2-KNeighborsClassifier]"
  - "sklearn.neighbors.tests.test_neighbors::test_neighbors_minkowski_semimetric_algo_error[kd_tree-2-KNeighborsRegressor]"
  - "sklearn.neighbors.tests.test_neighbors::test_neighbors_minkowski_semimetric_algo_warn[auto-100-KNeighborsClassifier]"
  - "sklearn.neighbors.tests.test_neighbors::test_neighbors_minkowski_semimetric_algo_warn[auto-100-KNeighborsRegressor]"
  - "sklearn.neighbors.tests.test_neighbors::test_neighbors_minkowski_semimetric_algo_warn[auto-2-KNeighborsClassifier]"
  - "sklearn.neighbors.tests.test_neighbors::test_neighbors_minkowski_semimetric_algo_warn[auto-2-KNeighborsRegressor]"
  - "sklearn.neighbors.tests.test_neighbors::test_neighbors_minkowski_semimetric_algo_warn[brute-100-KNeighborsClassifier]"
  - "sklearn.neighbors.tests.test_neighbors::test_neighbors_minkowski_semimetric_algo_warn[brute-100-KNeighborsRegressor]"
  - "sklearn.neighbors.tests.test_neighbors::test_neighbors_minkowski_semimetric_algo_warn[brute-2-KNeighborsClassifier]"
  - "sklearn.neighbors.tests.test_neighbors::test_neighbors_minkowski_semimetric_algo_warn[brute-2-KNeighborsRegressor]"
  - "sklearn.neighbors.tests.test_neighbors::test_neighbors_validate_parameters[csr_array-KNeighborsClassifier]"
  - "sklearn.neighbors.tests.test_neighbors::test_neighbors_validate_parameters[csr_array-KNeighborsRegressor]"
  - "sklearn.neighbors.tests.test_neighbors::test_neighbors_validate_parameters[csr_matrix-KNeighborsClassifier]"
  - "sklearn.neighbors.tests.test_neighbors::test_neighbors_validate_parameters[csr_matrix-KNeighborsRegressor]"
  - "sklearn.neighbors.tests.test_neighbors::test_pipeline_with_nearest_neighbors_transformer"
  - "sklearn.neighbors.tests.test_neighbors::test_precomputed_cross_validation"
  - "sklearn.neighbors.tests.test_neighbors::test_unsupervised_inputs[float64-KNeighborsClassifier]"
  - "sklearn.neighbors.tests.test_neighbors::test_unsupervised_inputs[float64-KNeighborsRegressor]"
  - "sklearn.neighbors.tests.test_neighbors::test_unsupervised_inputs[float64-NearestNeighbors]"
  - "sklearn.neighbors.tests.test_neighbors::test_valid_brute_metric_for_auto_algorithm[float64-csr_array-cityblock]"
  - "sklearn.neighbors.tests.test_neighbors::test_valid_brute_metric_for_auto_algorithm[float64-csr_array-cosine]"
  - "sklearn.neighbors.tests.test_neighbors::test_valid_brute_metric_for_auto_algorithm[float64-csr_array-euclidean]"
  - "sklearn.neighbors.tests.test_neighbors::test_valid_brute_metric_for_auto_algorithm[float64-csr_array-l1]"
  - "sklearn.neighbors.tests.test_neighbors::test_valid_brute_metric_for_auto_algorithm[float64-csr_array-l2]"
  - "sklearn.neighbors.tests.test_neighbors::test_valid_brute_metric_for_auto_algorithm[float64-csr_array-manhattan]"
  - "sklearn.neighbors.tests.test_neighbors_pipeline::test_kneighbors_regressor"
  - "sklearn.neighbors.tests.test_neighbors_pipeline::test_tsne"
  - "sklearn.tests.test_common::test_estimators[NuSVC()-check_class_weight_classifiers]"
  - "sklearn.tests.test_common::test_estimators[NuSVC()-check_classifiers_one_label_sample_weights]"
  - "sklearn.tests.test_common::test_estimators[Pipeline(steps=[('scaler',StandardScaler()),('final_estimator',LogisticRegression())])-check_dont_overwrite_parameters]"
  - "sklearn.tests.test_common::test_estimators[Pipeline(steps=[('scaler',StandardScaler()),('final_estimator',LogisticRegression())])-check_estimators_overwrite_params]"
  - "sklearn.tests.test_common::test_estimators[Pipeline(steps=[('scaler',StandardScaler()),('final_estimator',Ridge())])-check_dont_overwrite_parameters]"
  - "sklearn.tests.test_common::test_estimators[Pipeline(steps=[('scaler',StandardScaler()),('final_estimator',Ridge())])-check_estimators_overwrite_params]"
  - "sklearn.tests.test_docstrings::test_docstring[GridSearchCV-None]"
  - "sklearn.tests.test_multioutput::test_multi_output_classes_[estimator0]"
  - "sklearn.tests.test_multioutput::test_multi_output_classification_sample_weights"
  - "sklearn.tests.test_multioutput::test_multi_target_sparse_regression[bsr_array]"
  - "sklearn.tests.test_multioutput::test_multi_target_sparse_regression[bsr_matrix]"
  - "sklearn.tests.test_multioutput::test_multi_target_sparse_regression[coo_array]"
  - "sklearn.tests.test_multioutput::test_multi_target_sparse_regression[coo_matrix]"
  - "sklearn.tests.test_multioutput::test_multi_target_sparse_regression[csc_array]"
  - "sklearn.tests.test_multioutput::test_multi_target_sparse_regression[csc_matrix]"
  - "sklearn.tests.test_multioutput::test_multi_target_sparse_regression[csr_array]"
  - "sklearn.tests.test_multioutput::test_multi_target_sparse_regression[csr_matrix]"
  - "sklearn.tests.test_multioutput::test_multi_target_sparse_regression[dok_array]"
  - "sklearn.tests.test_multioutput::test_multi_target_sparse_regression[dok_matrix]"
  - "sklearn.tests.test_multioutput::test_multi_target_sparse_regression[lil_array]"
  - "sklearn.tests.test_multioutput::test_multi_target_sparse_regression[lil_matrix]"
  - "sklearn.tests.test_public_functions::test_class_wrapper_param_validation[sklearn.cluster.dbscan-sklearn.cluster.DBSCAN]"
  - "sklearn.tests.test_public_functions::test_class_wrapper_param_validation[sklearn.cluster.k_means-sklearn.cluster.KMeans]"
  - "sklearn.utils.tests.test_estimator_checks::test_check_dataframe_column_names_consistency"
  - "sklearn.utils.tests.test_estimator_checks::test_check_estimator"
  - "sklearn.utils.tests.test_estimator_checks::test_check_estimator_clones"
  - "sklearn.utils.tests.test_validation::test_check_array_links_to_imputer_doc_only_for_X[asarray-X]"
- reason: Test should fail with cuml.accel (scikit-learn 1.4 and 1.5)
  marker: cuml_accel_bugs
  condition: scikit-learn<1.6
  tests:
  - "sklearn.tests.test_calibration::test_calibrated_classifier_cv_zeros_sample_weights_equivalence[False-isotonic]"
  - "sklearn.tests.test_calibration::test_calibrated_classifier_cv_zeros_sample_weights_equivalence[False-sigmoid]"
  - "sklearn.tests.test_calibration::test_calibrated_classifier_cv_zeros_sample_weights_equivalence[True-isotonic]"
  - "sklearn.tests.test_calibration::test_calibrated_classifier_cv_zeros_sample_weights_equivalence[True-sigmoid]"
  - "sklearn.tests.test_common::test_estimators[LogisticRegression()-check_sample_weights_invariance(kind=zeros)]"
  - "sklearn.tests.test_common::test_estimators[Pipeline(steps=[('scaler',StandardScaler()),('final_estimator',LogisticRegression())])-check_classifier_data_not_an_array]"
  - "sklearn.tests.test_common::test_estimators[Pipeline(steps=[('scaler',StandardScaler()),('final_estimator',LogisticRegression())])-check_classifiers_one_label]"
  - "sklearn.tests.test_common::test_estimators[Pipeline(steps=[('scaler',StandardScaler()),('final_estimator',LogisticRegression())])-check_classifiers_regression_target]"
  - "sklearn.tests.test_common::test_estimators[Pipeline(steps=[('scaler',StandardScaler()),('final_estimator',LogisticRegression())])-check_dtype_object]"
  - "sklearn.tests.test_common::test_estimators[Pipeline(steps=[('scaler',StandardScaler()),('final_estimator',LogisticRegression())])-check_estimators_nan_inf]"
  - "sklearn.tests.test_common::test_estimators[Pipeline(steps=[('scaler',StandardScaler()),('final_estimator',LogisticRegression())])-check_fit2d_1sample]"
  - "sklearn.tests.test_common::test_estimators[Pipeline(steps=[('scaler',StandardScaler()),('final_estimator',LogisticRegression())])-check_supervised_y_2d]"
  - "sklearn.tests.test_common::test_estimators[Pipeline(steps=[('scaler',StandardScaler()),('final_estimator',LogisticRegression())])-check_supervised_y_no_nan]"
  - "sklearn.tests.test_common::test_pandas_column_name_consistency[GridSearchCV(cv=2,estimator=LogisticRegression(),param_grid={'C':[0.1,1.0]})]"
  - "sklearn.tests.test_common::test_pandas_column_name_consistency[HalvingGridSearchCV(cv=2,estimator=LogisticRegression(),min_resources='smallest',param_grid={'C':[0.1,1.0]},random_state=0)1]"
  - "sklearn.tests.test_common::test_pandas_column_name_consistency[RandomizedSearchCV(cv=2,estimator=LogisticRegression(),param_distributions={'C':[0.1,1.0]},random_state=0)]"
  - "sklearn.tests.test_common::test_search_cv[GridSearchCV(cv=2,error_score='raise',estimator=Pipeline(steps=[('pca',PCA()),('logisticregression',LogisticRegression())]),param_grid={'logisticregression__C':[0.1,1.0]})-check_classifier_data_not_an_array]"
  - "sklearn.tests.test_common::test_search_cv[GridSearchCV(cv=2,error_score='raise',estimator=Pipeline(steps=[('pca',PCA()),('logisticregression',LogisticRegression())]),param_grid={'logisticregression__C':[0.1,1.0]})-check_classifiers_one_label]"
  - "sklearn.tests.test_common::test_search_cv[GridSearchCV(cv=2,error_score='raise',estimator=Pipeline(steps=[('pca',PCA()),('logisticregression',LogisticRegression())]),param_grid={'logisticregression__C':[0.1,1.0]})-check_classifiers_regression_target]"
  - "sklearn.tests.test_common::test_search_cv[GridSearchCV(cv=2,error_score='raise',estimator=Pipeline(steps=[('pca',PCA()),('logisticregression',LogisticRegression())]),param_grid={'logisticregression__C':[0.1,1.0]})-check_dtype_object]"
  - "sklearn.tests.test_common::test_search_cv[GridSearchCV(cv=2,error_score='raise',estimator=Pipeline(steps=[('pca',PCA()),('logisticregression',LogisticRegression())]),param_grid={'logisticregression__C':[0.1,1.0]})-check_estimators_empty_data_messages]"
  - "sklearn.tests.test_common::test_search_cv[GridSearchCV(cv=2,error_score='raise',estimator=Pipeline(steps=[('pca',PCA()),('logisticregression',LogisticRegression())]),param_grid={'logisticregression__C':[0.1,1.0]})-check_estimators_nan_inf]"
  - "sklearn.tests.test_common::test_search_cv[GridSearchCV(cv=2,error_score='raise',estimator=Pipeline(steps=[('pca',PCA()),('logisticregression',LogisticRegression())]),param_grid={'logisticregression__C':[0.1,1.0]})-check_fit1d]"
  - "sklearn.tests.test_common::test_search_cv[GridSearchCV(cv=2,error_score='raise',estimator=Pipeline(steps=[('pca',PCA()),('logisticregression',LogisticRegression())]),param_grid={'logisticregression__C':[0.1,1.0]})-check_fit2d_1feature]"
  - "sklearn.tests.test_common::test_search_cv[GridSearchCV(cv=2,error_score='raise',estimator=Pipeline(steps=[('pca',PCA()),('logisticregression',LogisticRegression())]),param_grid={'logisticregression__C':[0.1,1.0]})-check_fit2d_predict1d]"
  - "sklearn.tests.test_common::test_search_cv[GridSearchCV(cv=2,estimator=LogisticRegression(),param_grid={'C':[0.1,1.0]})-check_classifier_data_not_an_array]"
  - "sklearn.tests.test_common::test_search_cv[GridSearchCV(cv=2,estimator=LogisticRegression(),param_grid={'C':[0.1,1.0]})-check_classifiers_one_label]"
  - "sklearn.tests.test_common::test_search_cv[GridSearchCV(cv=2,estimator=LogisticRegression(),param_grid={'C':[0.1,1.0]})-check_classifiers_regression_target]"
  - "sklearn.tests.test_common::test_search_cv[GridSearchCV(cv=2,estimator=LogisticRegression(),param_grid={'C':[0.1,1.0]})-check_dtype_object]"
  - "sklearn.tests.test_common::test_search_cv[GridSearchCV(cv=2,estimator=LogisticRegression(),param_grid={'C':[0.1,1.0]})-check_estimators_empty_data_messages]"
  - "sklearn.tests.test_common::test_search_cv[GridSearchCV(cv=2,estimator=LogisticRegression(),param_grid={'C':[0.1,1.0]})-check_estimators_nan_inf]"
  - "sklearn.tests.test_common::test_search_cv[GridSearchCV(cv=2,estimator=LogisticRegression(),param_grid={'C':[0.1,1.0]})-check_fit1d]"
  - "sklearn.tests.test_common::test_search_cv[GridSearchCV(cv=2,estimator=LogisticRegression(),param_grid={'C':[0.1,1.0]})-check_fit2d_predict1d]"
  - "sklearn.tests.test_common::test_search_cv[HalvingGridSearchCV(cv=2,error_score='raise',estimator=Pipeline(steps=[('pca',PCA()),('logisticregression',LogisticRegression())]),min_resources='smallest',param_grid={'logisticregression__C':[0.1,1.0]},random_state=0)-check_classifier_data_not_an_array]"
  - "sklearn.tests.test_common::test_search_cv[HalvingGridSearchCV(cv=2,error_score='raise',estimator=Pipeline(steps=[('pca',PCA()),('logisticregression',LogisticRegression())]),min_resources='smallest',param_grid={'logisticregression__C':[0.1,1.0]},random_state=0)-check_classifiers_one_label]"
  - "sklearn.tests.test_common::test_search_cv[HalvingGridSearchCV(cv=2,error_score='raise',estimator=Pipeline(steps=[('pca',PCA()),('logisticregression',LogisticRegression())]),min_resources='smallest',param_grid={'logisticregression__C':[0.1,1.0]},random_state=0)-check_dtype_object]"
  - "sklearn.tests.test_common::test_search_cv[HalvingGridSearchCV(cv=2,error_score='raise',estimator=Pipeline(steps=[('pca',PCA()),('logisticregression',LogisticRegression())]),min_resources='smallest',param_grid={'logisticregression__C':[0.1,1.0]},random_state=0)-check_estimators_empty_data_messages]"
  - "sklearn.tests.test_common::test_search_cv[HalvingGridSearchCV(cv=2,error_score='raise',estimator=Pipeline(steps=[('pca',PCA()),('logisticregression',LogisticRegression())]),min_resources='smallest',param_grid={'logisticregression__C':[0.1,1.0]},random_state=0)-check_estimators_nan_inf]"
  - "sklearn.tests.test_common::test_search_cv[HalvingGridSearchCV(cv=2,error_score='raise',estimator=Pipeline(steps=[('pca',PCA()),('logisticregression',LogisticRegression())]),min_resources='smallest',param_grid={'logisticregression__C':[0.1,1.0]},random_state=0)-check_fit1d]"
  - "sklearn.tests.test_common::test_search_cv[HalvingGridSearchCV(cv=2,error_score='raise',estimator=Pipeline(steps=[('pca',PCA()),('logisticregression',LogisticRegression())]),min_resources='smallest',param_grid={'logisticregression__C':[0.1,1.0]},random_state=0)-check_fit2d_1feature]"
  - "sklearn.tests.test_common::test_search_cv[HalvingGridSearchCV(cv=2,error_score='raise',estimator=Pipeline(steps=[('pca',PCA()),('logisticregression',LogisticRegression())]),min_resources='smallest',param_grid={'logisticregression__C':[0.1,1.0]},random_state=0)-check_fit2d_predict1d]"
  - "sklearn.tests.test_common::test_search_cv[HalvingGridSearchCV(cv=2,estimator=LogisticRegression(),min_resources='smallest',param_grid={'C':[0.1,1.0]},random_state=0)-check_classifier_data_not_an_array0]"
  - "sklearn.tests.test_common::test_search_cv[HalvingGridSearchCV(cv=2,estimator=LogisticRegression(),min_resources='smallest',param_grid={'C':[0.1,1.0]},random_state=0)-check_classifier_data_not_an_array1]"
  - "sklearn.tests.test_common::test_search_cv[HalvingGridSearchCV(cv=2,estimator=LogisticRegression(),min_resources='smallest',param_grid={'C':[0.1,1.0]},random_state=0)-check_classifiers_one_label0]"
  - "sklearn.tests.test_common::test_search_cv[HalvingGridSearchCV(cv=2,estimator=LogisticRegression(),min_resources='smallest',param_grid={'C':[0.1,1.0]},random_state=0)-check_classifiers_one_label1]"
  - "sklearn.tests.test_common::test_search_cv[HalvingGridSearchCV(cv=2,estimator=LogisticRegression(),min_resources='smallest',param_grid={'C':[0.1,1.0]},random_state=0)-check_dtype_object0]"
  - "sklearn.tests.test_common::test_search_cv[HalvingGridSearchCV(cv=2,estimator=LogisticRegression(),min_resources='smallest',param_grid={'C':[0.1,1.0]},random_state=0)-check_dtype_object1]"
  - "sklearn.tests.test_common::test_search_cv[HalvingGridSearchCV(cv=2,estimator=LogisticRegression(),min_resources='smallest',param_grid={'C':[0.1,1.0]},random_state=0)-check_estimators_empty_data_messages0]"
  - "sklearn.tests.test_common::test_search_cv[HalvingGridSearchCV(cv=2,estimator=LogisticRegression(),min_resources='smallest',param_grid={'C':[0.1,1.0]},random_state=0)-check_estimators_empty_data_messages1]"
  - "sklearn.tests.test_common::test_search_cv[HalvingGridSearchCV(cv=2,estimator=LogisticRegression(),min_resources='smallest',param_grid={'C':[0.1,1.0]},random_state=0)-check_estimators_nan_inf0]"
  - "sklearn.tests.test_common::test_search_cv[HalvingGridSearchCV(cv=2,estimator=LogisticRegression(),min_resources='smallest',param_grid={'C':[0.1,1.0]},random_state=0)-check_estimators_nan_inf1]"
  - "sklearn.tests.test_common::test_search_cv[HalvingGridSearchCV(cv=2,estimator=LogisticRegression(),min_resources='smallest',param_grid={'C':[0.1,1.0]},random_state=0)-check_fit1d0]"
  - "sklearn.tests.test_common::test_search_cv[HalvingGridSearchCV(cv=2,estimator=LogisticRegression(),min_resources='smallest',param_grid={'C':[0.1,1.0]},random_state=0)-check_fit1d1]"
  - "sklearn.tests.test_common::test_search_cv[HalvingGridSearchCV(cv=2,estimator=LogisticRegression(),min_resources='smallest',param_grid={'C':[0.1,1.0]},random_state=0)-check_fit2d_predict1d0]"
  - "sklearn.tests.test_common::test_search_cv[HalvingGridSearchCV(cv=2,estimator=LogisticRegression(),min_resources='smallest',param_grid={'C':[0.1,1.0]},random_state=0)-check_fit2d_predict1d1]"
  - "sklearn.tests.test_common::test_search_cv[HalvingRandomSearchCV(cv=2,error_score='raise',estimator=Pipeline(steps=[('pca',PCA()),('logisticregression',LogisticRegression())]),param_distributions={'logisticregression__C':[0.1,1.0]},random_state=0)-check_classifiers_one_label]"
  - "sklearn.tests.test_common::test_search_cv[HalvingRandomSearchCV(cv=2,error_score='raise',estimator=Pipeline(steps=[('pca',PCA()),('logisticregression',LogisticRegression())]),param_distributions={'logisticregression__C':[0.1,1.0]},random_state=0)-check_estimators_nan_inf]"
  - "sklearn.tests.test_common::test_search_cv[RandomizedSearchCV(cv=2,error_score='raise',estimator=Pipeline(steps=[('pca',PCA()),('logisticregression',LogisticRegression())]),param_distributions={'logisticregression__C':[0.1,1.0]},random_state=0)-check_classifiers_one_label]"
  - "sklearn.tests.test_common::test_search_cv[RandomizedSearchCV(cv=2,error_score='raise',estimator=Pipeline(steps=[('pca',PCA()),('logisticregression',LogisticRegression())]),param_distributions={'logisticregression__C':[0.1,1.0]},random_state=0)-check_classifiers_regression_target]"
  - "sklearn.tests.test_common::test_search_cv[RandomizedSearchCV(cv=2,error_score='raise',estimator=Pipeline(steps=[('pca',PCA()),('logisticregression',LogisticRegression())]),param_distributions={'logisticregression__C':[0.1,1.0]},random_state=0)-check_estimators_nan_inf]"
  - "sklearn.tests.test_common::test_search_cv[RandomizedSearchCV(cv=2,estimator=LogisticRegression(),param_distributions={'C':[0.1,1.0]},random_state=0)-check_classifier_data_not_an_array]"
  - "sklearn.tests.test_common::test_search_cv[RandomizedSearchCV(cv=2,estimator=LogisticRegression(),param_distributions={'C':[0.1,1.0]},random_state=0)-check_classifiers_one_label]"
  - "sklearn.tests.test_common::test_search_cv[RandomizedSearchCV(cv=2,estimator=LogisticRegression(),param_distributions={'C':[0.1,1.0]},random_state=0)-check_classifiers_regression_target]"
  - "sklearn.tests.test_common::test_search_cv[RandomizedSearchCV(cv=2,estimator=LogisticRegression(),param_distributions={'C':[0.1,1.0]},random_state=0)-check_dtype_object]"
  - "sklearn.tests.test_common::test_search_cv[RandomizedSearchCV(cv=2,estimator=LogisticRegression(),param_distributions={'C':[0.1,1.0]},random_state=0)-check_estimators_empty_data_messages]"
  - "sklearn.tests.test_common::test_search_cv[RandomizedSearchCV(cv=2,estimator=LogisticRegression(),param_distributions={'C':[0.1,1.0]},random_state=0)-check_estimators_nan_inf]"
  - "sklearn.tests.test_common::test_search_cv[RandomizedSearchCV(cv=2,estimator=LogisticRegression(),param_distributions={'C':[0.1,1.0]},random_state=0)-check_fit1d]"
  - "sklearn.tests.test_common::test_search_cv[RandomizedSearchCV(cv=2,estimator=LogisticRegression(),param_distributions={'C':[0.1,1.0]},random_state=0)-check_fit2d_predict1d]"
- reason: Test should fail with cuml.accel (scikit-learn 1.4)
  marker: cuml_accel_bugs
  condition: scikit-learn<1.5
  tests:
  - "sklearn.cluster.tests.test_k_means::test_predict_sample_weight_deprecation_warning[KMeans]"
  - "sklearn.decomposition.tests.test_incremental_pca::test_whitening"
  - "sklearn.decomposition.tests.test_pca::test_pca_dtype_preservation[arpack]"
  - "sklearn.decomposition.tests.test_pca::test_pca_dtype_preservation[auto]"
  - "sklearn.decomposition.tests.test_pca::test_pca_dtype_preservation[full]"
  - "sklearn.decomposition.tests.test_pca::test_pca_dtype_preservation[randomized]"
  - "sklearn.decomposition.tests.test_pca::test_pca_svd_solver_auto[data0-0.5-full]"
  - "sklearn.ensemble.tests.test_stacking::test_stacking_classifier_sparse_passthrough[coo_array]"
  - "sklearn.ensemble.tests.test_stacking::test_stacking_classifier_sparse_passthrough[csc_array]"
  - "sklearn.ensemble.tests.test_stacking::test_stacking_classifier_sparse_passthrough[csr_array]"
  - "sklearn.ensemble.tests.test_voting::test_tie_situation"
  - "sklearn.linear_model.tests.test_ransac::test_ransac_final_model_fit_sample_weight"
  - "sklearn.linear_model.tests.test_sag::test_classifier_results[csr_array]"
  - "sklearn.linear_model.tests.test_sag::test_classifier_single_class"
  - "sklearn.model_selection.tests.test_validation::test_cross_val_predict_class_subset"
  - "sklearn.neighbors.tests.test_neighbors::test_neighbors_metrics[float64-canberra]"
  - "sklearn.neighbors.tests.test_neighbors::test_neighbors_metrics[float64-haversine]"
  - "sklearn.neighbors.tests.test_neighbors::test_neighbors_metrics[float64-minkowski]"
  - "sklearn.preprocessing.tests.test_data::test_standard_scaler_partial_fit_numerical_stability[csc_array]"
  - "sklearn.preprocessing.tests.test_data::test_standard_scaler_partial_fit_numerical_stability[csr_array]"
  - "sklearn.svm.tests.test_bounds::test_l1_min_c[no-intercept-multi-class-log-array]"
  - "sklearn.svm.tests.test_bounds::test_l1_min_c[no-intercept-multi-class-log-csr_array]"
  - "sklearn.svm.tests.test_bounds::test_l1_min_c[no-intercept-multi-class-log-csr_matrix]"
  - "sklearn.svm.tests.test_bounds::test_l1_min_c[no-intercept-two-classes-log-csr_array]"
  - "sklearn.svm.tests.test_bounds::test_l1_min_c[no-intercept-two-classes-log-csr_matrix]"
  - "sklearn.svm.tests.test_sparse::test_weight[csr_array]"
  - "sklearn.svm.tests.test_sparse::test_weight[csr_matrix]"
  - "sklearn.tests.test_calibration::test_calibrated_classifier_cv_double_sample_weights_equivalence[False-isotonic]"
  - "sklearn.tests.test_calibration::test_calibrated_classifier_cv_double_sample_weights_equivalence[False-sigmoid]"
  - "sklearn.tests.test_calibration::test_calibrated_classifier_cv_double_sample_weights_equivalence[True-isotonic]"
  - "sklearn.tests.test_calibration::test_calibrated_classifier_cv_double_sample_weights_equivalence[True-sigmoid]"
  - "sklearn.tests.test_common::test_estimators[LogisticRegression()-check_class_weight_classifiers]"
  - "sklearn.tests.test_common::test_estimators[LogisticRegression()-check_classifier_data_not_an_array]"
  - "sklearn.tests.test_common::test_estimators[LogisticRegression()-check_classifiers_one_label]"
  - "sklearn.tests.test_common::test_estimators[LogisticRegression()-check_classifiers_regression_target]"
  - "sklearn.tests.test_common::test_estimators[LogisticRegression()-check_complex_data]"
  - "sklearn.tests.test_common::test_estimators[LogisticRegression()-check_dtype_object]"
  - "sklearn.tests.test_common::test_estimators[LogisticRegression()-check_estimators_empty_data_messages]"
  - "sklearn.tests.test_common::test_estimators[LogisticRegression()-check_estimators_nan_inf]"
  - "sklearn.tests.test_common::test_estimators[LogisticRegression()-check_fit1d]"
  - "sklearn.tests.test_common::test_estimators[LogisticRegression()-check_fit2d_1sample]"
  - "sklearn.tests.test_common::test_estimators[LogisticRegression()-check_fit2d_predict1d]"
  - "sklearn.tests.test_common::test_estimators[LogisticRegression()-check_requires_y_none]"
  - "sklearn.tests.test_common::test_estimators[LogisticRegression()-check_sample_weights_not_an_array]"
  - "sklearn.tests.test_common::test_estimators[LogisticRegression()-check_sparsify_coefficients]"
  - "sklearn.tests.test_common::test_estimators[LogisticRegression()-check_supervised_y_2d]"
  - "sklearn.tests.test_common::test_estimators[LogisticRegression()-check_supervised_y_no_nan]"
  - "sklearn.tests.test_common::test_estimators[TSNE()-check_estimator_sparse_data]"
  - "sklearn.tests.test_common::test_pandas_column_name_consistency[LogisticRegression()]"
  - "sklearn.tests.test_common::test_pandas_column_name_consistency[Pipeline(steps=[('logisticregression',LogisticRegression(C=1))])]"
  - "sklearn.tests.test_multioutput::test_multiclass_multioutput_estimator_predict_proba"
  - "sklearn.tests.test_pipeline::test_pipeline_set_output_integration"
- reason: Test should fail with cuml.accel (scikit-learn 1.5)
  marker: cuml_accel_bugs
  condition: scikit-learn<1.6
  tests:
  - "None"
  - "sklearn.linear_model.tests.test_base::test_linear_regression_sample_weight_consistency[42-False-None]"
  - "sklearn.linear_model.tests.test_base::test_linear_regression_sample_weight_consistency[42-True-None]"
  - "sklearn.semi_supervised.tests.test_self_training::test_classification[k_best-base_estimator0]"
  - "sklearn.semi_supervised.tests.test_self_training::test_classification[threshold-base_estimator0]"
  - "sklearn.semi_supervised.tests.test_self_training::test_zero_iterations[y1-base_estimator0]"
  - "sklearn.tests.test_common::test_estimators[BernoulliRBM()-check_methods_sample_order_invariance]"
  - "sklearn.tests.test_common::test_estimators[BernoulliRBM()-check_methods_subset_invariance]"
  - "sklearn.tests.test_common::test_estimators[BisectingKMeans()-check_sample_weights_invariance(kind=zeros)]"
  - "sklearn.tests.test_common::test_estimators[CalibratedClassifierCV(estimator=LogisticRegression(C=1))-check_sample_weights_invariance(kind=zeros)]"
  - "sklearn.tests.test_common::test_estimators[DummyClassifier()-check_methods_sample_order_invariance]"
  - "sklearn.tests.test_common::test_estimators[DummyClassifier()-check_methods_subset_invariance]"
  - "sklearn.tests.test_common::test_estimators[ElasticNetCV()-check_sample_weights_invariance(kind=zeros)]"
  - "sklearn.tests.test_common::test_estimators[IsolationForest()-check_sample_weights_invariance(kind=zeros)]"
  - "sklearn.tests.test_common::test_estimators[LassoCV()-check_sample_weights_invariance(kind=zeros)]"
  - "sklearn.tests.test_common::test_estimators[LinearSVR()-check_sample_weights_invariance(kind=zeros)]"
  - "sklearn.tests.test_common::test_estimators[LogisticRegressionCV()-check_sample_weights_invariance(kind=zeros)]"
  - "sklearn.tests.test_common::test_estimators[MiniBatchKMeans()-check_sample_weights_invariance(kind=zeros)]"
  - "sklearn.tests.test_common::test_estimators[NuSVC()-check_sample_weights_invariance(kind=zeros)]"
  - "sklearn.tests.test_common::test_estimators[NuSVR()-check_sample_weights_invariance(kind=zeros)]"
  - "sklearn.tests.test_common::test_estimators[OneClassSVM()-check_sample_weights_invariance(kind=zeros)]"
  - "sklearn.tests.test_common::test_estimators[Pipeline(steps=[('scaler',StandardScaler()),('final_estimator',Ridge())])-check_estimators_nan_inf]"
  - "sklearn.tests.test_common::test_estimators[Pipeline(steps=[('scaler',StandardScaler()),('final_estimator',Ridge())])-check_estimators_nan_inf]"
  - "sklearn.tests.test_common::test_estimators[Pipeline(steps=[('scaler',StandardScaler()),('final_estimator',Ridge())])-check_regressor_data_not_an_array]"
  - "sklearn.tests.test_common::test_estimators[Pipeline(steps=[('scaler',StandardScaler()),('final_estimator',Ridge())])-check_regressor_data_not_an_array]"
  - "sklearn.tests.test_common::test_estimators[Pipeline(steps=[('scaler',StandardScaler()),('final_estimator',Ridge())])-check_supervised_y_no_nan]"
  - "sklearn.tests.test_common::test_estimators[Pipeline(steps=[('scaler',StandardScaler()),('final_estimator',Ridge())])-check_supervised_y_no_nan]"
  - "sklearn.tests.test_common::test_estimators[SGDClassifier()-check_sample_weights_invariance(kind=zeros)]"
  - "sklearn.tests.test_common::test_estimators[SGDOneClassSVM()-check_sample_weights_invariance(kind=zeros)]"
  - "sklearn.tests.test_common::test_estimators[SGDRegressor()-check_sample_weights_invariance(kind=zeros)]"
  - "sklearn.tests.test_common::test_estimators[SVC()-check_sample_weights_invariance(kind=zeros)]"
  - "sklearn.tests.test_common::test_estimators[SVR()-check_sample_weights_invariance(kind=zeros)]"
  - "sklearn.tests.test_common::test_estimators[SpectralBiclustering()-check_estimators_dtypes]"
  - "sklearn.tests.test_common::test_estimators[SpectralBiclustering()-check_fit2d_1feature]"
  - "sklearn.tests.test_common::test_estimators[SpectralBiclustering()-check_fit2d_1sample]"
  - "sklearn.tests.test_common::test_estimators[SpectralCoclustering()-check_dont_overwrite_parameters]"
  - "sklearn.tests.test_common::test_estimators[SpectralCoclustering()-check_estimators_dtypes]"
  - "sklearn.tests.test_common::test_estimators[SpectralCoclustering()-check_fit2d_1feature]"
  - "sklearn.tests.test_common::test_estimators[SpectralCoclustering()-check_fit2d_1sample]"
  - "sklearn.tests.test_common::test_estimators[SpectralCoclustering()-check_fit2d_predict1d]"
  - "sklearn.tests.test_common::test_estimators[SpectralCoclustering()-check_methods_subset_invariance]"
  - "sklearn.tests.test_common::test_pandas_column_name_consistency[GridSearchCV(cv=2,error_score='raise',estimator=Pipeline(steps=[('pca',PCA()),('logisticregression',LogisticRegression())]),param_grid={'logisticregression__C':[0.1,1.0]})]"
  - "sklearn.tests.test_common::test_pandas_column_name_consistency[GridSearchCV(cv=2,error_score='raise',estimator=Pipeline(steps=[('pca',PCA()),('logisticregression',LogisticRegression())]),param_grid={'logisticregression__C':[0.1,1.0]})]"
  - "sklearn.tests.test_common::test_pandas_column_name_consistency[GridSearchCV(cv=2,error_score='raise',estimator=Pipeline(steps=[('pca',PCA()),('ridge',Ridge())]),param_grid={'ridge__alpha':[0.1,1.0]})]"
  - "sklearn.tests.test_common::test_pandas_column_name_consistency[GridSearchCV(cv=2,error_score='raise',estimator=Pipeline(steps=[('pca',PCA()),('ridge',Ridge())]),param_grid={'ridge__alpha':[0.1,1.0]})]"
  - "sklearn.tests.test_common::test_pandas_column_name_consistency[GridSearchCV(cv=2,estimator=Ridge(),param_grid={'alpha':[0.1,1.0]})]"
  - "sklearn.tests.test_common::test_pandas_column_name_consistency[HalvingGridSearchCV(cv=2,error_score='raise',estimator=Pipeline(steps=[('pca',PCA()),('logisticregression',LogisticRegression())]),min_resources='smallest',param_grid={'logisticregression__C':[0.1,1.0]},random_state=0)]"
  - "sklearn.tests.test_common::test_pandas_column_name_consistency[HalvingGridSearchCV(cv=2,error_score='raise',estimator=Pipeline(steps=[('pca',PCA()),('logisticregression',LogisticRegression())]),min_resources='smallest',param_grid={'logisticregression__C':[0.1,1.0]},random_state=0)]"
  - "sklearn.tests.test_common::test_pandas_column_name_consistency[HalvingGridSearchCV(cv=2,error_score='raise',estimator=Pipeline(steps=[('pca',PCA()),('ridge',Ridge())]),min_resources='smallest',param_grid={'ridge__alpha':[0.1,1.0]},random_state=0)]"
  - "sklearn.tests.test_common::test_pandas_column_name_consistency[HalvingGridSearchCV(cv=2,error_score='raise',estimator=Pipeline(steps=[('pca',PCA()),('ridge',Ridge())]),min_resources='smallest',param_grid={'ridge__alpha':[0.1,1.0]},random_state=0)]"
  - "sklearn.tests.test_common::test_pandas_column_name_consistency[HalvingGridSearchCV(cv=2,estimator=Ridge(),min_resources='smallest',param_grid={'alpha':[0.1,1.0]},random_state=0)0]"
  - "sklearn.tests.test_common::test_pandas_column_name_consistency[HalvingGridSearchCV(cv=2,estimator=Ridge(),min_resources='smallest',param_grid={'alpha':[0.1,1.0]},random_state=0)1]"
  - "sklearn.tests.test_common::test_pandas_column_name_consistency[HalvingRandomSearchCV(cv=2,error_score='raise',estimator=Pipeline(steps=[('pca',PCA()),('logisticregression',LogisticRegression())]),param_distributions={'logisticregression__C':[0.1,1.0]},random_state=0)]"
  - "sklearn.tests.test_common::test_pandas_column_name_consistency[HalvingRandomSearchCV(cv=2,error_score='raise',estimator=Pipeline(steps=[('pca',PCA()),('logisticregression',LogisticRegression())]),param_distributions={'logisticregression__C':[0.1,1.0]},random_state=0)]"
  - "sklearn.tests.test_common::test_pandas_column_name_consistency[HalvingRandomSearchCV(cv=2,error_score='raise',estimator=Pipeline(steps=[('pca',PCA()),('ridge',Ridge())]),param_distributions={'ridge__alpha':[0.1,1.0]},random_state=0)]"
  - "sklearn.tests.test_common::test_pandas_column_name_consistency[HalvingRandomSearchCV(cv=2,error_score='raise',estimator=Pipeline(steps=[('pca',PCA()),('ridge',Ridge())]),param_distributions={'ridge__alpha':[0.1,1.0]},random_state=0)]"
  - "sklearn.tests.test_common::test_pandas_column_name_consistency[RandomizedSearchCV(cv=2,error_score='raise',estimator=Pipeline(steps=[('pca',PCA()),('logisticregression',LogisticRegression())]),param_distributions={'logisticregression__C':[0.1,1.0]},random_state=0)]"
  - "sklearn.tests.test_common::test_pandas_column_name_consistency[RandomizedSearchCV(cv=2,error_score='raise',estimator=Pipeline(steps=[('pca',PCA()),('logisticregression',LogisticRegression())]),param_distributions={'logisticregression__C':[0.1,1.0]},random_state=0)]"
  - "sklearn.tests.test_common::test_pandas_column_name_consistency[RandomizedSearchCV(cv=2,error_score='raise',estimator=Pipeline(steps=[('pca',PCA()),('ridge',Ridge())]),param_distributions={'ridge__alpha':[0.1,1.0]},random_state=0)]"
  - "sklearn.tests.test_common::test_pandas_column_name_consistency[RandomizedSearchCV(cv=2,error_score='raise',estimator=Pipeline(steps=[('pca',PCA()),('ridge',Ridge())]),param_distributions={'ridge__alpha':[0.1,1.0]},random_state=0)]"
  - "sklearn.tests.test_common::test_pandas_column_name_consistency[RandomizedSearchCV(cv=2,estimator=Ridge(),param_distributions={'alpha':[0.1,1.0]},random_state=0)]"
  - "sklearn.tests.test_common::test_search_cv[GridSearchCV(cv=2,error_score='raise',estimator=Pipeline(steps=[('pca',PCA()),('ridge',Ridge())]),param_grid={'ridge__alpha':[0.1,1.0]})-check_complex_data]"
  - "sklearn.tests.test_common::test_search_cv[GridSearchCV(cv=2,error_score='raise',estimator=Pipeline(steps=[('pca',PCA()),('ridge',Ridge())]),param_grid={'ridge__alpha':[0.1,1.0]})-check_dtype_object]"
  - "sklearn.tests.test_common::test_search_cv[GridSearchCV(cv=2,error_score='raise',estimator=Pipeline(steps=[('pca',PCA()),('ridge',Ridge())]),param_grid={'ridge__alpha':[0.1,1.0]})-check_estimators_empty_data_messages]"
  - "sklearn.tests.test_common::test_search_cv[GridSearchCV(cv=2,error_score='raise',estimator=Pipeline(steps=[('pca',PCA()),('ridge',Ridge())]),param_grid={'ridge__alpha':[0.1,1.0]})-check_estimators_nan_inf]"
  - "sklearn.tests.test_common::test_search_cv[GridSearchCV(cv=2,error_score='raise',estimator=Pipeline(steps=[('pca',PCA()),('ridge',Ridge())]),param_grid={'ridge__alpha':[0.1,1.0]})-check_fit1d]"
  - "sklearn.tests.test_common::test_search_cv[GridSearchCV(cv=2,error_score='raise',estimator=Pipeline(steps=[('pca',PCA()),('ridge',Ridge())]),param_grid={'ridge__alpha':[0.1,1.0]})-check_fit2d_1feature]"
  - "sklearn.tests.test_common::test_search_cv[GridSearchCV(cv=2,error_score='raise',estimator=Pipeline(steps=[('pca',PCA()),('ridge',Ridge())]),param_grid={'ridge__alpha':[0.1,1.0]})-check_fit2d_predict1d]"
  - "sklearn.tests.test_common::test_search_cv[GridSearchCV(cv=2,error_score='raise',estimator=Pipeline(steps=[('pca',PCA()),('ridge',Ridge())]),param_grid={'ridge__alpha':[0.1,1.0]})-check_regressor_data_not_an_array]"
  - "sklearn.tests.test_common::test_search_cv[GridSearchCV(cv=2,error_score='raise',estimator=Pipeline(steps=[('pca',PCA()),('ridge',Ridge())]),param_grid={'ridge__alpha':[0.1,1.0]})-check_supervised_y_2d]"
  - "sklearn.tests.test_common::test_search_cv[GridSearchCV(cv=2,error_score='raise',estimator=Pipeline(steps=[('pca',PCA()),('ridge',Ridge())]),param_grid={'ridge__alpha':[0.1,1.0]})-check_supervised_y_no_nan]"
  - "sklearn.tests.test_common::test_search_cv[GridSearchCV(cv=2,estimator=Ridge(),param_grid={'alpha':[0.1,1.0]})-check_complex_data]"
  - "sklearn.tests.test_common::test_search_cv[GridSearchCV(cv=2,estimator=Ridge(),param_grid={'alpha':[0.1,1.0]})-check_dtype_object]"
  - "sklearn.tests.test_common::test_search_cv[GridSearchCV(cv=2,estimator=Ridge(),param_grid={'alpha':[0.1,1.0]})-check_estimators_empty_data_messages]"
  - "sklearn.tests.test_common::test_search_cv[GridSearchCV(cv=2,estimator=Ridge(),param_grid={'alpha':[0.1,1.0]})-check_estimators_nan_inf]"
  - "sklearn.tests.test_common::test_search_cv[GridSearchCV(cv=2,estimator=Ridge(),param_grid={'alpha':[0.1,1.0]})-check_fit2d_predict1d]"
  - "sklearn.tests.test_common::test_search_cv[GridSearchCV(cv=2,estimator=Ridge(),param_grid={'alpha':[0.1,1.0]})-check_regressor_data_not_an_array]"
  - "sklearn.tests.test_common::test_search_cv[GridSearchCV(cv=2,estimator=Ridge(),param_grid={'alpha':[0.1,1.0]})-check_supervised_y_2d]"
  - "sklearn.tests.test_common::test_search_cv[GridSearchCV(cv=2,estimator=Ridge(),param_grid={'alpha':[0.1,1.0]})-check_supervised_y_no_nan]"
  - "sklearn.tests.test_common::test_search_cv[HalvingGridSearchCV(cv=2,error_score='raise',estimator=Pipeline(steps=[('pca',PCA()),('ridge',Ridge())]),min_resources='smallest',param_grid={'ridge__alpha':[0.1,1.0]},random_state=0)-check_complex_data]"
  - "sklearn.tests.test_common::test_search_cv[HalvingGridSearchCV(cv=2,error_score='raise',estimator=Pipeline(steps=[('pca',PCA()),('ridge',Ridge())]),min_resources='smallest',param_grid={'ridge__alpha':[0.1,1.0]},random_state=0)-check_dtype_object]"
  - "sklearn.tests.test_common::test_search_cv[HalvingGridSearchCV(cv=2,error_score='raise',estimator=Pipeline(steps=[('pca',PCA()),('ridge',Ridge())]),min_resources='smallest',param_grid={'ridge__alpha':[0.1,1.0]},random_state=0)-check_estimators_empty_data_messages]"
  - "sklearn.tests.test_common::test_search_cv[HalvingGridSearchCV(cv=2,error_score='raise',estimator=Pipeline(steps=[('pca',PCA()),('ridge',Ridge())]),min_resources='smallest',param_grid={'ridge__alpha':[0.1,1.0]},random_state=0)-check_estimators_fit_returns_self(readonly_memmap=True)]"
  - "sklearn.tests.test_common::test_search_cv[HalvingGridSearchCV(cv=2,error_score='raise',estimator=Pipeline(steps=[('pca',PCA()),('ridge',Ridge())]),min_resources='smallest',param_grid={'ridge__alpha':[0.1,1.0]},random_state=0)-check_estimators_fit_returns_self]"
  - "sklearn.tests.test_common::test_search_cv[HalvingGridSearchCV(cv=2,error_score='raise',estimator=Pipeline(steps=[('pca',PCA()),('ridge',Ridge())]),min_resources='smallest',param_grid={'ridge__alpha':[0.1,1.0]},random_state=0)-check_estimators_nan_inf]"
  - "sklearn.tests.test_common::test_search_cv[HalvingGridSearchCV(cv=2,error_score='raise',estimator=Pipeline(steps=[('pca',PCA()),('ridge',Ridge())]),min_resources='smallest',param_grid={'ridge__alpha':[0.1,1.0]},random_state=0)-check_estimators_overwrite_params]"
  - "sklearn.tests.test_common::test_search_cv[HalvingGridSearchCV(cv=2,error_score='raise',estimator=Pipeline(steps=[('pca',PCA()),('ridge',Ridge())]),min_resources='smallest',param_grid={'ridge__alpha':[0.1,1.0]},random_state=0)-check_fit1d]"
  - "sklearn.tests.test_common::test_search_cv[HalvingGridSearchCV(cv=2,error_score='raise',estimator=Pipeline(steps=[('pca',PCA()),('ridge',Ridge())]),min_resources='smallest',param_grid={'ridge__alpha':[0.1,1.0]},random_state=0)-check_fit2d_1feature]"
  - "sklearn.tests.test_common::test_search_cv[HalvingGridSearchCV(cv=2,error_score='raise',estimator=Pipeline(steps=[('pca',PCA()),('ridge',Ridge())]),min_resources='smallest',param_grid={'ridge__alpha':[0.1,1.0]},random_state=0)-check_fit2d_1sample]"
  - "sklearn.tests.test_common::test_search_cv[HalvingGridSearchCV(cv=2,error_score='raise',estimator=Pipeline(steps=[('pca',PCA()),('ridge',Ridge())]),min_resources='smallest',param_grid={'ridge__alpha':[0.1,1.0]},random_state=0)-check_fit2d_predict1d]"
  - "sklearn.tests.test_common::test_search_cv[HalvingGridSearchCV(cv=2,error_score='raise',estimator=Pipeline(steps=[('pca',PCA()),('ridge',Ridge())]),min_resources='smallest',param_grid={'ridge__alpha':[0.1,1.0]},random_state=0)-check_regressor_data_not_an_array]"
  - "sklearn.tests.test_common::test_search_cv[HalvingGridSearchCV(cv=2,error_score='raise',estimator=Pipeline(steps=[('pca',PCA()),('ridge',Ridge())]),min_resources='smallest',param_grid={'ridge__alpha':[0.1,1.0]},random_state=0)-check_supervised_y_2d]"
  - "sklearn.tests.test_common::test_search_cv[HalvingGridSearchCV(cv=2,error_score='raise',estimator=Pipeline(steps=[('pca',PCA()),('ridge',Ridge())]),min_resources='smallest',param_grid={'ridge__alpha':[0.1,1.0]},random_state=0)-check_supervised_y_no_nan]"
  - "sklearn.tests.test_common::test_search_cv[HalvingGridSearchCV(cv=2,estimator=Ridge(),min_resources='smallest',param_grid={'alpha':[0.1,1.0]},random_state=0)-check_complex_data0]"
  - "sklearn.tests.test_common::test_search_cv[HalvingGridSearchCV(cv=2,estimator=Ridge(),min_resources='smallest',param_grid={'alpha':[0.1,1.0]},random_state=0)-check_complex_data1]"
  - "sklearn.tests.test_common::test_search_cv[HalvingGridSearchCV(cv=2,estimator=Ridge(),min_resources='smallest',param_grid={'alpha':[0.1,1.0]},random_state=0)-check_dtype_object0]"
  - "sklearn.tests.test_common::test_search_cv[HalvingGridSearchCV(cv=2,estimator=Ridge(),min_resources='smallest',param_grid={'alpha':[0.1,1.0]},random_state=0)-check_dtype_object1]"
  - "sklearn.tests.test_common::test_search_cv[HalvingGridSearchCV(cv=2,estimator=Ridge(),min_resources='smallest',param_grid={'alpha':[0.1,1.0]},random_state=0)-check_estimators_empty_data_messages0]"
  - "sklearn.tests.test_common::test_search_cv[HalvingGridSearchCV(cv=2,estimator=Ridge(),min_resources='smallest',param_grid={'alpha':[0.1,1.0]},random_state=0)-check_estimators_empty_data_messages1]"
  - "sklearn.tests.test_common::test_search_cv[HalvingGridSearchCV(cv=2,estimator=Ridge(),min_resources='smallest',param_grid={'alpha':[0.1,1.0]},random_state=0)-check_estimators_nan_inf0]"
  - "sklearn.tests.test_common::test_search_cv[HalvingGridSearchCV(cv=2,estimator=Ridge(),min_resources='smallest',param_grid={'alpha':[0.1,1.0]},random_state=0)-check_estimators_nan_inf1]"
  - "sklearn.tests.test_common::test_search_cv[HalvingGridSearchCV(cv=2,estimator=Ridge(),min_resources='smallest',param_grid={'alpha':[0.1,1.0]},random_state=0)-check_fit2d_1sample0]"
  - "sklearn.tests.test_common::test_search_cv[HalvingGridSearchCV(cv=2,estimator=Ridge(),min_resources='smallest',param_grid={'alpha':[0.1,1.0]},random_state=0)-check_fit2d_1sample1]"
  - "sklearn.tests.test_common::test_search_cv[HalvingGridSearchCV(cv=2,estimator=Ridge(),min_resources='smallest',param_grid={'alpha':[0.1,1.0]},random_state=0)-check_fit2d_predict1d0]"
  - "sklearn.tests.test_common::test_search_cv[HalvingGridSearchCV(cv=2,estimator=Ridge(),min_resources='smallest',param_grid={'alpha':[0.1,1.0]},random_state=0)-check_fit2d_predict1d1]"
  - "sklearn.tests.test_common::test_search_cv[HalvingGridSearchCV(cv=2,estimator=Ridge(),min_resources='smallest',param_grid={'alpha':[0.1,1.0]},random_state=0)-check_regressor_data_not_an_array0]"
  - "sklearn.tests.test_common::test_search_cv[HalvingGridSearchCV(cv=2,estimator=Ridge(),min_resources='smallest',param_grid={'alpha':[0.1,1.0]},random_state=0)-check_regressor_data_not_an_array1]"
  - "sklearn.tests.test_common::test_search_cv[HalvingGridSearchCV(cv=2,estimator=Ridge(),min_resources='smallest',param_grid={'alpha':[0.1,1.0]},random_state=0)-check_supervised_y_2d0]"
  - "sklearn.tests.test_common::test_search_cv[HalvingGridSearchCV(cv=2,estimator=Ridge(),min_resources='smallest',param_grid={'alpha':[0.1,1.0]},random_state=0)-check_supervised_y_2d1]"
  - "sklearn.tests.test_common::test_search_cv[HalvingRandomSearchCV(cv=2,error_score='raise',estimator=Pipeline(steps=[('pca',PCA()),('logisticregression',LogisticRegression())]),param_distributions={'logisticregression__C':[0.1,1.0]},random_state=0)-check_classifier_data_not_an_array]"
  - "sklearn.tests.test_common::test_search_cv[HalvingRandomSearchCV(cv=2,error_score='raise',estimator=Pipeline(steps=[('pca',PCA()),('logisticregression',LogisticRegression())]),param_distributions={'logisticregression__C':[0.1,1.0]},random_state=0)-check_dtype_object]"
  - "sklearn.tests.test_common::test_search_cv[HalvingRandomSearchCV(cv=2,error_score='raise',estimator=Pipeline(steps=[('pca',PCA()),('logisticregression',LogisticRegression())]),param_distributions={'logisticregression__C':[0.1,1.0]},random_state=0)-check_estimators_empty_data_messages]"
  - "sklearn.tests.test_common::test_search_cv[HalvingRandomSearchCV(cv=2,error_score='raise',estimator=Pipeline(steps=[('pca',PCA()),('logisticregression',LogisticRegression())]),param_distributions={'logisticregression__C':[0.1,1.0]},random_state=0)-check_fit1d]"
  - "sklearn.tests.test_common::test_search_cv[HalvingRandomSearchCV(cv=2,error_score='raise',estimator=Pipeline(steps=[('pca',PCA()),('logisticregression',LogisticRegression())]),param_distributions={'logisticregression__C':[0.1,1.0]},random_state=0)-check_fit2d_1feature]"
