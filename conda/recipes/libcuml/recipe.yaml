# Copyright (c) 2025, NVIDIA CORPORATION.
schema_version: 1

context:
  version: ${{ env.get("RAPIDS_PACKAGE_VERSION") }}
  minor_version: ${{ (version | split("."))[:2] | join(".") }}
  cuda_version: ${{ (env.get("RAPIDS_CUDA_VERSION") | split("."))[:2] | join(".") }}
  cuda_major: '${{ (env.get("RAPIDS_CUDA_VERSION") | split("."))[0] }}'
  date_string: '${{ env.get("RAPIDS_DATE_STRING") }}'
  head_rev: '${{ git.head_rev(".")[:8] }}'

recipe:
  name: libcuml-split

cache:
  source:
    path: ../../..

  build:
    script:
      content: |
        # Remove `-fdebug-prefix-map` line from CFLAGS and CXXFLAGS so the
        # incrementing version number in the compile line doesn't break the
        # cache
        set -x
        export CFLAGS=$(echo $CFLAGS | sed -E 's@\-fdebug\-prefix\-map[^ ]*@@g')
        export CXXFLAGS=$(echo $CXXFLAGS | sed -E 's@\-fdebug\-prefix\-map[^ ]*@@g')
        set +x

        ./build.sh -n libcuml prims -v --allgpuarch --build-metrics --incl-cache-stats
      secrets:
        - AWS_ACCESS_KEY_ID
        - AWS_SECRET_ACCESS_KEY
        - AWS_SESSION_TOKEN
      env:
        CMAKE_C_COMPILER_LAUNCHER: ${{ env.get("CMAKE_C_COMPILER_LAUNCHER") }}
        CMAKE_CUDA_COMPILER_LAUNCHER: ${{ env.get("CMAKE_CUDA_COMPILER_LAUNCHER") }}
        CMAKE_CXX_COMPILER_LAUNCHER: ${{ env.get("CMAKE_CXX_COMPILER_LAUNCHER") }}
        CMAKE_GENERATOR: ${{ env.get("CMAKE_GENERATOR") }}
        PARALLEL_LEVEL: ${{ env.get("PARALLEL_LEVEL") }}
        SCCACHE_BUCKET: ${{ env.get("SCCACHE_BUCKET") }}
        SCCACHE_IDLE_TIMEOUT: ${{ env.get("SCCACHE_IDLE_TIMEOUT") }}
        SCCACHE_REGION: ${{ env.get("SCCACHE_REGION") }}
        SCCACHE_S3_USE_SSL: ${{ env.get("SCCACHE_S3_USE_SSL") }}
        SCCACHE_S3_NO_CREDENTIALS: ${{ env.get("SCCACHE_S3_NO_CREDENTIALS") }}
        SCCACHE_S3_KEY_PREFIX: libcuml/${{ env.get("RAPIDS_CONDA_ARCH") }}/cuda${{ cuda_major }}

  requirements:
    build:
      - ${{ compiler("c") }}
      - ${{ compiler("cxx") }}
      - ${{ compiler("cuda") }}
      - cuda-version =${{ cuda_version }}
      - cmake ${{ cmake_version }}
      - ninja
      - ${{ stdlib("c") }}
    host:
      - cuda-version =${{ cuda_version }}
      - libcumlprims =${{ minor_version }}
      - libcuvs =${{ minor_version }}
      - libraft-headers =${{ minor_version }}
      - librmm =${{ minor_version }}
      - rapids-logger =0.1
      - treelite ${{ treelite_version }}
      - cuda-cudart-dev
      - libcublas-dev
      - libcufft-dev
      - libcurand-dev
      - libcusolver-dev
      - libcusparse-dev

outputs:
  - package:
      name: libcuml
      version: ${{ version }}
    build:
      script:
        content: |
          cmake --install cpp/build
      dynamic_linking:
        overlinking_behavior: "error"
      prefix_detection:
        ignore:
          # See https://github.com/rapidsai/build-planning/issues/160
          - lib/libcuml++.so
          - lib/libcuml.so
      string: cuda${{ cuda_major }}_${{ date_string }}_${{ head_rev }}
    requirements:
      build:
        - cmake ${{ cmake_version }}
        - ${{ stdlib("c") }}
      host:
        - cuda-version =${{ cuda_version }}
        - rapids-logger =0.1
        - libcumlprims =${{ minor_version }}
        - libcuvs =${{ minor_version }}
        - librmm =${{ minor_version }}
        - treelite ${{ treelite_version }}
        - cuda-cudart-dev
        - libcublas
        - libcufft
        - libcurand
        - libcusolver
        - libcusparse
      run:
        - ${{ pin_compatible("cuda-version", upper_bound="x", lower_bound="x") }}
        - cuda-cudart
        - libcublas
        - libcufft
        - libcurand
        - libcusolver
        - libcusparse
        - libcumlprims =${{ minor_version }}
        - libcuvs =${{ minor_version }}
        - librmm =${{ minor_version }}
        - rapids-logger =0.1
        - treelite ${{ treelite_version }}
      ignore_run_exports:
        by_name:
          - cuda-cudart
          - cuda-version
          - flatbuffers
          - libcurand
          - librmm
          - libcusparse
          - libcufft
          - libcublas
          - libcusolver
    about:
      homepage: ${{ load_from_file("python/libcuml/pyproject.toml").project.urls.Homepage }}
      license: ${{ load_from_file("python/libcuml/pyproject.toml").project.license.text }}
      summary: ${{ load_from_file("python/libcuml/pyproject.toml").project.description }}

  - package:
      name: libcuml-tests
      version: ${{ version }}
    build:
      script:
        content: |
          cmake --install cpp/build --component testing
      string: cuda${{ cuda_major }}_${{ date_string }}_${{ head_rev }}
    requirements:
      build:
        - cmake ${{ cmake_version }}
        - ${{ stdlib("c") }}
      host:
        - cuda-version =${{ cuda_version }}
        - rapids-logger =0.1
        - ${{ pin_subpackage("libcuml", exact=True) }}
        - cuda-cudart-dev
      run:
        - ${{ pin_compatible("cuda-version", upper_bound="x", lower_bound="x") }}
        - ${{ pin_subpackage("libcuml", exact=True) }}
        - cuda-cudart
      ignore_run_exports:
        by_name:
          - cuda-cudart
          - cuda-version
          - libcublas
          - libcufft
          - libcurand
          - libcusolver
          - libcusparse
          - librmm
    about:
      homepage: ${{ load_from_file("python/libcuml/pyproject.toml").project.urls.Homepage }}
      license: ${{ load_from_file("python/libcuml/pyproject.toml").project.license.text }}
      summary: libcuml test & benchmark executables
