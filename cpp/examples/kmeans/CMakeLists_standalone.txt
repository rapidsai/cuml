#
# Copyright (c) 2019-2021, NVIDIA CORPORATION.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
cmake_minimum_required(VERSION 3.8 FATAL_ERROR)
project(kmeans_example LANGUAGES CXX CUDA)

set(CMAKE_CXX_STANDARD 11)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

if(IS_DIRECTORY ${CUML_INCLUDE_DIR})
    # CMAKE_CUDA_TOOLKIT_INCLUDE_DIRECTORIES is needed so that cuda_runtime.h is found
    # CUML_INCLUDE_DIR is needed so that kmeans/kmeans_c.h is found
    include_directories(${CMAKE_CUDA_TOOLKIT_INCLUDE_DIRECTORIES} ${CUML_INCLUDE_DIR})
else()
    message(FATAL_ERROR "CUML_INCLUDE_DIR not specified.")
endif(IS_DIRECTORY ${CUML_INCLUDE_DIR})

include(FetchContent)

FetchContent_Declare(
    raft
    GIT_REPOSITORY https://github.com/rapidsai/raft.git
    GIT_TAG branch-21.10
    GIT_SHALLOW ON
  )
FetchContent_Declare(
    thrust
    GIT_REPOSITORY https://github.com/thrust/thrust.git
    GIT_TAG 1.12.0
    GIT_SHALLOW ON
  )
FetchContent_MakeAvailable(thrust raft)
find_package(rmm 21.10.00)
include_directories(${raft_SOURCE_DIR}/cpp/include)

if(IS_DIRECTORY ${CUML_LIBRARY_DIR})
    # CUML_LIBRARY_DIR point to the directory where libcuml++.so lives
    link_directories(${CUML_LIBRARY_DIR})
else()
    message(FATAL_ERROR "CUML_LIBRARY_DIR not specified.")
endif(IS_DIRECTORY ${CUML_LIBRARY_DIR})

add_executable(kmeans_example kmeans_example.cpp)
# Need to set linker language to CUDA to link the CUDA Runtime
set_target_properties(kmeans_example PROPERTIES LINKER_LANGUAGE "CUDA")
# Link cuml
target_link_libraries(kmeans_example
    cuml++
    rmm::rmm
    CUDA::cublas
    CUDA::cusolver)
