#
# Copyright (c) 2021, NVIDIA CORPORATION.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
cmake_minimum_required(VERSION 3.8 FATAL_ERROR)
include(ExternalProject)
project(symreg_example VERSION 0.1.0 LANGUAGES CXX CUDA )

set(CMAKE_CXX_STANDARD 14)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

find_package(CUDAToolkit)

# Set path for modules
set(CMAKE_MODULE_PATH ${CMAKE_CURRENT_BINARY_DIR}/cmake)

# CMAKE_CUDA_TOOLKIT_INCLUDE_DIRECTORIES is needed so that cuda_runtime.h is found
# CUML_INCLUDE_DIR is needed so that genetic/genetic.h and genetic/common.h is found
if(IS_DIRECTORY ${CUML_INCLUDE_DIR})
include_directories(${CMAKE_CUDA_TOOLKIT_INCLUDE_DIRECTORIES} ${CUML_INCLUDE_DIR})
else()
message(FATAL_ERROR "CUML_INCLUDE_DIR not specified.")
endif(IS_DIRECTORY ${CUML_INCLUDE_DIR})

# CUML_LIBRARY_DIR point to the director where libcuml++.so lives
if(IS_DIRECTORY ${CUML_LIBRARY_DIR})
link_directories(${CUML_LIBRARY_DIR})
else()
message(FATAL_ERROR "CUML_LIBRARY_DIR not specified.")
endif(IS_DIRECTORY ${CUML_LIBRARY_DIR})

if(CMAKE_BUILD_TYPE MATCHES Debug)
  set(CMAKE_CUDA_FLAGS "${CMAKE_CUDA_FLAGS} -G -g")
  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -g")
endif()

# CUDA 11 onwards cub ships with CTK
if((CUDAToolkit_VERSION_MAJOR EQUAL 11) OR (CUDAToolkit_VERSION_MAJOR GREATER 11))
  set(CUB_IS_PART_OF_CTK ON)
else()
  set(CUB_IS_PART_OF_CTK OFF)
endif()

##############################################################################
# Include dependencies

# 1. raft - (header only)

# Only cloned if RAFT_PATH env variable is not defined

if(DEFINED ENV{RAFT_PATH})
  message(STATUS "RAFT_PATH environment variable detected.")
  message(STATUS "RAFT_DIR set to $ENV{RAFT_PATH}")
  set(RAFT_DIR "$ENV{RAFT_PATH}")

  ExternalProject_Add(raft
    DOWNLOAD_COMMAND  ""
    SOURCE_DIR        ${RAFT_DIR}
    CONFIGURE_COMMAND ""
    BUILD_COMMAND     ""
    INSTALL_COMMAND   "")

else(DEFINED ENV{RAFT_PATH})
  message(STATUS "RAFT_PATH environment variable NOT detected, cloning RAFT")
  set(RAFT_DIR ${CMAKE_CURRENT_BINARY_DIR}/raft CACHE STRING "Path to RAFT repo")

  ExternalProject_Add(raft
    GIT_REPOSITORY    https://github.com/rapidsai/raft.git
    GIT_TAG           fc46618d76d70710b07d445e79d3e07dea6cad2f
    PREFIX            ${RAFT_DIR}
    CONFIGURE_COMMAND ""
    BUILD_COMMAND     ""
    INSTALL_COMMAND   "")

  # Redefining RAFT_DIR so it coincides with the one inferred by env variable.
  set(RAFT_DIR ${RAFT_DIR}/src/raft/)
endif(DEFINED ENV{RAFT_PATH})

# 2. RMM 

find_path(RMM_INCLUDE_DIRS "rmm"
    HINTS
    "$ENV{RMM_ROOT}/include"
    "$ENV{CONDA_PREFIX}/include/rmm"
    "$ENV{CONDA_PREFIX}/include")

message(STATUS "RMM: RMM_INCLUDE_DIRS set to ${RMM_INCLUDE_DIRS}")

# 3. cub - (header only)

if(NOT CUB_IS_PART_OF_CTK)
  set(CUB_DIR ${CMAKE_CURRENT_BINARY_DIR}/cub CACHE STRING "Path to cub repo")
  ExternalProject_Add(cub
    GIT_REPOSITORY    https://github.com/thrust/cub.git
    GIT_TAG           1.8.0
    PREFIX            ${CUB_DIR}
    CONFIGURE_COMMAND ""
    BUILD_COMMAND     ""
    INSTALL_COMMAND   "")
endif(NOT CUB_IS_PART_OF_CTK)

if(NOT CUB_IS_PART_OF_CTK)
  add_dependencies(cub raft)
endif(CUB_IS_PART_OF_CTK)

##############################################################################
# - include paths ------------------------------------------------------------

set(CUML_INCLUDE_DIRECTORIES
  ${CUML_INCLUDE_DIR}
  ${CMAKE_CUDA_TOOLKIT_INCLUDE_DIRECTORIES}
  ${RAFT_DIR}/cpp/include
  ${RMM_INCLUDE_DIRS})

set(CUML_PUBLIC_LINK_LIBRARIES
  ${CUDA_cublas_LIBRARY}
  ${CUDA_curand_LIBRARY}
  ${CUDA_cusolver_LIBRARY}
  ${CUDA_cusparse_LIBRARY})

add_executable(symreg_example symreg_example.cpp)
target_include_directories(symreg_example BEFORE PUBLIC ${CUML_INCLUDE_DIRECTORIES})

# Need to set linker language to CUDA to link the CUDA Runtime
set_target_properties(symreg_example PROPERTIES LINKER_LANGUAGE "CUDA")

# Link cuml and cudart
target_link_libraries(symreg_example ${CUML_PUBLIC_LINK_LIBRARIES} cuml++ cudart)