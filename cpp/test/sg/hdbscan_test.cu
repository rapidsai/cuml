/*
 * Copyright (c) 2021, NVIDIA CORPORATION.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include <gtest/gtest.h>
#include <raft/cudart_utils.h>
#include <raft/cuda_utils.cuh>
#include <vector>

#include <hdbscan/detail/utils.h>
#include <cuml/cluster/hdbscan.hpp>
#include <hdbscan/detail/condense.cuh>
#include <hdbscan/detail/extract.cuh>

#include <raft/sparse/hierarchy/detail/agglomerative.cuh>

#include <raft/linalg/distance_type.h>
#include <raft/linalg/transpose.h>
#include <raft/mr/device/allocator.hpp>
#include <raft/sparse/op/sort.h>
#include <raft/sparse/coo.cuh>
#include <rmm/device_uvector.hpp>

#include "../prims/test_utils.h"

namespace ML {

using namespace std;

template <typename T, typename IdxT>
struct HDBSCANInputs {
  IdxT n_row;
  IdxT n_col;
  int k, min_pts, min_cluster_size;

  std::vector<T> data;

  std::vector<IdxT> expected_labels;
};

/**
* @brief kernel to calculate the values of a and b
* @param firstClusterArray: the array of classes of type T
* @param secondClusterArray: the array of classes of type T
* @param size: the size of the data points
* @param a: number of pairs of points that both the clusters have classified the same
* @param b: number of pairs of points that both the clusters have classified differently
*/
template <typename T, int BLOCK_DIM_X, int BLOCK_DIM_Y>
__global__ void computeTheNumerator(const T* firstClusterArray,
                                    const T* secondClusterArray, int size,
                                    int* a, int* b) {
  //calculating the indices of pairs of datapoints compared by the current thread
  int j = threadIdx.x + blockIdx.x * blockDim.x;
  int i = threadIdx.y + blockIdx.y * blockDim.y;

  //thread-local variables to count a and b
  int myA = 0, myB = 0;

  if (i < size && j < size && j < i) {
    //checking if the pair have been classified the same by both the clusters
    if (firstClusterArray[i] == firstClusterArray[j] &&
        secondClusterArray[i] == secondClusterArray[j]) {
      ++myA;
    }

    //checking if the pair have been classified differently by both the clusters
    else if (firstClusterArray[i] != firstClusterArray[j] &&
             secondClusterArray[i] != secondClusterArray[j]) {
      ++myB;
    }
  }

  //specialize blockReduce for a 2D block of 1024 threads of type int
  typedef cub::BlockReduce<int, BLOCK_DIM_X, cub::BLOCK_REDUCE_WARP_REDUCTIONS,
                           BLOCK_DIM_Y>
    BlockReduce;

  //Allocate shared memory for blockReduce
  __shared__ typename BlockReduce::TempStorage temp_storage;

  //summing up thread-local counts specific to a block
  myA = BlockReduce(temp_storage).Sum(myA);
  __syncthreads();
  myB = BlockReduce(temp_storage).Sum(myB);
  __syncthreads();

  //executed once per block
  if (threadIdx.x == 0 && threadIdx.y == 0) {
    raft::myAtomicAdd<unsigned long long int>((unsigned long long int*)a, myA);
    raft::myAtomicAdd<unsigned long long int>((unsigned long long int*)b, myB);
  }
}

/**
* @brief Function to calculate RandIndex
* <a href="https://en.wikipedia.org/wiki/Rand_index">more info on rand index</a>
* @param firstClusterArray: the array of classes of type T
* @param secondClusterArray: the array of classes of type T
* @param size: the size of the data points of type int
* @param allocator: object that takes care of temporary device memory allocation of type std::shared_ptr<MLCommon::deviceAllocator>
* @param stream: the cudaStream object
*/
template <typename T>
double compute_rand_index(
  T* firstClusterArray, T* secondClusterArray, int size,
  std::shared_ptr<raft::mr::device::allocator> allocator, cudaStream_t stream) {
  //rand index for size less than 2 is not defined
  ASSERT(size >= 2, "Rand Index for size less than 2 not defined!");

  //allocating and initializing memory for a and b in the GPU
  raft::mr::device::buffer<int> arr_buf(allocator, stream, 2);
  CUDA_CHECK(cudaMemsetAsync(arr_buf.data(), 0, 2 * sizeof(int), stream));

  //kernel configuration
  static const int BLOCK_DIM_Y = 16, BLOCK_DIM_X = 16;
  dim3 numThreadsPerBlock(BLOCK_DIM_X, BLOCK_DIM_Y);
  dim3 numBlocks(raft::ceildiv<int>(size, numThreadsPerBlock.x),
                 raft::ceildiv<int>(size, numThreadsPerBlock.y));

  //calling the kernel
  computeTheNumerator<T, BLOCK_DIM_X, BLOCK_DIM_Y>
    <<<numBlocks, numThreadsPerBlock, 0, stream>>>(
      firstClusterArray, secondClusterArray, size, arr_buf.data(),
      arr_buf.data() + 1);

  //synchronizing and updating the calculated values of a and b from device to host
  int ab_host[2] = {0};
  raft::update_host(ab_host, arr_buf.data(), 2, stream);
  CUDA_CHECK(cudaStreamSynchronize(stream));

  //error handling
  CUDA_CHECK(cudaGetLastError());

  //denominator
  int nChooseTwo = size * (size - 1) / 2;

  //calculating the rand_index
  return (double)(((double)(ab_host[0] + ab_host[1])) / (double)nChooseTwo);
}

template <typename T, typename IdxT>
::std::ostream& operator<<(::std::ostream& os,
                           const HDBSCANInputs<T, IdxT>& dims) {
  return os;
}

template <typename T, typename IdxT>
class HDBSCANTest : public ::testing::TestWithParam<HDBSCANInputs<T, IdxT>> {
 protected:
  void basicTest() {
    raft::handle_t handle;

    params = ::testing::TestWithParam<HDBSCANInputs<T, IdxT>>::GetParam();

    rmm::device_uvector<T> data(params.n_row * params.n_col,
                                handle.get_stream());

    // Allocate result labels and expected labels on device
    raft::allocate(labels, params.n_row);
    raft::allocate(labels_ref, params.n_row);

    raft::copy(data.data(), params.data.data(), data.size(),
               handle.get_stream());
    raft::copy(labels_ref, params.expected_labels.data(), params.n_row,
               handle.get_stream());

    rmm::device_uvector<IdxT> out_children(params.n_row * 2,
                                           handle.get_stream());
    rmm::device_uvector<T> out_deltas(params.n_row, handle.get_stream());

    rmm::device_uvector<IdxT> out_sizes(params.n_row * 2, handle.get_stream());

    rmm::device_uvector<IdxT> out_labels(params.n_row, handle.get_stream());

    rmm::device_uvector<IdxT> mst_src(params.n_row - 1, handle.get_stream());
    rmm::device_uvector<IdxT> mst_dst(params.n_row - 1, handle.get_stream());
    rmm::device_uvector<T> mst_weights(params.n_row - 1, handle.get_stream());

    rmm::device_uvector<T> out_probabilities(params.n_row, handle.get_stream());

    Logger::get().setLevel(CUML_LEVEL_DEBUG);

    HDBSCAN::Common::hdbscan_output<IdxT, T> out(
      handle, params.n_row, out_labels.data(), out_probabilities.data(),
      out_children.data(), out_sizes.data(), out_deltas.data(), mst_src.data(),
      mst_dst.data(), mst_weights.data());

    HDBSCAN::Common::HDBSCANParams hdbscan_params;
    hdbscan_params.k = params.k;
    hdbscan_params.min_cluster_size = params.min_cluster_size;
    hdbscan_params.min_samples = params.min_pts;

    hdbscan(handle, data.data(), params.n_row, params.n_col,
            raft::distance::DistanceType::L2SqrtExpanded, hdbscan_params, out);

    CUDA_CHECK(cudaStreamSynchronize(handle.get_stream()));

    score =
      compute_rand_index(labels, labels_ref, params.n_row,
                         handle.get_device_allocator(), handle.get_stream());
  }

  void SetUp() override { basicTest(); }

  void TearDown() override {
    CUDA_CHECK(cudaFree(labels));
    CUDA_CHECK(cudaFree(labels_ref));
  }

 protected:
  HDBSCANInputs<T, IdxT> params;
  IdxT *labels, *labels_ref;
  int k;

  double score;
};

const std::vector<HDBSCANInputs<float, int>> hdbscan_inputsf2 = {
  // Test n_clusters == n_points
  {10,
   5,
   5,
   2,
   3,
   {0.21390334, 0.50261639, 0.91036676, 0.59166485, 0.71162682, 0.10248392,
    0.77782677, 0.43772379, 0.4035871,  0.3282796,  0.47544681, 0.59862974,
    0.12319357, 0.06239463, 0.28200272, 0.1345717,  0.50498218, 0.5113505,
    0.16233086, 0.62165332, 0.42281548, 0.933117,   0.41386077, 0.23264562,
    0.73325968, 0.37537541, 0.70719873, 0.14522645, 0.73279625, 0.9126674,
    0.84854131, 0.28890216, 0.85267903, 0.74703138, 0.83842071, 0.34942792,
    0.27864171, 0.70911132, 0.21338564, 0.32035554, 0.73788331, 0.46926692,
    0.57570162, 0.42559178, 0.87120209, 0.22734951, 0.01847905, 0.75549396,
    0.76166195, 0.66613745},
   {9, 8, 7, 6, 5, 4, 3, 2, 1, 0}},
  //  // Test outlier points
  {9,
   2,
   3,
   3,
   3,
   {-1, -50, 3, 4, 5000, 10000, 1, 3, 4, 5, 0.000005, 0.00002, 2000000, 500000,
    10, 50, 30, 5},
   {6, 0, 5, 0, 0, 4, 3, 2, 1}},

  // Test n_clusters == (n_points / 2)
  {10,
   5,
   4,
   3,
   4,
   {0.21390334, 0.50261639, 0.91036676, 0.59166485, 0.71162682, 0.10248392,
    0.77782677, 0.43772379, 0.4035871,  0.3282796,  0.47544681, 0.59862974,
    0.12319357, 0.06239463, 0.28200272, 0.1345717,  0.50498218, 0.5113505,
    0.16233086, 0.62165332, 0.42281548, 0.933117,   0.41386077, 0.23264562,
    0.73325968, 0.37537541, 0.70719873, 0.14522645, 0.73279625, 0.9126674,
    0.84854131, 0.28890216, 0.85267903, 0.74703138, 0.83842071, 0.34942792,
    0.27864171, 0.70911132, 0.21338564, 0.32035554, 0.73788331, 0.46926692,
    0.57570162, 0.42559178, 0.87120209, 0.22734951, 0.01847905, 0.75549396,
    0.76166195, 0.66613745},
   {1, 0, 4, 0, 0, 3, 2, 0, 2, 1}},

  // Test n_points == 100
  {100,
   10,
   50,
   10,
   3,
   {6.26168372e-01, 9.30437651e-01, 6.02450208e-01,
    2.73025296e-01, 9.53050619e-01, 3.32164396e-01,
    6.88942598e-01, 5.79163537e-01, 6.70341547e-01,
    2.70140602e-02, 9.30429671e-01, 7.17721157e-01,
    9.89948537e-01, 7.75253347e-01, 1.34491522e-02,
    2.48522428e-02, 3.51413378e-01, 7.64405834e-01,
    7.86373507e-01, 7.18748577e-01, 8.66998621e-01,
    6.80316582e-01, 2.51288712e-01, 4.91078420e-01,
    3.76246281e-01, 4.86828710e-01, 5.67464772e-01,
    5.30734742e-01, 8.99478296e-01, 7.66699088e-01,
    9.49339111e-01, 3.55248484e-01, 9.06046929e-01,
    4.48407772e-01, 6.96395305e-01, 2.44277335e-01,
    7.74840000e-01, 5.21046603e-01, 4.66423971e-02,
    5.12019638e-02, 8.95019614e-01, 5.28956953e-01,
    4.31536306e-01, 5.83857744e-01, 4.41787364e-01,
    4.68656523e-01, 5.73971433e-01, 6.79989654e-01,
    3.19650588e-01, 6.12579596e-01, 6.49126442e-02,
    8.39131142e-01, 2.85252117e-01, 5.84848929e-01,
    9.46507115e-01, 8.58440748e-01, 3.61528940e-01,
    2.44215959e-01, 3.80101125e-01, 4.57128957e-02,
    8.82216988e-01, 8.31498633e-01, 7.23474381e-01,
    7.75788607e-01, 1.40864146e-01, 6.62092382e-01,
    5.13985168e-01, 3.00686418e-01, 8.70109949e-01,
    2.43187753e-01, 2.89391938e-01, 2.84214238e-01,
    8.70985521e-01, 8.77491176e-01, 6.72537226e-01,
    3.30929686e-01, 1.85934324e-01, 9.16222614e-01,
    6.18239142e-01, 2.64768597e-01, 5.76145451e-01,
    8.62961369e-01, 6.84757925e-01, 7.60549082e-01,
    1.27645356e-01, 4.51004673e-01, 3.92292980e-01,
    4.63170803e-01, 4.35449330e-02, 2.17583404e-01,
    5.71832605e-02, 2.06763039e-01, 3.70116249e-01,
    2.09750028e-01, 6.17283019e-01, 8.62549231e-01,
    9.84156240e-02, 2.66249156e-01, 3.87635103e-01,
    2.85591012e-02, 4.24826068e-01, 4.45795088e-01,
    6.86227676e-01, 1.08848960e-01, 5.96731841e-02,
    3.71770228e-01, 1.91548833e-01, 6.95136078e-01,
    9.00700636e-01, 8.76363105e-01, 2.67334632e-01,
    1.80619709e-01, 7.94060419e-01, 1.42854171e-02,
    1.09372387e-01, 8.74028108e-01, 6.46403232e-01,
    4.86588834e-01, 5.93446175e-02, 6.11886291e-01,
    8.83865057e-01, 3.15879821e-01, 2.27043992e-01,
    9.76764951e-01, 6.15620336e-01, 9.76199360e-01,
    2.40548962e-01, 3.21795663e-01, 8.75087904e-02,
    8.11234663e-01, 6.96070480e-01, 8.12062321e-01,
    1.21958818e-01, 3.44348628e-02, 8.72630414e-01,
    3.06162776e-01, 1.76043529e-02, 9.45894971e-01,
    5.33896401e-01, 6.21642973e-01, 4.93062535e-01,
    4.48984262e-01, 2.24560379e-01, 4.24052195e-02,
    4.43447610e-01, 8.95646149e-01, 6.05220676e-01,
    1.81840491e-01, 9.70831206e-01, 2.12563586e-02,
    6.92582693e-01, 7.55946922e-01, 7.95086143e-01,
    6.05328941e-01, 3.99350764e-01, 4.32846636e-01,
    9.81114529e-01, 4.98266428e-01, 6.37127930e-03,
    1.59085889e-01, 6.34682067e-05, 5.59429440e-01,
    7.38827633e-01, 8.93214770e-01, 2.16494306e-01,
    9.35430573e-02, 4.75665868e-02, 7.80503518e-01,
    7.86240041e-01, 7.06854594e-01, 2.13725879e-02,
    7.68246091e-01, 4.50234808e-01, 5.21231104e-01,
    5.01989826e-03, 4.22081572e-02, 1.65337732e-01,
    8.54134740e-01, 4.99430262e-01, 8.94525601e-01,
    1.14028379e-01, 3.69739861e-01, 1.32955599e-01,
    2.65563824e-01, 2.52811151e-01, 1.44792843e-01,
    6.88449594e-01, 4.44921417e-01, 8.23296587e-01,
    1.93266317e-01, 1.19033309e-01, 1.36368966e-01,
    3.42600285e-01, 5.64505195e-01, 5.57594559e-01,
    7.44257892e-01, 8.38231569e-02, 4.11548847e-01,
    3.21010077e-01, 8.55081359e-01, 4.30105779e-01,
    1.16229135e-01, 9.87731964e-02, 3.14712335e-01,
    4.50880592e-01, 2.72289598e-01, 6.31615256e-01,
    8.97432958e-01, 4.44764250e-01, 8.03776440e-01,
    2.68767748e-02, 2.43374608e-01, 4.02141103e-01,
    4.98881209e-01, 5.33173003e-01, 8.82890436e-01,
    7.16149148e-01, 4.19664401e-01, 2.29335357e-01,
    2.88637806e-01, 3.44696803e-01, 6.78171906e-01,
    5.69849716e-01, 5.86454477e-01, 3.54474989e-01,
    9.03876540e-01, 6.45980000e-01, 6.34887593e-01,
    7.88039746e-02, 2.04814126e-01, 7.82251754e-01,
    2.43147074e-01, 7.50951808e-01, 1.72799092e-02,
    2.95349590e-01, 6.57991826e-01, 8.81214312e-01,
    5.73970708e-01, 2.77610881e-01, 1.82155097e-01,
    7.69797417e-02, 6.44792402e-01, 9.46950998e-01,
    7.73064845e-01, 6.04733624e-01, 5.80094567e-01,
    1.67498426e-01, 2.66514296e-01, 6.50140368e-01,
    1.91170299e-01, 2.08752199e-01, 3.01664091e-01,
    9.85033484e-01, 2.92909152e-01, 8.65816607e-01,
    1.85222119e-01, 2.28814559e-01, 1.34286382e-02,
    2.89234322e-01, 8.18668708e-01, 4.71706924e-01,
    9.23199803e-01, 2.80879188e-01, 1.47319284e-01,
    4.13915748e-01, 9.31274932e-02, 6.66322195e-01,
    9.66953974e-01, 3.19405786e-01, 6.69486551e-01,
    5.03096313e-02, 6.95225201e-01, 5.78469859e-01,
    6.29481655e-01, 1.39252534e-01, 1.22564968e-01,
    6.80663678e-01, 6.34607157e-01, 6.42765834e-01,
    1.57127410e-02, 2.92132086e-01, 5.24423878e-01,
    4.68676824e-01, 2.86003928e-01, 7.18608322e-01,
    8.95617933e-01, 5.48844309e-01, 1.74517278e-01,
    5.24379196e-01, 2.13526524e-01, 5.88375435e-01,
    9.88560185e-01, 4.17435771e-01, 6.14438688e-01,
    9.53760881e-01, 5.27151288e-01, 7.03017278e-01,
    3.44448559e-01, 4.47059676e-01, 2.83414901e-01,
    1.98979011e-01, 4.24917361e-01, 5.73172761e-01,
    2.32398853e-02, 1.65887230e-01, 4.05552785e-01,
    9.29665524e-01, 2.26135696e-01, 9.20563384e-01,
    7.65259963e-01, 4.54820075e-01, 8.97710267e-01,
    3.78559302e-03, 9.15219382e-01, 3.55705698e-01,
    6.94905124e-01, 8.58540202e-01, 3.89790666e-01,
    2.49478206e-01, 7.93679304e-01, 4.75830027e-01,
    4.40425353e-01, 3.70579459e-01, 1.40578049e-01,
    1.70386675e-01, 7.04056121e-01, 4.85963102e-01,
    9.68450060e-01, 6.77178001e-01, 2.65934654e-01,
    2.58915007e-01, 6.70052890e-01, 2.61945109e-01,
    8.46207759e-01, 1.01928951e-01, 2.85611334e-01,
    2.45776933e-01, 2.66658783e-01, 3.71724077e-01,
    4.34319025e-01, 4.24407347e-01, 7.15417683e-01,
    8.07997684e-01, 1.64296275e-01, 6.01638065e-01,
    8.60606804e-02, 2.68719187e-01, 5.11764101e-01,
    9.75844338e-01, 7.81226782e-01, 2.20925515e-01,
    7.18135040e-01, 9.82395577e-01, 8.39160243e-01,
    9.08058083e-01, 6.88010677e-01, 8.14271847e-01,
    5.12460821e-01, 1.17311345e-01, 5.96075228e-01,
    9.17455497e-01, 2.12052706e-01, 7.04074603e-01,
    8.72872565e-02, 8.76047818e-01, 6.96235046e-01,
    8.54801557e-01, 2.49729159e-01, 9.76594604e-01,
    2.87386363e-01, 2.36461559e-02, 9.94075254e-01,
    4.25193986e-01, 7.61869994e-01, 5.13334255e-01,
    6.44711165e-02, 8.92156689e-01, 3.55235167e-01,
    1.08154647e-01, 8.78446825e-01, 2.43833016e-01,
    9.23071293e-01, 2.72724115e-01, 9.46631338e-01,
    3.74510294e-01, 4.08451278e-02, 9.78392777e-01,
    3.65079221e-01, 6.37199516e-01, 5.51144906e-01,
    5.25978080e-01, 1.42803678e-01, 4.05451674e-01,
    7.79788219e-01, 6.26009784e-01, 3.35249497e-01,
    1.43159543e-02, 1.80363779e-01, 5.05096904e-01,
    2.82619947e-01, 5.83561392e-01, 3.10951324e-01,
    8.73223968e-01, 4.38545619e-01, 4.81348800e-01,
    6.68497085e-01, 3.79345401e-01, 9.58832501e-01,
    1.89869550e-01, 2.34083070e-01, 2.94066207e-01,
    5.74892667e-02, 6.92106828e-02, 9.61127686e-02,
    6.72650672e-02, 8.47345378e-01, 2.80916761e-01,
    7.32177357e-03, 9.80785961e-01, 5.73192225e-02,
    8.48781331e-01, 8.83225408e-01, 7.34398275e-01,
    7.70381941e-01, 6.20778343e-01, 8.96822048e-01,
    5.40732486e-01, 3.69704071e-01, 5.77305837e-01,
    2.08221827e-01, 7.34275341e-01, 1.06110900e-01,
    3.49496706e-01, 8.34948910e-01, 1.56403291e-02,
    6.78576376e-01, 8.96141268e-01, 5.94835119e-01,
    1.43943153e-01, 3.49618530e-01, 2.10440392e-01,
    3.46585620e-01, 1.05153093e-01, 3.45446174e-01,
    2.72177079e-01, 7.07946300e-01, 4.33717726e-02,
    3.31232203e-01, 3.91874320e-01, 4.76338141e-01,
    6.22777789e-01, 2.95989228e-02, 4.32855769e-01,
    7.61049310e-01, 3.63279149e-01, 9.47210350e-01,
    6.43721247e-01, 6.58025802e-01, 1.05247633e-02,
    5.29974442e-01, 7.30675767e-01, 4.30041079e-01,
    6.62634841e-01, 8.25936616e-01, 9.91253704e-01,
    6.79399281e-01, 5.44177006e-01, 7.52876048e-01,
    3.32139049e-01, 7.98732398e-01, 7.38865223e-01,
    9.16055132e-01, 6.11736493e-01, 9.63672879e-01,
    1.83778839e-01, 7.27558919e-02, 5.91602822e-01,
    3.25235484e-01, 2.34741217e-01, 9.52346277e-01,
    9.18556407e-01, 9.35373324e-01, 6.89209070e-01,
    2.56049054e-01, 6.17975395e-01, 7.82285691e-01,
    9.84983432e-01, 6.62322741e-01, 2.04144457e-01,
    3.98446577e-01, 1.38918297e-01, 3.05919921e-01,
    3.14043787e-01, 5.91072666e-01, 7.44703771e-01,
    8.92272567e-01, 9.78017873e-01, 9.01203161e-01,
    1.41526372e-01, 4.14878484e-01, 6.80683651e-01,
    5.01733152e-02, 8.14635389e-01, 2.27926375e-01,
    9.03269815e-01, 8.68443745e-01, 9.86939190e-01,
    7.40779486e-01, 2.61005311e-01, 3.19276232e-01,
    9.69509248e-01, 1.11908818e-01, 4.49198556e-01,
    1.27056715e-01, 3.84064823e-01, 5.14591811e-01,
    2.10747488e-01, 9.53884090e-01, 8.43167950e-01,
    4.51187972e-01, 3.75331782e-01, 6.23566461e-01,
    3.55290379e-01, 2.95705968e-01, 1.69622690e-01,
    1.42981830e-01, 2.72180991e-01, 9.46468040e-01,
    3.70932500e-01, 9.94292830e-01, 4.62587505e-01,
    7.14817405e-01, 2.45370540e-02, 3.00906377e-01,
    5.75768304e-01, 9.71448393e-01, 6.95574827e-02,
    3.93693854e-01, 5.29306116e-01, 5.04694554e-01,
    6.73797120e-02, 6.76596969e-01, 5.50948898e-01,
    3.24909641e-01, 7.70337719e-01, 6.51842631e-03,
    3.03264879e-01, 7.61037886e-03, 2.72289601e-01,
    1.50502041e-01, 6.71103888e-02, 7.41503703e-01,
    1.92088941e-01, 2.19043977e-01, 9.09320161e-01,
    2.37993569e-01, 6.18107973e-02, 8.31447852e-01,
    2.23355609e-01, 1.84789435e-01, 4.16104518e-01,
    4.21573859e-01, 8.72446305e-02, 2.97294197e-01,
    4.50328256e-01, 8.72199917e-01, 2.51279916e-01,
    4.86219272e-01, 7.57071329e-01, 4.85655942e-01,
    1.06187277e-01, 4.92341327e-01, 1.46017513e-01,
    5.25421017e-01, 4.22637906e-01, 2.24685018e-01,
    8.72648431e-01, 5.54051490e-01, 1.80745062e-01,
    2.12756336e-01, 5.20883169e-01, 7.60363654e-01,
    8.30254678e-01, 5.00003328e-01, 4.69017439e-01,
    6.38105527e-01, 3.50638261e-02, 5.22217353e-02,
    9.06516882e-02, 8.52975842e-01, 1.19985883e-01,
    3.74926753e-01, 6.50302066e-01, 1.98875727e-01,
    6.28362507e-02, 4.32693501e-01, 3.10500685e-01,
    6.20732833e-01, 4.58503272e-01, 3.20790034e-01,
    7.91284868e-01, 7.93054570e-01, 2.93406765e-01,
    8.95399023e-01, 1.06441034e-01, 7.53085241e-02,
    8.67523104e-01, 1.47963482e-01, 1.25584706e-01,
    3.81545040e-02, 6.34338619e-01, 1.76368938e-02,
    5.75553531e-02, 5.31607516e-01, 2.63869588e-01,
    9.41945823e-01, 9.24028838e-02, 5.21496463e-01,
    7.74866558e-01, 5.65210610e-01, 7.28015327e-02,
    6.51963790e-01, 8.94727453e-01, 4.49571590e-01,
    1.29932405e-01, 8.64026259e-01, 9.92599934e-01,
    7.43721560e-01, 8.87300215e-01, 1.06369925e-01,
    8.11335531e-01, 7.87734900e-01, 9.87344678e-01,
    5.32502820e-01, 4.42612382e-01, 9.64041183e-01,
    1.66085871e-01, 1.12937664e-01, 5.24423470e-01,
    6.54689333e-01, 4.59119726e-01, 5.22774091e-01,
    3.08722276e-02, 6.26979315e-01, 4.49754105e-01,
    8.07495757e-01, 2.34199499e-01, 1.67765675e-01,
    9.22168418e-01, 3.73210378e-01, 8.04432575e-01,
    5.61890354e-01, 4.47025593e-01, 6.43155678e-01,
    2.40407640e-01, 5.91631279e-01, 1.59369206e-01,
    7.75799090e-01, 8.32067212e-01, 5.59791576e-02,
    6.39105224e-01, 4.85274738e-01, 2.12630838e-01,
    2.81431312e-02, 7.16205363e-01, 6.83885011e-01,
    5.23869697e-01, 9.99418314e-01, 8.35331599e-01,
    4.69877463e-02, 6.74712562e-01, 7.99273684e-01,
    2.77001890e-02, 5.75809742e-01, 2.78513031e-01,
    8.36209905e-01, 7.25472379e-01, 4.87173943e-01,
    7.88311357e-01, 9.64676177e-01, 1.75752651e-01,
    4.98112580e-01, 8.08850418e-02, 6.40981131e-01,
    4.06647450e-01, 8.46539387e-01, 2.12620694e-01,
    9.11012851e-01, 8.25041445e-01, 8.90065575e-01,
    9.63626055e-01, 5.96689242e-01, 1.63372670e-01,
    4.51640148e-01, 3.43026542e-01, 5.80658851e-01,
    2.82327625e-01, 4.75535418e-01, 6.27760926e-01,
    8.46314115e-01, 9.61961932e-01, 3.19806094e-01,
    5.05508062e-01, 5.28102944e-01, 6.13045057e-01,
    7.44714938e-01, 1.50586073e-01, 7.91878033e-01,
    4.89839179e-01, 3.10496849e-01, 8.82309038e-01,
    2.86922314e-01, 4.84687559e-01, 5.20838630e-01,
    4.62955493e-01, 2.38185305e-01, 5.47259907e-02,
    7.10916137e-01, 7.31887202e-01, 6.25602317e-01,
    8.77741168e-01, 4.19881322e-01, 4.81222328e-01,
    1.28224501e-01, 2.46034010e-01, 3.34971854e-01,
    7.37216484e-01, 5.62134821e-02, 7.14089724e-01,
    9.85549393e-01, 4.66295827e-01, 3.08722434e-03,
    4.70237690e-01, 2.66524167e-01, 7.93875484e-01,
    4.54795911e-02, 8.09702944e-01, 1.47709735e-02,
    1.70082405e-01, 6.35905179e-01, 3.75379109e-01,
    4.30315011e-01, 3.15788760e-01, 5.58065230e-01,
    2.24643800e-01, 2.42142981e-01, 6.57283636e-01,
    3.34921891e-01, 1.26588975e-01, 7.68064155e-01,
    9.43856291e-01, 4.47518596e-01, 5.44453573e-01,
    9.95764932e-01, 7.16444391e-01, 8.51019765e-01,
    1.01179183e-01, 4.45473958e-01, 4.60327322e-01,
    4.96895844e-02, 4.72907738e-01, 5.58987444e-01,
    3.41027487e-01, 1.56175026e-01, 7.58283148e-01,
    6.83600909e-01, 2.14623396e-01, 3.27348880e-01,
    3.92517893e-01, 6.70418431e-01, 5.16440832e-01,
    8.63140348e-01, 5.73277464e-01, 3.46608058e-01,
    7.39396341e-01, 7.20852434e-01, 2.35653246e-02,
    3.89935659e-01, 7.53783745e-01, 6.34563528e-01,
    8.79339335e-01, 7.41599159e-02, 5.62433904e-01,
    6.15553852e-01, 4.56956324e-01, 5.20047447e-01,
    5.26845015e-02, 5.58471266e-01, 1.63632233e-01,
    5.38936665e-02, 6.49593683e-01, 2.56838748e-01,
    8.99035326e-01, 7.20847756e-01, 5.68954684e-01,
    7.43684755e-01, 5.70924238e-01, 3.82318724e-01,
    4.89328290e-01, 5.62208561e-01, 4.97540804e-02,
    4.18011085e-01, 6.88041565e-01, 2.16234653e-01,
    7.89548214e-01, 8.46136387e-01, 8.46816189e-01,
    1.73842353e-01, 6.11627842e-02, 8.44440559e-01,
    4.50646654e-01, 3.74785037e-01, 4.87196697e-01,
    4.56276448e-01, 9.13284391e-01, 4.15715464e-01,
    7.13597697e-01, 1.23641270e-02, 5.10031271e-01,
    4.74601930e-02, 2.55731159e-01, 3.22090006e-01,
    1.91165703e-01, 4.51170940e-01, 7.50843157e-01,
    4.42420576e-01, 4.25380660e-01, 4.50667257e-01,
    6.55689206e-01, 9.68257670e-02, 1.96528793e-01,
    8.97343028e-01, 4.99940904e-01, 6.65504083e-01,
    9.41828079e-01, 4.54397338e-01, 5.61893331e-01,
    5.09839880e-01, 4.53117514e-01, 8.96804127e-02,
    1.74888861e-01, 6.65641378e-01, 2.81668336e-01,
    1.89532742e-01, 5.61668382e-01, 8.68330157e-02,
    8.25092797e-01, 5.18106324e-01, 1.71904024e-01,
    3.68385523e-01, 1.62005436e-01, 7.48507399e-01,
    9.30274827e-01, 2.38198517e-01, 9.52222901e-01,
    5.23587800e-01, 6.94384557e-01, 1.09338652e-01,
    4.83356794e-01, 2.73050402e-01, 3.68027050e-01,
    5.92366466e-01, 1.83192289e-01, 8.60376029e-01,
    7.13926203e-01, 8.16750052e-01, 1.57890291e-01,
    6.25691951e-01, 5.24831646e-01, 1.73873797e-01,
    1.02429784e-01, 9.17488471e-01, 4.03584434e-01,
    9.31170884e-01, 2.79386137e-01, 8.77745206e-01,
    2.45200576e-01, 1.28896951e-01, 3.15713052e-01,
    5.27874291e-01, 2.16444335e-01, 7.03883817e-01,
    7.74738919e-02, 8.42422142e-01, 3.75598924e-01,
    3.51002411e-01, 6.22752776e-01, 4.82407943e-01,
    7.43107867e-01, 9.46182666e-01, 9.44344819e-01,
    3.28124763e-01, 1.06147431e-01, 1.65102684e-01,
    3.84060507e-01, 2.91057722e-01, 7.68173662e-02,
    1.03543651e-01, 6.76698940e-01, 1.43141994e-01,
    7.21342202e-01, 6.69471294e-03, 9.07298311e-01,
    5.57080171e-01, 8.10954489e-01, 4.11120526e-01,
    2.06407453e-01, 2.59590556e-01, 7.58512718e-01,
    5.79873897e-01, 2.92875650e-01, 2.83686529e-01,
    2.42829343e-01, 9.19323719e-01, 3.46832864e-01,
    3.58238858e-01, 7.42827585e-01, 2.05760059e-01,
    9.58438860e-01, 5.66326411e-01, 6.60292846e-01,
    5.61095078e-02, 6.79465531e-01, 7.05118513e-01,
    4.44713264e-01, 2.09732933e-01, 5.22732436e-01,
    1.74396512e-01, 5.29356748e-01, 4.38475687e-01,
    4.94036404e-01, 4.09785794e-01, 6.40025507e-01,
    5.79371821e-01, 1.57726118e-01, 6.04572263e-01,
    5.41072639e-01, 5.18847173e-01, 1.97093284e-01,
    8.91767002e-01, 4.29050835e-01, 8.25490570e-01,
    3.87699807e-01, 4.50705808e-01, 2.49371643e-01,
    3.36074898e-01, 9.29925118e-01, 6.65393649e-01,
    9.07275994e-01, 3.73075859e-01, 4.14044139e-03,
    2.37463702e-01, 2.25893784e-01, 2.46900245e-01,
    4.50350196e-01, 3.48618117e-01, 5.07193932e-01,
    5.23435142e-01, 8.13611417e-01, 8.92715622e-01,
    1.02623450e-01, 3.06088345e-01, 7.80461650e-01,
    2.21453645e-01, 2.01419652e-01, 2.84254457e-01,
    3.68286735e-01, 7.39358243e-01, 8.97879394e-01,
    9.81599566e-01, 7.56526442e-01, 7.37645545e-01,
    4.23976657e-02, 8.25922012e-01, 2.60956996e-01,
    2.90702065e-01, 8.98388344e-01, 3.03733299e-01,
    8.49071471e-01, 3.45835425e-01, 7.65458276e-01,
    5.68094872e-01, 8.93770930e-01, 9.93161641e-01,
    5.63368667e-02, 4.26548945e-01, 5.46745780e-01,
    5.75674571e-01, 7.94599487e-01, 7.18935553e-02,
    4.46492976e-01, 6.40240123e-01, 2.73246969e-01,
    2.00465968e-01, 1.30718835e-01, 1.92492005e-01,
    1.96617189e-01, 6.61271644e-01, 8.12687657e-01,
    8.66342445e-01

   },
   {0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0,
    4, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}}};

typedef HDBSCANTest<float, int> HDBSCANTestF_Int;
TEST_P(HDBSCANTestF_Int, Result) {
  //  EXPECT_TRUE(score == 1.0);
}

INSTANTIATE_TEST_CASE_P(HDBSCANTest, HDBSCANTestF_Int,
                        ::testing::ValuesIn(hdbscan_inputsf2));

template <typename T, typename IdxT>
struct ClusterCondensingInputs {
  IdxT n_row;
  int min_cluster_size;

  std::vector<IdxT> mst_src;
  std::vector<IdxT> mst_dst;
  std::vector<T> mst_data;

  std::vector<IdxT> expected;
};

template <typename T, typename IdxT>
class ClusterCondensingTest
  : public ::testing::TestWithParam<ClusterCondensingInputs<T, IdxT>> {
 protected:
  void basicTest() {
    raft::handle_t handle;

    params =
      ::testing::TestWithParam<ClusterCondensingInputs<T, IdxT>>::GetParam();

    rmm::device_uvector<IdxT> mst_src(params.n_row - 1, handle.get_stream());
    rmm::device_uvector<IdxT> mst_dst(params.n_row - 1, handle.get_stream());
    rmm::device_uvector<T> mst_data(params.n_row - 1, handle.get_stream());

    raft::copy(mst_src.data(), params.mst_src.data(), params.mst_src.size(),
               handle.get_stream());

    raft::copy(mst_dst.data(), params.mst_dst.data(), params.mst_dst.size(),
               handle.get_stream());

    raft::copy(mst_data.data(), params.mst_data.data(), params.mst_data.size(),
               handle.get_stream());

    rmm::device_uvector<IdxT> out_children(params.n_row * 2,
                                           handle.get_stream());

    rmm::device_uvector<IdxT> out_size(params.n_row, handle.get_stream());

    rmm::device_uvector<T> out_delta(params.n_row, handle.get_stream());

    Logger::get().setLevel(CUML_LEVEL_DEBUG);

    raft::sparse::op::coo_sort_by_weight(
      mst_src.data(), mst_dst.data(), mst_data.data(), (IdxT)mst_src.size(), handle.get_stream());

    /**
     * Build dendrogram of MST
     */
    raft::hierarchy::detail::build_dendrogram_host(
      handle, mst_src.data(), mst_dst.data(), mst_data.data(), params.n_row - 1,
      out_children.data(), out_delta.data(), out_size.data());

    raft::print_device_vector("children", out_children.data(),
                              out_children.size(), std::cout);
    raft::print_device_vector("delta", out_delta.data(), out_delta.size(),
                              std::cout);
    raft::print_device_vector("size", out_size.data(), out_delta.size(),
                              std::cout);

    /**
     * Condense Hierarchy
     */
    HDBSCAN::Common::CondensedHierarchy<IdxT, T> condensed_tree(handle,
                                                                params.n_row);
    HDBSCAN::detail::Condense::build_condensed_hierarchy(
      handle, out_children.data(), out_delta.data(), out_size.data(),
      params.min_cluster_size, params.n_row, condensed_tree);

    CUDA_CHECK(cudaStreamSynchronize(handle.get_stream()));

    raft::print_device_vector("condensed parents", condensed_tree.get_parents(),
                              condensed_tree.get_n_edges(), std::cout);
    raft::print_device_vector("condensed children",
                              condensed_tree.get_children(),
                              condensed_tree.get_n_edges(), std::cout);
    raft::print_device_vector("condensed size", condensed_tree.get_sizes(),
                              condensed_tree.get_n_edges(), std::cout);
  }

  void SetUp() override { basicTest(); }

  void TearDown() override {
    // CUDA_CHECK(cudaFree(labels));
    // CUDA_CHECK(cudaFree(labels_ref));
  }

 protected:
  ClusterCondensingInputs<T, IdxT> params;
  IdxT *labels, *labels_ref;
  int k;

  double score;
};

typedef ClusterCondensingTest<float, int> ClusterCondensingTestF_Int;
TEST_P(ClusterCondensingTestF_Int, Result) {
  //  EXPECT_TRUE(score == 1.0);
}

const std::vector<ClusterCondensingInputs<float, int>>
  cluster_condensing_inputs = {
    {9,
     3,
     {0, 2, 4, 6, 7, 1, 8, 8},
     {1, 3, 5, 5, 8, 5, 3, 4},
     {1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0},
     {1}},

    // Iris
    {150,
     3,
     {39,  17,  34,  1,   27,  7,   49,  30,  4,   28,  34,  40,  12,  47,  29,
      45,  2,   26,  3,   21,  48,  37,  38,  11,  96,  25,  42,  19,  94,  6,
      92,  92,  58,  89,  35,  46,  10,  82,  86,  31,  36,  8,   149, 101, 127,
      95,  120, 20,  123, 145, 55,  78,  112, 67,  88,  61,  147, 54,  97,  111,
      124, 115, 116, 128, 104, 143, 54,  74,  65,  23,  5,   91,  51,  16,  71,
      83,  139, 111, 126, 43,  80,  77,  77,  76,  103, 66,  90,  72,  138, 81,
      63,  53,  144, 24,  32,  73,  133, 137, 56,  70,  132, 79,  110, 44,  146,
      33,  121, 136, 102, 13,  84,  85,  52,  18,  141, 50,  59,  22,  64,  130,
      113, 107, 14,  62,  105, 100, 87,  148, 108, 114, 15,  125, 119, 134, 135,
      122, 68,  129, 60,  93,  57,  41,  109, 98,  106, 118, 117, 131, 23},
     {0,   0,   9,   34,  0,   39,  7,   34,  0,   27,  49,  17,  1,   29,  30,
      1,   47,  7,   47,  17,  27,  4,   3,   29,  99,  34,  38,  21,  99,  47,
      99,  69,  75,  69,  49,  19,  48,  92,  58,  28,  10,  38,  101, 142, 149,
      96,  140, 31,  127, 112, 96,  55,  140, 92,  96,  96,  145, 58,  78,  147,
      120, 145, 147, 111, 128, 120, 74,  97,  75,  26,  10,  78,  75,  10,  97,
      101, 112, 123, 123, 26,  69,  147, 86,  58,  116, 55,  94,  123, 127, 80,
      91,  89,  140, 11,  46,  63,  83,  116, 51,  138, 128, 81,  147, 46,  123,
      32,  101, 115, 120, 38,  66,  56,  86,  5,   145, 52,  89,  6,   82,  102,
      101, 130, 33,  92,  107, 136, 72,  136, 128, 121, 33,  102, 72,  103, 130,
      105, 87,  125, 93,  81,  93,  8,   143, 57,  84,  122, 105, 117, 98},
     {0.17320508, 0.17320508, 0.2,        0.2236068,  0.2236068,  0.2236068,
      0.2236068,  0.2236068,  0.2236068,  0.2236068,  0.24494897, 0.24494897,
      0.24494897, 0.24494897, 0.24494897, 0.26457513, 0.26457513, 0.26457513,
      0.26457513, 0.28284271, 0.28284271, 0.3,        0.3,        0.3,
      0.3,        0.3,        0.31622777, 0.31622777, 0.31622777, 0.31622777,
      0.31622777, 0.31622777, 0.31622777, 0.33166248, 0.33166248, 0.33166248,
      0.33166248, 0.34641016, 0.34641016, 0.34641016, 0.36055513, 0.36055513,
      0.36055513, 0.36055513, 0.36055513, 0.36055513, 0.36055513, 0.36055513,
      0.37416574, 0.37416574, 0.37416574, 0.37416574, 0.37416574, 0.37416574,
      0.37416574, 0.37416574, 0.38729833, 0.38729833, 0.38729833, 0.38729833,
      0.38729833, 0.38729833, 0.38729833, 0.38729833, 0.38729833, 0.38729833,
      0.38729833, 0.38729833, 0.38729833, 0.38729833, 0.38729833, 0.38729833,
      0.38729833, 0.4,        0.41231056, 0.41231056, 0.41231056, 0.42426407,
      0.42426407, 0.42426407, 0.42426407, 0.42426407, 0.42426407, 0.42426407,
      0.42426407, 0.42426407, 0.42426407, 0.43588989, 0.43588989, 0.43588989,
      0.43588989, 0.43588989, 0.43588989, 0.4472136,  0.45825757, 0.45825757,
      0.45825757, 0.45825757, 0.45825757, 0.46904158, 0.46904158, 0.46904158,
      0.46904158, 0.47958315, 0.47958315, 0.47958315, 0.48989795, 0.5,
      0.5,        0.5,        0.50990195, 0.50990195, 0.50990195, 0.51961524,
      0.51961524, 0.51961524, 0.53851648, 0.53851648, 0.53851648, 0.53851648,
      0.54772256, 0.55677644, 0.58309519, 0.58309519, 0.60827625, 0.60827625,
      0.6164414,  0.6244998,  0.6244998,  0.64031242, 0.64031242, 0.64807407,
      0.65574385, 0.7,        0.7,        0.7,        0.70710678, 0.70710678,
      0.72111026, 0.72111026, 0.78740079, 0.79372539, 0.80622577, 0.81853528,
      0.88317609, 0.96436508, 1.0198039,  1.02469508, 1.64012195},
     {1}},
      {1797,
       10,
        {0,  305,  434,  434,  434,  396,  396,  396,   79,  464,   79,
          396,   79,  396,  512,   79,  434,  229,  396,  441,  434,  229,
          79,  512,  305,  229,  305,  229,  166,  252,   79,    0,    0,
          79,    0,    0,  434,  229,    0,    0,  305,    0,   79,   79,
          166,   79,    0,    0,    0,  229,   79,  252,   79,   79,    0,
          252,   79,    0,  252,   79,  202,  126,  126,  305,    0,  166,
          130,   79,    0,  166,    0,   79,  126,    0,  130,    0,    0,
          126,    0,  160,   79,    0,  276,   48,    0,  160,  126,    0,
          229,    0,   79,  126,  126,   20,  305,   79,   79,   48,   79,
          79,   79,   36,   36,  276,   36,   79,    0,   36,   79,   79,
          0,   79,   49,  130,  160,    0,   20,   79,   20,   79,    0,
          48,   20,   79,  276,   79,    0,   48,    0,  130,   20,    0,
          36,    0,   20,    0,    0,   49,   48,   48,    0,    0,   48,
          0,   49,    0,  166,   20,   36,   10,   72,   20,   79,    0,
          20,   36,    0,    0,   48,    0,    0,   36,    0,  594, 1507,
          1282,  455, 1446,  455, 1444, 1282, 1444,  944,  455,  425,  425,
          1282,  425,  425,  425,  425,  455,  425,  425,  635,  455,  425,
          39,  425,   39, 1424,  708,  316,  339,  259,  867,  339,  259,
          259,  345,  316,  345,  259,  259,  259,  279,   13,   13,  279,
          316,   13,  259,   13,  259,   13,   13,  279,   13,  279,   13,
          13,  259,   13,  318,   13,  193,  259,  345,   13,  259,  259,
          13,   13,  139,   13,  285,  279,  269,  425,  259,  259,   13,
          259,  635,   39,  259,  279,  259,  359,    3,  269,   13,   13,
          425,    3,   13,  425,  285,   13,   39,  139,  189,   13,   39,
          285,   13,   13,  279,  139,   13,  425,  339,   13,  139,    3,
          13,   39,  279,   39, 1454, 1461,  562,  938,  938, 1535,  562,
          562,  562,  562,  562,  549,  562, 1075, 1568,  117,  117,  117,
          117,  117,  330,  281,  281,  281,  330,  117,   13,  117,   39,
          3,   13,   13,  318,  301,  117,  281,  175,    3,  425,   60,
          45,  139,   39,  281,  405,  879,  945,  148, 1327,  242,  257,
          326, 1050, 1237, 1050, 1050, 1050, 1050,  326,  326,  326,  875,
          326,  326,  326,  777,  326,  326,  326,  777,  326,  326,  326,
          349,  777,  326,  326,  349,  326,  326,  777,  326,  326,  326,
          349,  349,  257,  349,  257,  257,  326,  257,   99,   99,  326,
          257,  326,  257,  257,  257,  349,   99,   99,  242,  257,  647,
          349,   99,  346,  326,  242,    1,  298,   99,   13,  285,  405,
          279,  139,  285,  242,  117,  148,  165,  148,  358,  654,  358,
          3,    3,  298,  281,  117,  281,  549,  117,   39,  139,  148,
          1688,  187,  132,  181,  372, 1017,  463,  501,  501,  501,  463,
          463,  463,  463,  181,  463,  372,  310,  181,  310,  463,  372,
          181,  310,  181,  132,  181,  372,  463,  132,  181,  463,  258,
          388,  388,  132,  132,  132,  463,  388,  132,  408,  388,  408,
          132,   84,   84,  181,  437,  132,  388,  181,  408,  181,  180,
          22,   22,  132,  388,   84,  132,   84,  117,  259,  285,  117,
          180,  405,  180,  139,   39,  293,    3,  148, 1295,   13,  117,
          162, 1295,  148,  654,  135,   39,  148,  293,  101,  358,  139,
          657, 1647,    6,   58,   65,  195,   65,  360,  360,  262,  262,
          262,  262,  262,  262,  262,  262,  262,  262,  262,  262,   65,
          65,  146,   65,  262,  262,  232,   65,   65,  146,  234,  234,
          234,  232,  234,   65,   65,  234,   65,  262,   65,  234,  322,
          65,  196,  262,  196,  146,  234,  234,  136,   65,   65,  234,
          232,  146,  195,  196,   65,   65,   65,  136,  146,  196,   65,
          196,  232,  234,   65,  234,  146,  197,   58,  136,   58,   65,
          136,  262,   58,  197,   58,   65,  262,   65,  136,  164,   58,
          65,  146,  136,   88,   65,   65,   65,   65,   58,  146,   65,
          58,  164,  146,  164,  146,  234,   58,    6,   34,   58,  146,
          58,   58,    6,    6,   65,  164,    6,  146,  136,   34,  146,
          6,   34,   34,    6,  146,  146,    6,  197,  146,  146,   65,
          34,  234,   34,   34,  197,  164,    6,    6,    6,  262,  164,
          34,    6,   65,   13,   65,  180,  705,    3,   20,   55,  242,
          242,  180,   39,  122,  654,   13,  122,   59,  117,  405,  181,
          189,  705,    6,  139,  132,  330,  288,  388,  114,   40,   59,
          39,   13,  117,   39,   15,   22,  293,   39,   99,    6,  128,
          248,  279,   40,   84,   59,   22,   67,    1,  146,  102,  339,
          1,  257,   99,   84,   22,   84,  388,    6,   40,  122,   40,
          45,  372,   48,  264,  148,  148,   13,  148,  264,   93, 1168,
          21,   21,   21,   21,   21,   21,   11,   11,  102,  437,   40,
          39,  310,  281,   32,  169,  169,  437,  285,  358,   13,  541,
          117,  148,   11,  128,   40,  281,   39,  358,  135,  388,  549,
          440,  388,   40,  298,    3,   15,   30,   39,  281,   11,    3,
          189,  373,  102,  259,  264,   13,   21,   39,  195,   40,   15,
          3,  117,    1,   11,  148,  138,   32,  114,  114,   15,   13,
          13,   34,  180,  148,   34,  148,  269, 1647,  790,   41,  124,
          353, 1161, 1387,  353,  353,  124,  353,  124,  367,  817, 1483,
          124,  320,  124, 1483,  124, 1439,   41,  817,   41,   41,  817,
          124,   41,  124,   41,  124,   41,  297,   41,  124,  580,  124,
          353,  817,  580,  297,   41,   41,   41,  124,  270,  297,  450,
          270,  353,  353,  450,   41,   41,   64,   41,   41,  124,  540,
          64,  450,   41,   97,  540,  450,   41,   97,  297,   14,  540,
          260,  297,  270,   64,  124,  377,  260,  450,  111,   97,  111,
          41,  410,   14,   14,  111,  111,  520,  817,   22,  657,  138,
          22,   39,  102,  635,  264,  260,   40,  132,   40,  128,   14,
          6,   64,  114,  148,   21,   15,  146,  123,  285,   32,  441,
          164,  169,  109,    1,  264,  301,  148,    6,  408,    3,  541,
          102,  124,   25,  297,   25,   22,  104,  410,   34,  148,   21,
          22,    1,   93,    3,  293,  330,  410,  279,  455,  181,   76,
          405,   15,  142,    3,  104,   15,    1,   40,   39,  123,  281,
          76,   39,    1,  269,  410,   15,   64,  199,   39,  358,  264,
          3,   32,   15,   11,   59,  199,  264,  280,   40,   13,   32,
          180,   32,  152,   13,  102,  242,  122,  146,  149,   39,   15,
          11,   13,   14,   22,   92,   84,   25,  242,  293,  440,   14,
          114,   40,   64,   11,  129,  261,   45,   21, 1189,  388,  199,
          22,   11,   41,   20,   13,  148,   34,  251,   64,  114,  388,
          139,  297,  260,  199,   76,   92,   15,  132,  139,  102,   64,
          40,  152,   41,  102,  410,   39,  180,   32,  287,    1,   11,
          257,  220,  301,    0,   11,   40,  324,   84,   68,  436,  146,
          13,  111,   21,   97,  189,  297,   64,  388,   26,  132,   32,
          32,  281,   21,   76,  109,   76,  293,  128,  138,   45,   15,
          76,  102,  128,  305,   73,   32,  129,  123,   32,    3,  111,
          138,   99,  330,   39,    3,  102,  152,  358,   73,  287,  400,
          76,  388,   32,    6,   13,   11,   84,  152,   25,  117,  272,
          40,   11,  180,   40,  296,   25,   14,   84,  220,  289,    6,
          163,    3,  398,  373,  324,  117,  353,  258,   13,   40,  269,
          264,  280,  128,   40,   59,  281,  281,   40,  264,  105,   84,
          11,  293,   22,  105,  146,  117,   15,    1,   11,   76,    8,
          40,  883, 1649,   81,  273,  597,  624,  597,  983,   94,   94,
          94,   94,  273,  273,   94,  273,   94,   94,   94,   81,   81,
          94,   81,   81,   81,  174,  273,   94,  559,   94,   94,   81,
          273,   94,   81,   94,   94,   94,  222,  273,   81,  174,  174,
          81,   81,   81,   94,  174,  273,   81,   94,   94,   94,   81,
          81,  174,   94,   81,   81,  174,  182,   94,  174,  174,   81,
          174,   44,   94,   81,  182,   81,   94,  174,   44,   81,  108,
          44,   94,   44,   94,   81,  173,  182,   81,   81,   94,   44,
          273,  337,   94,  174,   81,  273,   94,   94,   17,   94,  112,
          81,  174,   94,   94,   44,  157,   44,  137,   52,   44,   94,
          44,  157,  157,   44,   44,  337,   52,  174,   17,  300,   17,
          52,  174,   22,   56,   14,  129,  189,    3,    3,  199,   76,
          52,  443,   99,   11,  152,  148,  295,  583,   76,  254,  264,
          84,  257,    3,   52,  324,   92,   15,    6,  154,   35,   64,
          1,   25,    4,  232,  117,   40,  180,   99,   11,   40,   76,
          64,   13,    3,   42,  264,   71,   43,  264,   84,  289,   40,
          181,  137,  461,   22,   93,   32,   11,  102,  324,   15,   44,
          15,    8,  174,  181,   44,   32,   10,  142,   47,   12,   25,
          7,  274,  148,   25,   73,   22,   25,  148,   25,   43,  251,
          29,   15,   41,   99,   15,   40,  417,    8,   94,   68,  114,
          4,  309,   85,   93,   23,   13,  154,  337,   36,    4,  384,
          148,   17,   81,   18,   91,   15,  257,  152,   84,   15,  236,
          95,  545,   84,  570,  521,   22,  232,  258,   14,   40,  264,
          180,   25,  293,  152,   11,  104,   84,  309,    8,   59,   40,
          199,   14,    8,   18,   14,   18,  251,  102,   12,   45,   39,
          114,   94,   94,   64,   29,  483,  128,   18,   21,   40,    6,
          43,   11,   76,   70,  251,  281,  111,    5,   40,    4,    4,
          384,  461,   21,   28,  459,   18,    7,    6,  141,   13,   23,
          146,   52,    8,  104,  220,   48,    6,  147,   68,   52,  309,
          148,  151,   21,    8,   40,   15,   11,   99,   17,  114,   12,
          264,    8,  359,  101,  264,  147,  251,  293,    4,  180,  123,
          293,   76,  154,  135,  353,  325,  105,  102,  114,  119,  526,
          264,  325,  138,   59,  325,  359,  113,   59,  533,  116,   13,
          69,  123,  325,  248,   35,   70,   59,   84,  309,  152,   45,
          152,   86,  289,   40,  135,   15,   76,    3,   84,    7,   32,
          157,  190,   69,   14,  325,  289,   84,   15,  117,  261,   18,
          128,  116,   40,  254,   74,  173,    3,   74,   21,    8,   18,
          288,   18,    8,  174,   33,    0,    1,   15,   11,  366,   23,
          378,  358,    5,   28,   69,    5,   40,   11,  417,   18,  121,
          4,   40,   88,   69,   52,  388,  518,  154,  289,   40,  157,
          113,    2,  260,    8,  157,  116,    2,   12,  184,  482,  147,
          113,  518,    1,   56,   17,    5,  384,  398,   39,   12,  518,
          68,   88,  325,  461,  324,   76,   29,   11,  461,   11,   43,
          144,  519,   12,  392,   76,   19,   74,    8,  275,  415,  121,
          18,  375,   56,   10,   11,    6,   84,   25,   15,  174,  205,
          87,  102,   37,  353,    8,   23,  375,  325,  116,   33,  125,
          199,   18,   62,  527,  177,   18,  264,  325,  125,  380,  349,
          148,   32,   69,  131,   82,   69,    2,    7,    3,  151,  527,
          8,  325,   83,   74,  398,  184,   47,   24,   49,   43,  180,
          157,  131,  184,   19,    8,   74,  375,   18,  190,  131,    5,
          76,    4,    2,   76,    2,   25,    2,    2,   38,   23,    2,
          12,  151,  325,    2,   86,  349,  156,  236,  477,  131,   39,
          135,  131,  400,   11,  518,   40,   18,    2,    2,   69,  157,
          156,   27,  325,   18,  121,   18,  117,  317,  101,   38,  353,
          56,   69,  157,  131,  131,  265,   27,    4,  131,  516,   62,
          8,  167,  135,    2,  121,   89,   31,   87,  210,   51,    2,
          2,  442,  131,  251,  375,   27,   11,   24,   12,  184,    3,
          4,   69,   37,  303,  317,  375,   16,  155,   27,    2,   38,
          2,  157,  375},
        { 305,  434, 1039, 1463,  396,  464, 1541,   79,  441,  512, 1677,
          1336,  682,  642,  812,  229,  925, 1697, 1545,  877, 1494, 1365,
          1464, 1663,  806,  252, 1029,  166,  935, 1579,  406,  725, 1002,
          266,  957,  276, 1099,  694,  130,  516, 1415,  311, 1451, 1667,
          1563, 1153, 1157,  335,  328, 1620,  202, 1335,  382,  435,  458,
          747, 1425,  334, 1388, 1516,  126, 1703,  160,  552, 1128,  546,
          1307, 1445, 1342,  772, 1359,  178,  848,  646, 1065, 1167,  855,
          1642,  422,  718, 1082,  941,   48,  915,  676,  724, 1555, 1739,
          786,  256, 1470,  140,   20,   36,  974, 1059,   49,  304, 1746,
          1487,  386,  666,  416,  526, 1793, 1493,  536,  831,  565, 1317,
          1236, 1715, 1105,  564, 1745,  695,   10,  465,  185,  487,  571,
          1435,   55,  981, 1297, 1687, 1716, 1106,  286,  594,   72,   30,
          208, 1193,  179, 1206, 1212,  150,  357, 1366, 1177,  796, 1598,
          776, 1049,  656,  595,  854, 1413,  902,  101, 1323,   78,  292,
          588, 1258,  825,  980, 1768, 1187, 1229, 1722, 1235, 1507, 1282,
          455, 1446, 1444, 1740, 1696, 1698,  944,  635,  425, 1686, 1676,
          1452, 1736, 1188, 1792,  881, 1360,  785, 1318,  139,  936,   39,
          285,  514, 1424,  708,  316,  339,  259,  867,  345,  859, 1498,
          799, 1246,   13, 1478, 1518,  319,  279,  359, 1504,  175, 1370,
          706,  219, 1428,  193, 1160,  385, 1639,  318,   63,  789,  709,
          1074, 1438, 1644, 1090, 1346,  865,  961, 1460, 1170,  269,  431,
          1376,  301, 1324,   62, 1027, 1110, 1347, 1534,  347,  928, 1300,
          1474,  815, 1706,  469, 1032,    3, 1513, 1475, 1385,   59, 1624,
          924, 1477, 1087, 1759, 1379,  189,  589,  405,  705, 1240, 1392,
          993,   89, 1566, 1042, 1616,   60, 1196, 1390,  143,  159,  874,
          879, 1484, 1116, 1454, 1461,  562,  938, 1535, 1448, 1075,  587,
          1420, 1003, 1517,  549,  973,  330, 1568,  117,  885,  162,  201,
          165, 1614,  281, 1447,  625, 1430,  358,  692, 1770,  822,  395,
          1418,  213, 1052, 1378, 1332,  503, 1450,  749,   45,  849, 1255,
          1089, 1226,  904,  288,  478,  945,  148, 1327,  242,  257,  326,
          1050, 1237, 1634, 1097, 1386, 1334, 1621, 1076,  875, 1613,  777,
          1112, 1134, 1357, 1329, 1120, 1247,  869, 1213,  349, 1250, 1394,
          1380, 1377, 1107, 1590, 1640, 1227, 1199,  355, 1546,  797,  866,
          1585, 1648,  823, 1631,  346, 1714, 1760,   99,  657, 1126, 1040,
          647,  739, 1757, 1071,  861, 1626,  298,  667, 1325, 1678, 1766,
          1372, 1556,  702,    1, 1409,  787, 1688,  716, 1290,  293,  415,
          999,  169, 1194, 1774, 1144,  654,  809,  248,  976, 1026, 1769,
          449,  962, 1737,  365, 1550,  910, 1018,  135,  149,  167, 1295,
          187,  132,  181,  372, 1017,  463,  501, 1718, 1417, 1140, 1782,
          1490,  833, 1466,  310,  986, 1437, 1669,  826, 1031,  470, 1528,
          1159,  927,  331,  268, 1600, 1492, 1780, 1211,  258,  388,  631,
          959, 1111,  180,  499,  788, 1531,  408,  907, 1472,  437, 1469,
          84,  214, 1625,   22, 1362,  778, 1084, 1744, 1465,  340, 1214,
          1169, 1594,  307, 1371,  313,  830, 1721,  896,  448, 1520, 1101,
          1208,  942,  762,  199, 1306, 1276, 1310,  183, 1315,   91,  679,
          102, 1286,  168,  264,  763,  807,  943, 1423,  824, 1292, 1356,
          1647,    6,   58,   65,  195,  146,  360, 1005,  262, 1773, 1519,
          272,  741,  711, 1482, 1480,  939, 1421, 1133,  672,  969, 1261,
          323,  232,  322,  234,  882,  967,  351,  290, 1354, 1503, 1510,
          344, 1683,  984, 1222, 1223, 1007,  841, 1055, 1521, 1441,  652,
          196,  197,  931,  136,  490, 1431,  321, 1045, 1733,  871,  968,
          1449, 1610,  834,  921,  620,  468, 1191,  542, 1239,  282,  712,
          164, 1497, 1122,  522,  728, 1345, 1725,  611, 1163, 1224, 1093,
          1481,  911,  188,  858,   88, 1063,  532,  989, 1701,  662,  156,
          1263,  453, 1035, 1577,   34, 1252, 1183, 1094,   66,  451, 1245,
          582,  680, 1352,  713, 1215, 1473, 1693, 1749,  338, 1173,  996,
          212,  550,   82, 1673, 1092,  704, 1762,  802,  960, 1623, 1321,
          1755, 1369, 1601,  223,  474, 1636, 1608,  392,  412, 1353,  752,
          880,  314, 1382, 1303,  452,  810,  750, 1609,   26,  583,   67,
          1629, 1085, 1115, 1756,  362,  892, 1350,  315, 1615,  209,  846,
          122,  759, 1020,   40, 1453,   98,  114,  835,  376,  505,  668,
          729, 1086,  104,  287,  333,  551, 1054, 1016, 1363,  138,  821,
          1543, 1630,   15,  128,  176,  369,  541,  920, 1564, 1771,  845,
          1030, 1125, 1383,  306,   83,  207, 1734,   93,  864,  109,  614,
          726,  753, 1083, 1427,  593,  798,  979, 1109, 1069,  129,  255,
          908,  953, 1287,  515,  768,  923, 1217,  426,  955, 1168,   21,
          56,  210,  186,  476,   11, 1343,  428,  456, 1312, 1402, 1596,
          868, 1530,   32,  460,  971,  975,  977, 1262,  618,  389,  636,
          230,  615,  493,  644,  836, 1532, 1434, 1672,  163,  440,  940,
          1051, 1102, 1340, 1723,  918, 1034, 1205, 1249,  373,  407, 1058,
          1506,  937, 1333,  446,  978, 1220, 1436, 1704,  622, 1401,   71,
          475,  801,  471,   47,  424,  913, 1319, 1410,  509,  850, 1130,
          1260, 1561,  658,  674,  444,  544,  649,  790,   41,  124,  353,
          1161, 1387, 1244, 1502, 1584,  367,  817, 1254, 1483, 1539, 1515,
          320, 1661, 1791, 1439, 1127, 1536,  297, 1525, 1257, 1651,  840,
          580, 1549, 1559, 1456, 1691, 1148,  886,  380,  260, 1512, 1181,
          1788,  450, 1429, 1681,  270,   97, 1053, 1268,  377, 1267,  844,
          1638, 1764, 1171,  540, 1225,   64, 1278,  887, 1641, 1137,  613,
          1198,  733, 1011,  497, 1479,  410,   14,  454,  627,  909,  520,
          1023, 1355, 1526,  863,  111,  800,  356,  557,  280,  486, 1114,
          343,  483,  427, 1731, 1124, 1091,  616,  900,  570,  736,  818,
          1547, 1006, 1320,  934, 1028, 1567,  123,  142,  404,  445,  919,
          1131, 1777,   76,  370,  433, 1192, 1393, 1790,  641,  488,  617,
          842,  930,  237,  466,  529,  619,  686, 1645, 1783,  484,  531,
          25, 1151,  246,  897, 1266,  152,  581,  660, 1293,  332,  387,
          1014, 1298, 1599,  744,  816, 1713,  400,  990, 1316,  278,  383,
          417, 1396, 1679, 1758,  598,  893, 1158, 1284, 1488, 1709,  261,
          699, 1010,  397,  669,  714, 1061, 1351,  220, 1772, 1524,  309,
          399, 1189,   35,   90,  153,  254, 1433,  324,  352, 1548,  302,
          761, 1190, 1207, 1658, 1682,  277,  336, 1313, 1786,   92, 1322,
          42, 1219,  507, 1041,  233,  243,  245,  883, 1406, 1403, 1767,
          296, 1185,  366,  496, 1279, 1787,  190,  485, 1358,  443,  251,
          461,  479,  100, 1591,   23,  773,   16,  459, 1328,  170,  436,
          1132, 1411, 1607,  423,  775,  895, 1277,  371,  914, 1231, 1408,
          158, 1232,   68,  495,  650,   73,  697, 1700,  295,   85,  200,
          693, 1230, 1349, 1592,  227,  249,  640,  917, 1138, 1724,  481,
          839, 1281, 1505,  154, 1180, 1374, 1398,  398,  604, 1272, 1702,
          1738,  289, 1367,  684,  878, 1720, 1326,  585, 1794,  735,  781,
          742,  748,  901, 1025,  203,  411, 1178,  244,  548,  477,  946,
          1747,  363,  521,  553, 1248,  419, 1751, 1784,  105,  519,  743,
          760,  956, 1699, 1732, 1750,   70,  184, 1081, 1129, 1182, 1361,
          1606,   80,  648, 1414, 1455,  755, 1033, 1270, 1285, 1136,   95,
          1560,  950,  591, 1021,  603,  791,  873,  629, 1558, 1763,  659,
          1443, 1652,  805, 1117, 1146, 1486, 1489,    8,  814, 1176, 1499,
          141,  535,  573,  965, 1375, 1578,  811, 1752,  221,  274,  513,
          1619, 1649,   81,  273,  597,  624,  983,  764,   94,  610, 1761,
          820, 1501,  559,  299,  793, 1201, 1719, 1458, 1046,  112, 1674,
          174, 1209,  634, 1399, 1476, 1775, 1381,  222,  888, 1509,  698,
          182,  368,  653,  783, 1013, 1036, 1174, 1622,  533, 1422,  308,
          602, 1368, 1694,  837, 1304, 1164,  560,  337, 1019, 1339,   44,
          1711,  300,  342, 1269,  236,  577, 1785,  137,  932,  707, 1251,
          1527,  118,  803,  894,  870,  108,  350, 1442,  568,  727,  374,
          1238, 1330, 1586, 1496,  173,  543,  157, 1405, 1684,  857, 1314,
          1331,  995,  147, 1009,   17, 1243,  948,  884, 1459, 1056, 1653,
          52, 1533, 1073, 1395, 1218,  819, 1294,  240, 1779, 1348, 1139,
          862, 1373,  628, 1108, 1135,  963,  740, 1432,   61, 1523, 1121,
          43,  949, 1689,  683, 1012,  731, 1216,  354, 1670, 1795, 1175,
          663, 1309,  225,  172,  205,  933,  545, 1203, 1305, 1544,  722,
          1654,  745,  737, 1184, 1419, 1646, 1659,  106,  228,  401,    4,
          303, 1228, 1778,  782,  271,  508,  723,  856,  177,  534,  804,
          1221,  217,  378,  719,  997,  651,  384, 1537,  730, 1162, 1253,
          1273,  216,  537,   12,  144, 1302,  107, 1776,  584,  145, 1200,
          1650, 1705, 1072, 1179,    7,  391,  701, 1241, 1416,  567, 1147,
          263,  547, 1637, 1656,   29,  566,  661,  379,  671,  754, 1166,
          119, 1044,  121,  171, 1643,   18,  621, 1123,  954,  110,  206,
          1291, 1529,  239,  250,  691,  192,  390,  912, 1573,  473, 1542,
          402,  687,  746, 1280, 1605,   33,  688,  721, 1717,  847, 1570,
          1668, 1096,  889, 1143,  590,  113,  420,  539,  970, 1047, 1538,
          528,  681,  829,  696,  247,  574,  853,  500, 1015, 1632, 1726,
          1066, 1708,   28,   96,  929, 1603,  491, 1172, 1142, 1004,  418,
          852, 1753,  922, 1397,    5,  626,  795, 1602,  890, 1789,  563,
          710,  151, 1210, 1553,  608, 1098, 1692,  161, 1583, 1754,   24,
          325,  991, 1457,  462,  555, 1233, 1265,  734,  738,  133,  226,
          1391,  317,  224,  780, 1068, 1077, 1569, 1748,  134,  283,  439,
          903, 1508,  131,  294, 1743, 1582,  267, 1256,   86,  630,  518,
          607, 1156,  561,  843,  579,  364,  525, 1511, 1735,  872,  612,
          1491,  284,  510,  204,  767, 1633,  409,  717,  700,  964, 1412,
          482,  438,  899, 1588,  504,  576,  116,  125,   69,  703,  838,
          329,  556,  375,  394,   74,  194, 1155,  241,  898, 1234,  992,
          1655, 1118, 1404, 1680,  155, 1064, 1141,   19,  851, 1079, 1407,
          211,  489,  361, 1043,  472, 1440,  600, 1062, 1259,  457, 1664,
          511,  605, 1730,  414, 1617, 1710,  779, 1060, 1426, 1796,   38,
          1612, 1666,  253, 1467,  432, 1283, 1242, 1662,  235,  876,  231,
          575, 1741,  120,   53,  275, 1038, 1675,  312, 1296,  127,  530,
          1384, 1781,  784, 1145,  758,  916, 1104,  238,  291,  664, 1604,
          2,  524, 1095, 1103, 1587, 1289,  554, 1008,  832, 1048,  828,
          860, 1299, 1204, 1500, 1728,   37, 1468,  538, 1540,  632, 1344,
          87,  596,  480,  527,  637,  769,  951,  670,  982,  218,  348,
          198,  813, 1565,  678, 1037,   31,  720, 1695, 1665,  578,  770,
          1080,  765,  774,  492,  794,  606,  827, 1389, 1575,  430, 1557,
          327,  506,  952, 1301, 1067, 1337,  381,  429,  569,  808,  265,
          1186,  103, 1618,  958, 1554, 1197, 1165,  393, 1100, 1070,  601,
          905,  633, 1628, 1485,  586,  523,  643, 1275, 1729,  677,  517,
          1057,  403, 1341, 1765,  994,  906, 1288,  966, 1078,   27, 1271,
          191,  771,  987, 1119, 1150, 1690,  655, 1712, 1742, 1471,    9,
          1707, 1001,  341, 1581,   57,   46,  638,  645, 1088,  891,   50,
          442,  685,  498,  592,  690,  609,  572, 1635,  599, 1462,  421,
          766, 1522,  756, 1308, 1400, 1685, 1202,  639,  115, 1552, 1657,
          558,  665,  413, 1727, 1022, 1195, 1576,  494,  792, 1571,  988,
          715, 1611, 1627,  675, 1514, 1580,  732, 1311, 1574, 1593, 1364,
          1154,  985, 1589,   51,  757, 1338, 1152, 1264,  751, 1597,   54,
          502,  972, 1495, 1024,  467,  689,  215,  998, 1000,  926,  947,
          1671, 1660, 1149,  623,  447, 1562, 1551, 1274,  673,   75, 1113,
          77, 1595, 1572},

       {18.46618531, 18.16590212, 17.20465053, 17.20465053, 17.40689519,
        17.40689519, 17.40689519, 17.49285568, 17.54992877, 17.60681686,
        17.60681686, 17.69180601, 17.8605711 , 17.88854382, 17.88854382,
        17.94435844, 17.94435844, 18.02775638, 18.05547009, 18.08314132,
        18.08314132, 18.16590212, 18.16590212, 18.1934054 , 18.22086716,
        18.35755975, 18.38477631, 18.46618531, 18.49324201, 18.60107524,
        18.62793601, 18.68154169, 18.78829423, 18.89444363, 18.89444363,
        18.92088793, 18.92088793, 19.        , 19.07878403, 19.07878403,
        19.07878403, 19.10497317, 19.10497317, 19.10497317, 19.33907961,
        19.36491673, 19.41648784, 19.5192213 , 19.57038579, 19.57038579,
        19.59591794, 19.62141687, 19.74841766, 19.77371993, 19.87460691,
        19.87460691, 19.87460691, 20.0748599 , 20.1246118 , 20.1246118 ,
        20.174241  , 20.174241  , 20.22374842, 20.22374842, 20.24845673,
        20.27313493, 20.29778313, 20.29778313, 20.32240143, 20.4450483 ,
        20.46948949, 20.51828453, 20.54263858, 20.63976744, 20.63976744,
        20.68816087, 20.71231518, 20.76053949, 20.78460969, 20.80865205,
        20.88061302, 20.92844954, 20.95232684, 20.95232684, 20.97617696,
        20.97617696, 21.07130751, 21.16601049, 21.23676058, 21.26029163,
        21.26029163, 21.33072901, 21.54065923, 21.54065923, 21.54065923,
        21.54065923, 21.63330765, 21.70253441, 21.70253441, 21.77154106,
        21.81742423, 21.84032967, 22.        , 22.02271555, 22.06807649,
        22.11334439, 22.15851981, 22.15851981, 22.20360331, 22.20360331,
        22.27105745, 22.27105745, 22.3159136 , 22.3383079 , 22.3383079 ,
        22.44994432, 22.60530911, 22.69361144, 22.71563338, 22.737634  ,
        22.737634  , 22.75961335, 22.89104628, 23.02172887, 23.10844002,
        23.10844002, 23.10844002, 23.17326045, 23.23790008, 23.2594067 ,
        23.28089345, 23.34523506, 23.40939982, 23.40939982, 23.53720459,
        23.62202362, 23.64318084, 23.70653918, 23.70653918, 23.8117618 ,
        24.        , 24.06241883, 24.16609195, 24.35159132, 24.35159132,
        24.41311123, 24.49489743, 24.49489743, 24.71841419, 24.73863375,
        24.81934729, 25.03996805, 25.07987241, 25.07987241, 25.25866188,
        25.3179778 , 25.51470164, 25.53429067, 25.57342371, 25.61249695,
        25.69046516, 25.70992026, 25.8069758 , 26.05762844, 22.53885534,
        22.38302929, 22.24859546, 22.24859546, 22.24859546, 22.3383079 ,
        22.58317958, 22.737634  , 22.82542442, 22.93468988, 22.97825059,
        23.13006701, 23.17326045, 23.28089345, 23.32380758, 23.4520788 ,
        23.47338919, 23.49468025, 23.64318084, 23.85372088, 23.89560629,
        24.06241883, 24.08318916, 24.08318916, 24.12467616, 24.18677324,
        24.18677324, 22.42766149, 22.13594362, 21.88606863, 21.86321111,
        21.28379665, 21.9317122 , 21.9544984 , 22.09072203, 22.09072203,
        22.24859546, 22.24859546, 22.4053565 , 22.44994432, 22.47220505,
        22.58317958, 22.58317958, 22.82542442, 22.89104628, 23.02172887,
        23.06512519, 23.06512519, 23.15167381, 23.21637353, 23.32380758,
        23.49468025, 23.51595203, 23.55843798, 23.55843798, 23.57965225,
        23.76972865, 23.76972865, 23.76972865, 23.79075451, 23.8117618 ,
        23.83275058, 23.85372088, 23.85372088, 23.91652149, 23.93741841,
        23.97915762, 24.        , 24.18677324, 24.24871131, 24.2899156 ,
        24.2899156 , 24.35159132, 24.35159132, 24.35159132, 24.37211521,
        24.37211521, 24.39262184, 24.41311123, 24.45403852, 24.45403852,
        24.4744765 , 24.4744765 , 24.55605832, 24.55605832, 24.57641145,
        24.59674775, 24.61706725, 24.61706725, 24.63736999, 24.67792536,
        24.69817807, 24.75883681, 24.79919354, 24.81934729, 24.8394847 ,
        24.85960579, 24.8997992 , 24.8997992 , 24.8997992 , 24.91987159,
        24.97999199, 24.97999199, 25.03996805, 25.07987241, 25.0998008 ,
        25.11971337, 25.11971337, 25.13961018, 25.15949125, 25.17935662,
        25.17935662, 25.17935662, 25.19920634, 25.19920634, 25.19920634,
        23.93741841, 23.85372088, 23.57965225, 23.66431913, 23.72762104,
        23.87467277, 23.87467277, 24.        , 24.10394159, 24.16609195,
        24.41311123, 24.49489743, 24.65765601, 24.65765601, 23.19482701,
        24.4744765 , 24.4744765 , 24.59674775, 24.59674775, 24.67792536,
        24.75883681, 24.81934729, 25.01999201, 25.03996805, 25.17935662,
        25.19920634, 25.21904043, 25.23885893, 25.23885893, 25.29822128,
        25.3179778 , 25.33771892, 25.35744467, 25.3968502 , 25.43619468,
        25.45584412, 25.49509757, 25.49509757, 25.49509757, 25.51470164,
        25.51470164, 25.55386468, 25.61249695, 25.65151068, 25.65151068,
        25.65151068, 25.15949125, 24.06241883, 23.89560629, 21.72556098,
        17.88854382, 17.        , 16.76305461, 17.29161647, 17.34935157,
        17.8325545 , 17.88854382, 18.02775638, 18.13835715, 18.43908891,
        18.49324201, 18.49324201, 18.49324201, 19.05255888, 19.23538406,
        19.31320792, 19.31320792, 19.62141687, 19.62141687, 19.6977156 ,
        19.6977156 , 19.74841766, 19.94993734, 19.97498436, 20.174241  ,
        20.24845673, 20.61552813, 20.63976744, 20.90454496, 21.        ,
        21.02379604, 21.09502311, 21.11871208, 21.14237451, 21.33072901,
        21.72556098, 21.79449472, 22.02271555, 22.15851981, 22.69361144,
        23.02172887, 23.13006701, 23.13006701, 23.17326045, 23.19482701,
        23.43074903, 23.47338919, 23.72762104, 23.83275058, 24.08318916,
        24.4744765 , 24.65765601, 24.67792536, 24.67792536, 24.67792536,
        24.69817807, 24.85960579, 24.87971061, 25.        , 25.05992817,
        25.13961018, 25.25866188, 25.43619468, 25.65151068, 25.67099531,
        25.67099531, 25.67099531, 25.69046516, 25.70992026, 25.72936066,
        25.74878638, 25.76819745, 25.76819745, 25.78759392, 25.78759392,
        25.78759392, 25.8069758 , 25.82634314, 25.82634314, 25.82634314,
        25.84569597, 25.84569597, 25.88435821, 25.88435821, 25.90366769,
        25.90366769, 25.90366769, 25.92296279, 25.94224354, 25.94224354,
        23.66431913, 22.627417  , 22.627417  , 22.58317958, 22.22611077,
        21.56385865, 21.74856317, 21.84032967, 22.29349681, 22.36067977,
        22.627417  , 22.64950331, 22.95648057, 23.06512519, 23.08679276,
        23.08679276, 23.51595203, 23.51595203, 23.57965225, 23.62202362,
        23.64318084, 23.89560629, 24.08318916, 24.18677324, 24.20743687,
        24.22808288, 24.22808288, 24.31049156, 24.33105012, 24.37211521,
        24.39262184, 24.41311123, 24.51530134, 24.63736999, 24.69817807,
        24.75883681, 24.81934729, 24.85960579, 24.8997992 , 24.8997992 ,
        24.91987159, 24.91987159, 24.95996795, 24.95996795, 24.95996795,
        25.01999201, 25.01999201, 25.07987241, 25.13961018, 25.13961018,
        25.15949125, 25.17935662, 25.3179778 , 25.35744467, 25.41653005,
        25.45584412, 25.65151068, 25.78759392, 25.90366769, 25.92296279,
        25.94224354, 25.96150997, 25.96150997, 25.98076211, 25.98076211,
        26.        , 26.01922366, 26.03843313, 26.03843313, 26.05762844,
        26.05762844, 26.0959767 , 26.0959767 , 26.11512971, 26.11512971,
        26.13426869, 26.13426869, 26.15339366, 26.15339366, 26.15339366,
        26.15339366, 26.15339366, 26.15339366, 26.17250466, 26.17250466,
        26.17250466, 26.17250466, 26.17250466, 23.28089345, 22.09072203,
        19.87460691, 19.49358869, 19.87460691, 17.43559577, 18.11077028,
        18.49324201, 18.89444363, 18.97366596, 19.15724406, 19.18332609,
        19.18332609, 19.39071943, 19.54482029, 19.57038579, 19.59591794,
        19.6468827 , 19.72308292, 19.94993734, 20.        , 20.02498439,
        20.0748599 , 20.1246118 , 20.1246118 , 20.1246118 , 20.14944168,
        20.174241  , 20.19900988, 20.22374842, 20.22374842, 20.27313493,
        20.29778313, 20.32240143, 20.32240143, 20.54263858, 20.59126028,
        20.63976744, 20.63976744, 20.63976744, 20.71231518, 20.95232684,
        20.97617696, 21.07130751, 21.11871208, 21.16601049, 21.16601049,
        21.1896201 , 21.23676058, 21.23676058, 21.33072901, 21.47091055,
        21.56385865, 21.56385865, 21.56385865, 21.58703314, 21.63330765,
        21.65640783, 21.67948339, 21.70253441, 21.77154106, 21.81742423,
        21.84032967, 21.88606863, 21.9317122 , 21.97726098, 22.        ,
        22.06807649, 22.09072203, 22.09072203, 22.24859546, 22.27105745,
        22.27105745, 22.27105745, 22.3159136 , 22.3159136 , 22.38302929,
        22.4053565 , 22.49444376, 22.5166605 , 22.53885534, 22.60530911,
        22.627417  , 22.6715681 , 22.71563338, 22.737634  , 22.737634  ,
        22.91287847, 22.93468988, 22.95648057, 22.97825059, 23.02172887,
        23.10844002, 23.13006701, 23.19482701, 23.21637353, 23.23790008,
        23.2594067 , 23.38803113, 23.40939982, 23.47338919, 23.51595203,
        23.68543856, 23.68543856, 23.74868417, 23.76972865, 23.85372088,
        23.97915762, 24.0208243 , 24.0208243 , 24.04163056, 24.08318916,
        24.12467616, 24.16609195, 24.20743687, 24.24871131, 24.24871131,
        24.24871131, 24.2899156 , 24.37211521, 24.39262184, 24.4744765 ,
        24.53568829, 24.53568829, 24.53568829, 24.55605832, 24.69817807,
        25.        , 25.03996805, 25.0998008 , 25.11971337, 25.13961018,
        25.17935662, 25.19920634, 25.3968502 , 25.53429067, 25.55386468,
        25.57342371, 25.65151068, 25.70992026, 25.74878638, 25.8069758 ,
        25.86503431, 25.90366769, 26.17250466, 26.19160171, 26.21068484,
        26.21068484, 26.2297541 , 26.2297541 , 26.26785107, 26.26785107,
        26.28687886, 26.28687886, 26.30589288, 26.32489316, 26.32489316,
        26.34387974, 26.34387974, 26.34387974, 26.36285265, 26.36285265,
        26.36285265, 26.38181192, 26.38181192, 26.40075756, 26.40075756,
        26.40075756, 26.40075756, 26.40075756, 26.41968963, 26.41968963,
        26.43860813, 26.43860813, 26.43860813, 26.43860813, 26.45751311,
        26.45751311, 26.45751311, 26.45751311, 26.45751311, 26.45751311,
        26.45751311, 26.47640459, 26.4952826 , 26.4952826 , 26.4952826 ,
        26.4952826 , 26.53299832, 26.55183609, 26.55183609, 26.55183609,
        26.57066051, 26.57066051, 26.5894716 , 26.5894716 , 26.5894716 ,
        26.5894716 , 26.5894716 , 26.5894716 , 26.60826939, 26.60826939,
        26.60826939, 26.60826939, 26.62705391, 26.66458325, 26.66458325,
        26.66458325, 26.66458325, 26.66458325, 26.70205985, 26.73948391,
        26.73948391, 26.73948391, 26.75817632, 26.75817632, 26.75817632,
        25.21904043, 25.15949125, 25.53429067, 25.78759392, 25.88435821,
        26.38181192, 26.40075756, 26.51414717, 26.64582519, 26.75817632,
        26.77685568, 26.77685568, 26.79552201, 26.79552201, 26.81417536,
        26.83281573, 26.83281573, 26.83281573, 26.83281573, 26.83281573,
        26.85144316, 26.87005769, 26.88865932, 26.92582404, 26.92582404,
        26.94438717, 26.94438717, 26.94438717, 26.96293753, 26.98147513,
        26.98147513, 27.        , 27.        , 27.        , 27.        ,
        27.        , 27.        , 27.        , 27.01851217, 27.01851217,
        27.03701167, 27.03701167, 27.05549852, 27.05549852, 27.05549852,
        27.05549852, 27.07397274, 27.07397274, 27.09243437, 27.09243437,
        27.09243437, 27.09243437, 27.09243437, 27.11088342, 27.11088342,
        27.12931993, 27.12931993, 27.12931993, 27.14774392, 27.16615541,
        27.16615541, 27.16615541, 27.16615541, 27.16615541, 27.18455444,
        27.18455444, 27.18455444, 27.18455444, 27.18455444, 27.20294102,
        27.20294102, 27.22131518, 27.22131518, 27.22131518, 27.22131518,
        24.67792536, 23.34523506, 22.29349681, 22.22611077, 21.54065923,
        21.54065923, 22.24859546, 22.27105745, 22.42766149, 22.49444376,
        22.5166605 , 22.56102835, 22.75961335, 22.82542442, 22.86919325,
        22.86919325, 23.04343724, 23.10844002, 23.13006701, 23.19482701,
        23.34523506, 23.43074903, 23.47338919, 23.47338919, 23.49468025,
        23.62202362, 23.62202362, 23.68543856, 23.70653918, 23.70653918,
        23.76972865, 23.79075451, 23.8117618 , 23.85372088, 23.9582971 ,
        24.16609195, 24.16609195, 24.33105012, 24.35159132, 24.35159132,
        24.37211521, 24.51530134, 24.51530134, 24.51530134, 24.53568829,
        24.67792536, 24.85960579, 24.8997992 , 24.95996795, 25.        ,
        25.05992817, 25.11971337, 25.15949125, 25.23885893, 25.25866188,
        25.27844932, 25.29822128, 25.57342371, 25.57342371, 25.59296778,
        25.61249695, 25.67099531, 25.70992026, 25.78759392, 25.82634314,
        25.88435821, 25.90366769, 25.92296279, 26.13426869, 26.15339366,
        26.19160171, 26.19160171, 26.21068484, 26.30589288, 26.32489316,
        26.34387974, 26.34387974, 26.45751311, 26.4952826 , 26.55183609,
        26.66458325, 26.70205985, 26.81417536, 26.83281573, 26.94438717,
        27.07397274, 27.11088342, 27.20294102, 27.23967694, 27.25802634,
        27.25802634, 27.25802634, 27.27636339, 27.27636339, 27.29468813,
        27.31300057, 27.31300057, 27.33130074, 27.33130074, 27.33130074,
        27.33130074, 27.33130074, 27.33130074, 27.33130074, 27.34958866,
        27.34958866, 27.34958866, 27.34958866, 27.34958866, 27.38612788,
        27.40437921, 27.4226184 , 27.4226184 , 27.4226184 , 27.4226184 ,
        27.44084547, 27.44084547, 27.44084547, 27.44084547, 27.44084547,
        27.44084547, 27.44084547, 27.45906044, 27.45906044, 27.47726333,
        27.47726333, 27.49545417, 27.49545417, 27.49545417, 27.51363298,
        27.51363298, 27.51363298, 27.51363298, 27.5317998 , 27.5317998 ,
        27.54995463, 27.54995463, 27.54995463, 27.5680975 , 27.5680975 ,
        27.5680975 , 27.58622845, 27.58622845, 27.58622845, 27.60434748,
        27.60434748, 27.60434748, 27.60434748, 27.62245463, 27.62245463,
        27.64054992, 27.64054992, 27.64054992, 27.64054992, 27.64054992,
        27.64054992, 27.65863337, 27.65863337, 27.65863337, 27.67670501,
        27.67670501, 27.67670501, 27.67670501, 27.67670501, 27.69476485,
        27.69476485, 27.71281292, 27.73084925, 27.73084925, 27.73084925,
        27.74887385, 27.74887385, 27.74887385, 27.74887385, 27.76688675,
        27.78488798, 27.78488798, 27.78488798, 27.80287755, 27.82085549,
        27.82085549, 27.82085549, 27.83882181, 27.83882181, 27.85677655,
        27.85677655, 27.85677655, 27.85677655, 27.87471973, 27.87471973,
        27.89265136, 27.89265136, 27.91057147, 27.91057147, 27.92848009,
        27.92848009, 27.92848009, 27.92848009, 27.92848009, 27.94637722,
        27.94637722, 27.96426291, 27.96426291, 27.98213716, 27.98213716,
        27.98213716, 28.        , 28.01785145, 28.01785145, 28.01785145,
        28.03569154, 28.05352028, 28.05352028, 28.05352028, 28.0713377 ,
        28.0713377 , 28.08914381, 28.08914381, 28.10693865, 28.10693865,
        28.10693865, 28.14249456, 28.14249456, 28.17800561, 28.19574436,
        28.19574436, 28.21347196, 28.21347196, 28.21347196, 28.21347196,
        28.24889378, 28.24889378, 28.26658805, 28.26658805, 28.28427125,
        28.28427125, 28.3019434 , 28.3019434 , 28.3019434 , 28.31960452,
        28.31960452, 28.31960452, 28.33725463, 28.35489376, 28.35489376,
        28.35489376, 28.35489376, 28.35489376, 28.35489376, 28.37252192,
        28.37252192, 28.37252192, 28.37252192, 28.37252192, 28.37252192,
        28.39013913, 28.39013913, 28.39013913, 28.39013913, 28.40774542,
        28.40774542, 28.40774542, 28.40774542, 28.42534081, 28.42534081,
        28.42534081, 28.42534081, 28.42534081, 28.44292531, 28.44292531,
        28.46049894, 28.46049894, 28.46049894, 28.47806173, 28.4956137 ,
        28.4956137 , 28.51315486, 28.51315486, 28.53068524, 28.53068524,
        28.53068524, 28.53068524, 28.54820485, 28.54820485, 28.54820485,
        28.56571371, 28.56571371, 28.58321186, 28.58321186, 28.58321186,
        28.60069929, 28.61817604, 28.61817604, 28.61817604, 28.63564213,
        28.63564213, 28.63564213, 28.65309756, 28.65309756, 28.67054237,
        28.67054237, 28.67054237, 28.67054237, 28.67054237, 28.67054237,
        28.68797658, 28.68797658, 28.68797658, 28.68797658, 28.68797658,
        28.70540019, 28.70540019, 28.72281323, 28.74021573, 28.74021573,
        28.74021573, 28.75760769, 28.75760769, 28.75760769, 28.77498914,
        28.7923601 , 28.82707061, 28.82707061, 28.8444102 , 28.86173938,
        28.86173938, 28.87905816, 28.89636655, 28.89636655, 28.91366459,
        28.91366459, 28.91366459, 28.94822965, 28.94822965, 28.94822965,
        28.96549672, 28.96549672, 28.96549672, 28.96549672, 28.96549672,
        29.        , 29.        , 29.        , 29.        , 29.01723626,
        29.01723626, 29.01723626, 29.01723626, 29.01723626, 29.01723626,
        29.03446228, 29.03446228, 29.05167809, 29.05167809, 29.05167809,
        29.05167809, 29.05167809, 26.43860813, 23.17326045, 22.3159136 ,
        21.16601049, 21.3541565 , 21.54065923, 22.        , 22.13594362,
        22.47220505, 22.5166605 , 22.53885534, 22.627417  , 22.69361144,
        22.97825059, 23.13006701, 23.15167381, 23.17326045, 23.2594067 ,
        23.28089345, 23.36664289, 23.40939982, 23.51595203, 23.66431913,
        23.72762104, 23.76972865, 23.93741841, 23.97915762, 24.06241883,
        24.06241883, 24.06241883, 24.08318916, 24.14539294, 24.14539294,
        24.20743687, 24.37211521, 24.37211521, 24.59674775, 24.61706725,
        24.65765601, 24.67792536, 24.69817807, 24.8997992 , 24.8997992 ,
        24.91987159, 24.93992783, 25.        , 25.        , 25.03996805,
        25.07987241, 25.0998008 , 25.11971337, 25.11971337, 25.17935662,
        25.25866188, 25.29822128, 25.3179778 , 25.3968502 , 25.41653005,
        25.43619468, 25.43619468, 25.51470164, 25.55386468, 25.57342371,
        25.78759392, 25.8069758 , 25.82634314, 25.94224354, 26.01922366,
        26.03843313, 26.2488095 , 26.26785107, 26.32489316, 26.38181192,
        26.43860813, 26.47640459, 26.4952826 , 26.51414717, 26.55183609,
        26.5894716 , 26.70205985, 26.72077843, 26.75817632, 26.79552201,
        26.79552201, 26.81417536, 26.83281573, 26.87005769, 26.96293753,
        27.03701167, 27.05549852, 27.12931993, 27.12931993, 27.14774392,
        27.16615541, 27.27636339, 27.31300057, 27.31300057, 27.36786437,
        27.36786437, 27.38612788, 27.38612788, 27.49545417, 27.5317998 ,
        27.64054992, 27.82085549, 27.96426291, 28.0713377 , 28.19574436,
        28.28427125, 28.28427125, 28.3019434 , 28.3019434 , 28.39013913,
        28.40774542, 28.44292531, 28.44292531, 28.47806173, 28.53068524,
        28.54820485, 28.77498914, 28.80972058, 29.05167809, 29.06888371,
        29.06888371, 29.08607914, 29.10326442, 29.12043956, 29.13760457,
        29.13760457, 29.15475947, 29.17190429, 29.17190429, 29.18903904,
        29.20616373, 29.20616373, 29.20616373, 29.22327839, 29.22327839,
        29.22327839, 29.22327839, 29.24038303, 29.24038303, 29.25747768,
        29.27456234, 29.27456234, 29.27456234, 29.27456234, 29.27456234,
        29.29163703, 29.29163703, 29.29163703, 29.30870178, 29.30870178,
        29.30870178, 29.30870178, 29.3257566 , 29.3428015 , 29.3428015 ,
        29.35983651, 29.35983651, 29.37686164, 29.37686164, 29.37686164,
        29.39387691, 29.41088234, 29.41088234, 29.41088234, 29.41088234,
        29.44486373, 29.46183973, 29.46183973, 29.47880595, 29.47880595,
        29.47880595, 29.47880595, 29.49576241, 29.49576241, 29.51270913,
        29.51270913, 29.52964612, 29.54657341, 29.54657341, 29.59729717,
        29.61418579, 29.64793416, 29.64793416, 29.64793416, 29.66479395,
        29.66479395, 29.68164416, 29.68164416, 29.68164416, 29.68164416,
        29.68164416, 29.69848481, 29.69848481, 29.71531592, 29.71531592,
        29.71531592, 29.73213749, 29.74894956, 29.74894956, 29.74894956,
        29.76575213, 29.76575213, 29.76575213, 29.76575213, 29.78254522,
        29.78254522, 29.79932885, 29.79932885, 29.81610303, 29.84962311,
        29.84962311, 29.84962311, 29.86636905, 29.88310559, 29.9165506 ,
        29.9165506 , 29.9165506 , 29.93325909, 29.93325909, 29.93325909,
        29.94995826, 29.94995826, 29.94995826, 29.94995826, 29.9833287 ,
        29.9833287 , 30.        , 30.        , 30.        , 30.        ,
        30.        , 30.01666204, 30.01666204, 30.01666204, 30.01666204,
        30.03331484, 30.03331484, 30.03331484, 30.0499584 , 30.06659276,
        30.06659276, 30.08321791, 30.11644069, 30.11644069, 30.11644069,
        30.11644069, 30.11644069, 30.11644069, 30.13303835, 30.13303835,
        30.13303835, 30.14962686, 30.16620626, 30.16620626, 30.16620626,
        30.19933774, 30.19933774, 30.19933774, 30.19933774, 30.21588986,
        30.23243292, 30.24896692, 30.2654919 , 30.2654919 , 30.2654919 ,
        30.28200786, 30.28200786, 30.29851482, 30.31501278, 30.33150178,
        30.33150178, 30.33150178, 30.34798181, 30.38091506, 30.41381265,
        30.41381265, 30.43024811, 30.43024811, 30.4466747 , 30.4466747 ,
        30.46309242, 30.47950131, 30.49590136, 30.5122926 , 30.5450487 ,
        30.56141358, 30.56141358, 30.5777697 , 30.59411708, 30.59411708,
        30.59411708, 30.61045573, 30.62678566, 30.62678566, 30.62678566,
        30.64310689, 30.64310689, 30.64310689, 30.64310689, 30.65941943,
        30.65941943, 30.6757233 , 30.6757233 , 30.69201851, 30.70830507,
        30.7408523 , 30.7408523 , 30.7408523 , 30.7408523 , 30.7408523 ,
        30.7408523 , 30.757113  , 30.757113  , 30.78960864, 30.78960864,
        30.78960864, 30.8058436 , 30.8058436 , 30.8058436 , 30.83828789,
        30.85449724, 30.85449724, 30.87069808, 30.87069808, 30.88689042,
        30.88689042, 30.88689042, 30.90307428, 30.91924967, 30.9354166 ,
        30.95157508, 30.96772513, 30.96772513, 30.98386677, 31.01612484,
        31.06444913, 31.06444913, 31.09662361, 31.09662361, 31.11269837,
        31.144823  , 31.144823  , 31.17691454, 31.17691454, 31.19294792,
        31.19294792, 31.19294792, 31.20897307, 31.22498999, 31.22498999,
        31.22498999, 31.2409987 , 31.2409987 , 31.25699922, 31.28897569,
        31.30495168, 31.30495168, 31.33687923, 31.36877428, 31.38470965,
        31.40063694, 31.40063694, 31.43246729, 31.43246729, 31.43246729,
        31.44837039, 31.44837039, 31.44837039, 31.46426545, 31.46426545,
        31.48015248, 31.48015248, 31.48015248, 31.4960315 , 31.52776554,
        31.52776554, 31.54362059, 31.54362059, 31.54362059, 31.54362059,
        31.55946768, 31.55946768, 31.57530681, 31.57530681, 31.60696126,
        31.6227766 , 31.63858404, 31.63858404, 31.63858404, 31.65438358,
        31.65438358, 31.67017524, 31.70173497, 31.70173497, 31.71750305,
        31.71750305, 31.78049716, 31.79622619, 31.82766093, 31.85906464,
        31.85906464, 31.8747549 , 31.8747549 , 31.8747549 , 31.89043744,
        31.89043744, 31.9217794 , 31.93743885, 31.95309062, 31.95309062,
        31.98437118, 32.        , 32.01562119, 32.01562119, 32.01562119,
        32.03123476, 32.06243908, 32.06243908, 32.06243908, 32.06243908,
        32.07802986, 32.10918872, 32.12475681, 32.14031736, 32.14031736,
        32.15587038, 32.17141588, 32.17141588, 32.24903099, 32.24903099,
        32.24903099, 32.26453161, 32.26453161, 32.29551052, 32.29551052,
        32.31098884, 32.40370349, 32.43454948, 32.43454948, 32.43454948,
        32.48076354, 32.51153641, 32.51153641, 32.52691193, 32.52691193,
        32.55764119, 32.55764119, 32.60368077, 32.61901286, 32.61901286,
        32.61901286, 32.64965543, 32.64965543, 32.68026928, 32.69556545,
        32.71085447, 32.71085447, 32.74141109, 32.74141109, 32.75667871,
        32.80243893, 32.80243893, 32.80243893, 32.80243893, 32.83291032,
        32.86335345, 32.87856445, 32.90896534, 32.92415527, 32.92415527,
        32.92415527, 32.93933818, 32.93933818, 32.95451411, 32.95451411,
        32.95451411, 32.96968304, 32.984845  , 32.984845  , 32.984845  ,
        33.03028913, 33.03028913, 33.04542328, 33.04542328, 33.09078422,
        33.10589071, 33.10589071, 33.10589071, 33.12099032, 33.12099032,
        33.15116891, 33.19638535, 33.21144381, 33.21144381, 33.2565783 ,
        33.28663395, 33.33166662, 33.33166662, 33.33166662, 33.33166662,
        33.346664  , 33.346664  , 33.39161571, 33.46640106, 33.48133809,
        33.48133809, 33.51119216, 33.52610923, 33.54101966, 33.55592347,
        33.57082066, 33.61547263, 33.67491648, 33.68976106, 33.68976106,
        33.7194306 , 33.73425559, 33.74907406, 33.74907406, 33.76388603,
        33.80828301, 33.83784863, 33.85262176, 33.88214869, 33.89690251,
        33.91164992, 33.91164992, 33.92639091, 33.9411255 , 33.98529094,
        34.        , 34.        , 34.05877273, 34.07345007, 34.0881211 ,
        34.10278581, 34.13209633, 34.13209633, 34.13209633, 34.16138171,
        34.17601498, 34.17601498, 34.17601498, 34.20526275, 34.2636834 ,
        34.33656943, 34.42382896, 34.45286635, 34.45286635, 34.49637662,
        34.525353  , 34.53983208, 34.55430509, 34.55430509, 34.59768778,
        34.64101615, 34.64101615, 34.64101615, 34.81379037, 34.82814953,
        34.82814953, 34.85685012, 34.88552709, 34.88552709, 34.89985673,
        34.92849839, 35.02855978, 35.02855978, 35.05709629, 35.07135583,
        35.07135583, 35.11409973, 35.12833614, 35.17101079, 35.19943181,
        35.21363372, 35.27038418, 35.29872519, 35.32704347, 35.38361203,
        35.41186242, 35.48239   , 35.4964787 , 35.51056181, 35.51056181,
        35.52463934, 35.63705936, 35.70714214, 35.76310948, 35.83294573,
        35.91656999, 35.98610843, 36.01388621, 36.01388621, 36.01388621,
        36.06937759, 36.0970913 , 36.20773398, 36.24913792, 36.29049462,
        36.30426972, 36.31803959, 36.34556369, 36.35931793, 36.37306696,
        36.44173432, 36.48287269, 36.57868232, 36.82390528, 36.86461718,
        36.87817783, 36.87817783, 36.87817783, 36.89173349, 36.90528417,
        36.97296309, 36.97296309, 37.01351105, 37.08099244, 37.13488926,
        37.17526059, 37.28270376, 37.30951621, 37.36308338, 37.41657387,
        37.76241518, 38.05259518, 38.13135193, 38.31448812, 38.45776905,
        38.78143886, 39.79949748, 39.87480407, 40.47221269, 40.52159918,
        42.11887938}, {1}
      }
};

INSTANTIATE_TEST_CASE_P(ClusterCondensingTest, ClusterCondensingTestF_Int,
                        ::testing::ValuesIn(cluster_condensing_inputs));

template <typename T, typename IdxT>
struct ExcessOfMassInputs {
  IdxT n_row;
  int min_cluster_size;

  std::vector<IdxT> condensed_parents;
  std::vector<IdxT> condensed_children;
  std::vector<T> condensed_lambdas;
  std::vector<IdxT> condensed_sizes;

  std::vector<T> stabilities;
  std::vector<T> probabilities;
};

template <typename T, typename IdxT>
class ExcessOfMassTest
  : public ::testing::TestWithParam<ExcessOfMassInputs<T, IdxT>> {
 protected:
  void basicTest() {
    raft::handle_t handle;

    params = ::testing::TestWithParam<ExcessOfMassInputs<T, IdxT>>::GetParam();

    Logger::get().setLevel(CUML_LEVEL_DEBUG);

    rmm::device_uvector<IdxT> condensed_parents(params.condensed_parents.size(),
                                                handle.get_stream());
    rmm::device_uvector<IdxT> condensed_children(
      params.condensed_children.size(), handle.get_stream());
    rmm::device_uvector<T> condensed_lambdas(params.condensed_lambdas.size(),
                                             handle.get_stream());
    rmm::device_uvector<IdxT> condensed_sizes(params.condensed_sizes.size(),
                                              handle.get_stream());
    rmm::device_uvector<T> stabilities(params.stabilities.size(),
                                       handle.get_stream());

    raft::copy(condensed_parents.data(), params.condensed_parents.data(),
               condensed_parents.size(), handle.get_stream());

    raft::copy(condensed_children.data(), params.condensed_children.data(),
               condensed_children.size(), handle.get_stream());

    raft::copy(condensed_lambdas.data(), params.condensed_lambdas.data(),
               condensed_lambdas.size(), handle.get_stream());

    raft::copy(condensed_sizes.data(), params.condensed_sizes.data(),
               condensed_sizes.size(), handle.get_stream());

    CUML_LOG_DEBUG("Condensing tree");
    ML::HDBSCAN::Common::CondensedHierarchy<IdxT, T> condensed_tree(
      handle, params.n_row, params.condensed_parents.size(),
      condensed_parents.data(), condensed_children.data(),
      condensed_lambdas.data(), condensed_sizes.data());

    CUML_LOG_DEBUG("Calling compute stabilities");
    ML::HDBSCAN::detail::Stability::compute_stabilities(handle, condensed_tree,
                                                        stabilities.data());

    ASSERT_TRUE(raft::devArrMatch(stabilities.data(), params.stabilities.data(),
                                  condensed_tree.get_n_clusters(),
                                  raft::CompareApprox<float>(1e-4),
                                  handle.get_stream()));

    CUML_LOG_DEBUG("Creating is_cluster %d", condensed_tree.get_n_clusters());
    rmm::device_uvector<int> is_cluster(condensed_tree.get_n_clusters(),
                                        handle.get_stream());

    CUML_LOG_DEBUG("Calling excess of mass");
    auto cluster_tree =
      ML::HDBSCAN::detail::Utils::make_cluster_tree(handle, condensed_tree);
    // ML::HDBSCAN::detail::Select::excess_of_mass(
    //   handle, cluster_tree, stabilities.data(), is_cluster.data(),
    //   condensed_tree.get_n_clusters(), params.n_row);
    // CUDA_CHECK(cudaStreamSynchronize(handle.get_stream()));
    ML::HDBSCAN::detail::Select::leaf(handle, cluster_tree, is_cluster.data(),
                                      condensed_tree.get_n_clusters());
    CUDA_CHECK(cudaStreamSynchronize(handle.get_stream()));
    // CUML_LOG_DEBUG("Calling cluster epsilon search");
    // ML::HDBSCAN::detail::Extract::cluster_epsilon_search(handle, cluster_tree, is_cluster.data(), condensed_tree.get_n_clusters(),
    // 2.0f, true);

    std::vector<int> is_cluster_h(is_cluster.size());
    raft::update_host(is_cluster_h.data(), is_cluster.data(),
                      is_cluster_h.size(), handle.get_stream());

    CUDA_CHECK(cudaStreamSynchronize(handle.get_stream()));

    std::set<IdxT> clusters;
    for (int i = 0; i < is_cluster_h.size(); i++)
      if (is_cluster_h[i] != 0) clusters.insert(i + params.n_row);

    rmm::device_uvector<IdxT> labels(params.n_row, handle.get_stream());

    ML::HDBSCAN::detail::Extract::do_labelling_on_host(
      handle, condensed_tree, clusters, params.n_row, true, labels.data());

    raft::print_device_vector("labels", labels.data(), params.n_row, std::cout);

    CUML_LOG_DEBUG("Printing output");
    raft::print_device_vector("is_cluster", is_cluster.data(),
                              is_cluster.size(), std::cout);

    CUML_LOG_DEBUG("Calculating Probabilities");
    rmm::device_uvector<T> probabilities(params.n_row, handle.get_stream());
    ML::HDBSCAN::detail::Membership::get_probabilities(
      handle, condensed_tree, labels.data(), probabilities.data());

    ASSERT_TRUE(
      raft::devArrMatch(probabilities.data(), params.probabilities.data(),
                        condensed_tree.get_n_clusters(),
                        raft::CompareApprox<float>(1e-4), handle.get_stream()));
  }

  void SetUp() override { basicTest(); }

  void TearDown() override {}

 protected:
  ExcessOfMassInputs<T, IdxT> params;
};

typedef ExcessOfMassTest<float, int> ExcessOfMassTestF_Int;
TEST_P(ExcessOfMassTestF_Int, Result) {
  //  EXPECT_TRUE(score == 1.0);
}

const std::vector<ExcessOfMassInputs<float, int>> eom_inputs = {
  {150,
   10,
   {150, 150, 151, 152, 151, 152, 151, 152, 151, 152, 151, 152, 151, 152, 151,
    152, 151, 152, 152, 151, 152, 151, 152, 151, 152, 151, 152, 151, 152, 151,
    152, 151, 152, 151, 152, 151, 152, 151, 152, 151, 152, 151, 152, 151, 152,
    151, 152, 151, 152, 151, 152, 151, 152, 151, 152, 151, 152, 151, 152, 151,
    152, 151, 152, 151, 152, 151, 152, 151, 152, 151, 152, 151, 151, 152, 151,
    152, 151, 152, 151, 151, 151, 151, 152, 151, 152, 151, 152, 151, 152, 151,
    151, 151, 151, 151, 152, 152, 152, 152, 152, 152, 152, 152, 152, 152, 152,
    152, 152, 152, 152, 153, 154, 153, 154, 153, 153, 154, 155, 156, 154, 155,
    156, 156, 156, 156, 156, 154, 155, 154, 154, 155, 157, 157, 157, 157, 157,
    158, 155, 158, 155, 158, 155, 158, 155, 158, 155, 155, 155, 155, 155, 158,
    158, 158, 158, 158, 158, 158, 158, 158},
   {151, 152, 41,  131, 15,  117, 14,  118, 22,  106, 18,  98,  13,  109, 33,
    57,  44,  60,  93,  32,  129, 24,  68,  43,  122, 16,  135, 5,   134, 23,
    119, 20,  125, 8,   114, 36,  108, 31,  148, 10,  87,  46,  100, 35,  105,
    6,   62,  19,  107, 42,  113, 25,  130, 11,  64,  38,  59,  37,  50,  48,
    141, 21,  52,  3,   85,  26,  84,  2,   102, 45,  136, 47,  29,  121, 12,
    146, 40,  110, 30,  1,   34,  9,   79,  28,  132, 4,   70,  49,  56,  7,
    27,  17,  39,  0,   137, 133, 73,  144, 53,  63,  81,  138, 72,  90,  66,
    103, 76,  153, 154, 77,  80,  126, 71,  155, 156, 51,  139, 83,  91,  143,
    123, 127, 142, 149, 101, 65,  104, 157, 158, 128, 54,  86,  58,  75,  74,
    97,  116, 61,  115, 88,  124, 67,  111, 78,  147, 145, 112, 120, 140, 55,
    95,  82,  89,  92,  94,  96,  99,  69},
   {0.60971076, 0.60971076, 1.25988158, 0.97590007, 1.56173762, 0.98058068,
    1.71498585, 1.03695169, 1.85695338, 1.13227703, 1.9245009,  1.22169444,
    2.,         1.24034735, 2.08514414, 1.27000127, 2.08514414, 1.38675049,
    1.38675049, 2.1821789,  1.41421356, 2.23606798, 1.41421356, 2.3570226,
    1.42857143, 2.5,        1.42857143, 2.5819889,  1.42857143, 2.5819889,
    1.5249857,  2.77350098, 1.5430335,  2.77350098, 1.56173762, 2.77350098,
    1.60128154, 2.88675135, 1.60128154, 3.01511345, 1.62221421, 3.01511345,
    1.64398987, 3.01511345, 1.64398987, 3.16227766, 1.71498585, 3.16227766,
    1.79605302, 3.16227766, 1.82574186, 3.33333333, 1.85695338, 3.33333333,
    1.85695338, 3.33333333, 1.85695338, 3.33333333, 1.9245009,  3.53553391,
    1.9245009,  3.53553391, 1.96116135, 3.77964473, 1.96116135, 3.77964473,
    1.96116135, 3.77964473, 2.,         3.77964473, 2.,         4.0824829,
    4.0824829,  2.04124145, 4.0824829,  2.08514414, 4.0824829,  2.13200716,
    4.0824829,  4.0824829,  4.0824829,  4.0824829,  2.13200716, 4.47213595,
    2.13200716, 4.47213595, 2.13200716, 4.47213595, 2.1821789,  4.47213595,
    4.47213595, 4.47213595, 4.47213595, 4.47213595, 2.1821789,  2.1821789,
    2.1821789,  2.29415734, 2.29415734, 2.29415734, 2.29415734, 2.29415734,
    2.29415734, 2.3570226,  2.3570226,  2.3570226,  2.3570226,  2.3570226,
    2.3570226,  2.3570226,  2.3570226,  2.3570226,  2.42535625, 2.3570226,
    2.3570226,  2.5819889,  2.42535625, 2.42535625, 2.5819889,  2.5819889,
    2.67261242, 2.67261242, 2.67261242, 2.67261242, 2.67261242, 2.5819889,
    2.5819889,  2.5819889,  2.5819889,  2.5819889,  2.5819889,  2.5819889,
    2.5819889,  2.5819889,  2.5819889,  2.5819889,  2.5819889,  2.67261242,
    2.5819889,  2.67261242, 2.5819889,  2.67261242, 2.5819889,  2.67261242,
    2.5819889,  2.5819889,  2.5819889,  2.5819889,  2.5819889,  2.67261242,
    2.77350098, 2.88675135, 3.01511345, 3.16227766, 3.16227766, 3.16227766,
    3.16227766, 3.16227766},
   {50, 100, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,  1, 1,  1,  1, 1, 1, 1, 1,  1,
    1,  1,   1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,  1, 1,  1,  1, 1, 1, 1, 1,  1,
    1,  1,   1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,  1, 1,  1,  1, 1, 1, 1, 1,  1,
    1,  1,   1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,  1, 1,  1,  1, 1, 1, 1, 1,  1,
    1,  1,   1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,  1, 21, 24, 1, 1, 1, 1, 13, 6,
    1,  1,   1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 5, 14, 1, 1,  1,  1, 1, 1, 1, 1,  1,
    1,  1,   1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,  1, 1,  1,  1, 1, 1},
   {91.45661412745385, 132.141415393331, 144.79914090562704,
    6.039613253960852e-14, 5.017592103770139, 2.7679291686055874,
    1.6462827222536025, 0.0, 4.2839605021840645},
   {1.0,
    0.9128709291752782,
    0.8451542547285168,
    0.8451542547285161,
    0.9999999999999994,
    0.5773502691896251,
    0.7071067811865474,
    1.0,
    0.6201736729460426,
    0.9128709291752782,
    0.674199862463241,
    0.7453559924999305,
    0.9128709291752762,
    0.4472135954999577,
    0.38348249442368554,
    0.34921514788478886,
    0.5590169943749476,
    1.0,
    0.4303314829119354,
    0.7071067811865479,
    0.6201736729460414,
    0.7905694150420947,
    0.4152273992687002,
    0.5773502691896251,
    0.5000000000000001,
    0.7453559924999295,
    0.8451542547285166,
    1.0,
    0.9999999999999994,
    0.9128709291752762,
    0.9128709291752782,
    0.6454972243679017,
    0.4879500364742671,
    0.46625240412015684,
    0.9128709291752782,
    0.6741998624632423,
    0.6201736729460426,
    0.7453559924999311,
    0.745355992499931,
    1.0,
    0.9128709291752767,
    0.2817180849095055,
    0.707106781186549,
    0.5270462766947299,
    0.4662524041201572,
    0.8451542547285168,
    0.6741998624632421,
    0.9128709291752762,
    0.7905694150420947,
    0.9999999999999994,
    0.8164965809277256,
    1.0,
    0.8320502943378424,
    0.9733285267845754,
    1.0,
    1.0,
    0.9258200997725513,
    0.5388159060803249,
    1.0,
    0.7878385971583363,
    0.5883484054145522,
    1.0,
    0.7276068751089991,
    0.9733285267845757,
    0.7878385971583358,
    1.0,
    0.9999999999999994,
    1.0,
    0.6000000000000002,
    1.0,
    0.9045340337332923,
    1.0,
    0.9733285267845763,
    0.9258200997725526,
    1.0,
    1.0,
    1.0,
    1.0,
    1.0,
    0.9045340337332914,
    1.0,
    0.9733285267845757,
    1.0,
    1.0,
    0.8320502943378447,
    0.8320502943378439,
    1.0,
    0.6882472016116854,
    1.0,
    1.0,
    0.9999999999999992,
    1.0,
    1.0,
    0.5883484054145522,
    1.0,
    1.0,
    1.0,
    1.0,
    0.518321055348816,
    1.0,
    0.6974858324629155,
    1.0,
    0.8485281374238571,
    0.9999999999999997,
    1.0,
    0.6974858324629161,
    0.480384461415262,
    0.7620007620011434,
    0.6793662204867577,
    0.5262348115842176,
    0.9045340337332909,
    1.0,
    1.0,
    0.7745966692414838,
    0.6625891564490795,
    1.0,
    1.0,
    0.41602514716892197,
    0.43994134506405985,
    0.6469966392206309,
    1.0,
    0.8660254037844396,
    0.6060915267313262,
    1.0,
    1.0,
    0.6546536707079774,
    1.0,
    1.0,
    1.0,
    0.6000000000000001,
    0.7878385971583357,
    0.4140393356054126,
    0.904534033733292,
    0.9258200997725521,
    0.6060915267313265,
    0.6060915267313262,
    0.8485281374238571,
    0.9258200997725519,
    0.9733285267845759,
    1.0,
    1.0,
    0.8164965809277258,
    1.0,
    1.0,
    0.9733285267845746,
    1.0,
    0.8846517369293835,
    1.0,
    0.6793662204867581,
    1.0}}};

INSTANTIATE_TEST_CASE_P(ExcessOfMassTest, ExcessOfMassTestF_Int,
                        ::testing::ValuesIn(eom_inputs));

}  // end namespace ML
