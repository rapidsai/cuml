# Copyright (c) 2020, NVIDIA CORPORATION.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

# Based on FindPNG.cmake from cmake 3.14.3

#[=======================================================================[.rst:
Find@PKG_NAME@
--------

Template to generate FindPKG_NAME.cmake CMake modules

Find @PKG_NAME@

Imported targets
^^^^^^^^^^^^^^^^

This module defines the following :prop_tgt:`IMPORTED` target:

``@PKG_NAME@::@PKG_NAME@``
  The lib@PKG_NAME@ library, if found.

Result variables
^^^^^^^^^^^^^^^^

This module will set the following variables in your project:

``@PKG_NAME@_INCLUDE_DIRS``
  where to find @PKG_NAME@.hpp , etc.
``@PKG_NAME@_LIBRARIES``
  the libraries to link against to use lib@PKG_NAME@.
``@PKG_NAME@_FOUND``
  If false, do not try to use @PKG_NAME@.
``@PKG_NAME@_VERSION_STRING``
  the version of the @PKG_NAME@ library found

#]=======================================================================]

find_path(@PKG_NAME@_LOCATION @PKG_HEADER_NAME@
          HINTS ${@PKG_NAME@_INSTALL_DIR}
          PATH_SUFFIXES include include/@PKG_LOCATION@)

list(APPEND @PKG_NAME@_NAMES @PKG_LIBRARY_NAME@ lib@PKG_LIBRARY_NAME@)
set(_@PKG_NAME@_VERSION_SUFFIXES @PKG_VERSION@)

foreach(v IN LISTS _@PKG_NAME@_VERSION_SUFFIXES)
  list(APPEND @PKG_NAME@_NAMES @PKG_LIBRARY_NAME@${v} lib@PKG_LIBRARY_NAME@${v})
  list(APPEND @PKG_NAME@_NAMES @PKG_LIBRARY_NAME@.${v} lib@PKG_LIBRARY_NAME@.${v})
endforeach()
unset(_@PKG_NAME@_VERSION_SUFFIXES)

find_library(@PKG_NAME@_LIBRARY_RELEASE NAMES ${@PKG_NAME@_NAMES}
             HINTS ${@PKG_NAME@_INSTALL_DIR}
             PATH_SUFFIXES lib)

include(${CMAKE_ROOT}/Modules/SelectLibraryConfigurations.cmake)
select_library_configurations(@PKG_NAME@)
mark_as_advanced(@PKG_NAME@_LIBRARY_RELEASE)
unset(@PKG_NAME@_NAMES)

# Set by select_library_configurations(), but we want the one from
# find_package_handle_standard_args() below.
unset(@PKG_NAME@_FOUND)

if (@PKG_NAME@_LIBRARY AND @PKG_NAME@_LOCATION)
  set(@PKG_NAME@_INCLUDE_DIRS ${@PKG_NAME@_LOCATION} )
  set(@PKG_NAME@_LIBRARY ${@PKG_NAME@_LIBRARY})

  if(NOT TARGET @PKG_NAME@::@PKG_NAME@)
    add_library(@PKG_NAME@::@PKG_NAME@ UNKNOWN IMPORTED)
    set_target_properties(@PKG_NAME@::@PKG_NAME@ PROPERTIES
      INTERFACE_INCLUDE_DIRECTORIES "${@PKG_NAME@_INCLUDE_DIRS}")
    if(EXISTS "${@PKG_NAME@_LIBRARY}")
      set_target_properties(@PKG_NAME@::@PKG_NAME@ PROPERTIES
        IMPORTED_LINK_INTERFACE_LANGUAGES "CXX"
        IMPORTED_LOCATION "${@PKG_NAME@_LIBRARY}")
    endif()
  endif()
endif ()


include(${CMAKE_ROOT}/Modules/FindPackageHandleStandardArgs.cmake)
find_package_handle_standard_args(@PKG_NAME@
                                  REQUIRED_VARS @PKG_NAME@_LIBRARY @PKG_NAME@_LOCATION
                                  VERSION_VAR @PKG_NAME@_VERSION_STRING)

mark_as_advanced(@PKG_NAME@_LOCATION @PKG_NAME@_LIBRARY)
